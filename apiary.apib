FORMAT: 1A
HOST: https://tenant.acrolinx.cloud

# Acrolinx Platform API

The Acrolinx Platform API is the new REST like API for accessing the Core Platform.

**NOTE:** All listed (future) features, which aren't yet or only partially implemented, are marked with the keyword DRAFT. Please consider this while using the Acrolinx Platform API!

# Authentication and Authorization

When using the Acrolinx Platform API, you'll need to be authorized and authenticated. This is done by providing an **Access Token**.

An **Access Token** is an encoded and cryptographically signed string. It has the following characteristics:

* It's bound to a user
* There can be an infinite number of Access Tokens per user
* It has a certain lifetime (default 30 days, can be changed)
* It will expire after the lifetime or when the password of the associated user is changed
* It provides authorization and authentication

How to get an **Access Token**?
You can get an Access Token by using the Acrolinx sign-in workflow.
(further description here)

How to use an Access Token?

Every request you make with the Acrolinx Platform API must contain a [header](#header-access-token) that provides the Access Token:

```
    X-Acrolinx-Auth: WERTZUIOP
```

## API Token
An API Token is an Access Token but with special characteristics:

* It has a lifetime of 4 years
* It will **not expire when the password of the associated user is changed**
* Only one API Token can be bound to a user at the time

How to get API Token:
* Accessing the user settings page on the Dashboard and generating one.
* Programmatically using the **User API**. (See more under the **User Generated API Tokens** section)

Other than that, the **API Token** functions as an **Access Token**.

# General Headers

## Access Token

All methods except "index" and "poll access token" require a valid access token in the `X-Acrolinx-Auth` header even if not explicitly mentioned below.
If the token is invalid, a `401` response is returned (see `401` response of "index") even if this response isn't explicitly mentioned below.

Example:

```
    X-Acrolinx-Auth: 123579080a8d1fee12490a90dc3
```

## Base URL

To support reverse proxies, a client may provide the `X-Acrolinx-Base-Url` header with each request. If the response body to the request
contains links into the Acrolinx API, the server will prefix them with the given value. The provided value must be an absolute URL including scheme and host.
Malformed values will result in a `400` status code.

Example:

```
    X-Acrolinx-Base-Url: https://example.com/path/
```

## Client Locale

All methods accept a header `X-Acrolinx-Client-Locale` that the client can use to identify its own locale (for example, UI language).
The value of the header field needs to be a single language tag that complies with [BCP 47](https://www.ietf.org/rfc/bcp/bcp47.txt). The Acrolinx Platform will try to return message strings
and other locale-specific parts of the response in the requested language.

Example:

```
    X-Acrolinx-Client-Locale: de-CH
```

The server tries to match the sent locale to the closest locale that it's able to support, for example, `de`.
The "index" request returns the list of supported locales. The server falls back to the default `en` locale in the following cases:

* no X-Acrolinx-Client-Locale header is sent
* there's no matching supported locale
* for the given response, there's no appropriate localization available

## Signature

If not otherwise documented, all methods require you to set a header `X-Acrolinx-Client`. The header needs to be a valid signature. The request
returns an error if the header is omitted or if the signature provided is invalid.

The format of the signature is `Signature;Version`, where `Signature` is the signature as configured in the Acrolinx license and
`Version` is the version number of the client.

Example:

```
    X-Acrolinx-Client: SW50ZWdyYXRpb25EZXZlbG9wbWVudERlbW9Pbmx5; 1.0.1.45
```

# Response Format

The API provides a consistent format for all responses. Each response has a field `links` and one of the three fields `error`, `progress`, `data`.

The `links` field contains further URLs that can be used as a next step in the workflow.
`error` is set if the request didn't succeed. This is accompanied by an HTTP status code above or equal 4xx.
`progress` means that the processing isn't finished yet and the client has to poll for the final result.
`data` contains the actual result data, the processing is successfully finished.

## Error Responses

### General Format

The API provides a consistent format for errors, which is based on [RFC7807](https://datatracker.ietf.org/doc/rfc7807/?include_text=1).
The format is JSON and the API guarantees to send the fields `type`, `title`, `detail`, `status` with each error response.

Example:

```
HTTP/1.1 403 Forbidden
Content-Type: application/problem+json
{
  "error": {
    "type": "auth",
    "title": "Invalid authentication",
    "detail": "The provided token for authorization is not valid.",
    "status": 403
  }
  "links": {}
}
```

* `type` is a unique identifier for the type of error. A client may choose a workflow for the error handling depending on the type.
* `title` is a short description of the error. You can display this to users as the title of the error message.
* `detail` is a longer description of the error. You can also display this for users.
* `status` is redundant to the HTTP status code. It may be helpful in case a proxy changed the HTTP status code of the original API response.
* You might also see an optional `reference` field with an ID. If present, you can find this ID in the Acrolinx log files to help with troubleshooting.

Depending on `type`, additional fields may be part of the response providing more detailed information.

Additional fields may be added in future. A client must not break because of unexpected fields.



### Error Types

Type | Description| What to do
-----|------------|------------
`client` | Unspecific error caused by the client's request. | Check logs and configuration or the client code.
`server` | Unspecific error during processing of a request in Acrolinx. | Check logs and configuration.
`clientSignatureMissing` | The `X-Acrolinx-Client` header was missing.  | [Contact Acrolinx](https://www.acrolinx.com/contact/) to learn how to get a valid license.
`clientSignatureRejected` | The given signature in the `X-Acrolinx-Client` header was invalid. | [Contact Acrolinx](https://www.acrolinx.com/contact/) to learn how to get a valid license.
`sso` | Returned for any single sign-on errors. | This is likely a configuration issue.
`auth` | Invalid authentication. | Use another access token.
`insufficientPrivileges` | Insufficient privileges. | Assign the required privileges to the user.
`interactiveSignInTimedOut` | The interactive sign-in process timed out. | Sign in again.
`checkCancelled` | The check was canceled. No result is available. | Probably points to an error in the client.
`checkFailed` | The check failed. | Check logs and configuration.
`invalidBaseUrl` | The request contained an invalid base URL in the `X-Acrolinx-Base-URL` header. | Check configuration of client or proxies, which set the header.
`customFieldsIncorrect` | Custom field values are incorrect. |Please provide valid values for all required custom fields before or when checking a document.
`validation` | Invalid request attributes. | Check the request for invalid values or missing parameters.
`guidanceProfileDoesntExist` | Guidance profile doesn't exist. | The guidance profile doesn't exist or isn't available for the user ID and language provided.
`noGuidanceProfileConfigured` | No guidance profile configured. | No guidance profile is configured for the user ID and language provided.
`contentTooLarge` | File too large. | Try checking less content.
`queueLimitExceeded` | Queue limit exceeded. | Wait at least as long as suggested in the retry-after header and try another check.
`conflict` | Concurrent write access. | Conflict with a concurrent write access. Try again with fresh data.
`licenseLimitExceeded` | License limit exceeded. | You exceeded a limit set by the terms of your license. The error description contains more details. Please check [the documentation](https://support.acrolinx.com/hc/en-us/articles/10306079192082-License-Types) for more information.
`entityToAssociateNotFound` | One or more associates to an entity could not be found. | Make sure that the given associates actually exist.


### Additional Information On Validation Errors

Errors with type `validation` come with a list of constraint violation descriptions in an additional property `validationDetails`:

```
{
    "title": "Validation error",
    "constraint": "The 'languageId' is required.",
    "attributePath": "submit.arg1.languageId",
    "detail": "The 'languageId' is required but was 'null'.",
    "invalidValue": "DictionaryEntry{surface='TestSurface', scope=language, languageId='', guidanceProfileId='null', documentId='null'}",
    "possibleValues": ["en", "de"]
}

```
* `title`: "Validation error"
* `constraint`: A minimal description of the constraint that was violated.
* `attributePath`: A hint towards the property or parameter that had an invalid value.
* `detail`: A more detailed description of the constraint violation.
* `invalidValue`: The value that was invalid. Can be a data structure.
* `possibleValues`: An optional list of valid values for the property.


The `validationDetails` are intended as information for developers to troubleshoot bad requests.
They are not intended for automated consumption.
Values are not guaranteed to be always present or in a uniform format.



## Progress Responses

A progress response always contains a field `retryAfter`, which tells the client how many seconds to wait until the next poll request.
Optionally the response can have the fields `message`, that contains a human user readable text about the current status, and `percent`, that
is a number and shows the progress in percent.
A progress response has always the `Retry-After` header set with the same value as the `retryAfter` field and an HTTP status 202.

Examples:

```
HTTP/1.1 202 Accepted
Content-Type: application/json
{
  "progress": {
    "message": "The request is queued on position 5.",
    "percent": 2,
    "retryAfter": 5
  }
  "links": {
    "cancel": "https://tenant.acrolinx.cloud/api/v1/checks/ID100"
  }
}
```

```
HTTP/1.1 202 Accepted
Content-Type: application/json
{
  "progress": {
    "retryAfter": 1
  }
  "links": {}
}
```

## Successful Responses

The fields of a successful response with data depend on the request.

Example:

```
HTTP/1.1 200 Ok
Content-Type: application/json
{
  "data": {
    "score": 99,
    "textualScore": "Good job!"
  }
  "links": {
    "submit": "https://tenant.acrolinx.cloud/api/v1/checks"
  }
}
```

# HTML Fields

Responses may have fields with HTML snippets to provide nice formatting in interactive clients. Those fields are clearly marked by a name that ends with "Html", for example, "guidanceHtml". There may be related fields with the same content in plain text. If such a field exists, it ends with "Text" like in the example, "guidanceText".

All HTML fields only contain formatting tags that can be used without security risks. All tags are filtered by a server-side allow list.

# Group Index

## Index [GET /api/v1]

Note: This is the only web service method that provides a 200 response if no access token was sent.

+ Request

    + Header

            X-Acrolinx-Auth: ""


+ Response 200 (application/json)

        {
          "data": {
            "server": {
                "version": "5.1.0.123",
                "name": "Acrolinx Core Platform"
            },
            "locales": [ "en" ]
          },
          "links": {
            "signIn": "https://tenant.acrolinx.cloud/api/v1/auth/sign-ins"
            }
        }


+ Request

    + Header

            X-Acrolinx-Auth: 123579080a8d1fee12490a90dc3


+ Response 200 (application/json)

        {
          "data": {
            "server": {
                "version": "5.1.0.123",
                "name": "Acrolinx Core Platform"
            },
            "locales": [ "en" ]
          },
          "links": {
            "signIn": "https://tenant.acrolinx.cloud/api/v1/auth/sign-ins",
            "submitCheck": "http://tennant.acrolinx.cloud/api/v1/checking/checks"
          }
        }


+ Response 401 (application/json)

        {  // if provided access token became invalid
          "error": {
            "type": "auth",
            "title": "Invalid access token",
            "detail": "The provided token for authorization is invalid.",
            "status": 401
          },
          "links": {}
        }

## Platform Capabilities [GET /api/v1/capabilities]

An aggregation of the capabilities of the APIs sub-resources. This resource serves a single entry point for clients that need
to use more than one feature of the API.

+ Response 200 (application/json)
    + Attributes
        + data (object)
            + checking (object) - capabilities of the checking resource
            + document (object) - capabilities of the document resource
        + links (object)


# Group Authentication API

Authentication is handled either with a configured access token, with single sign-on (SSO) or in an interactive process by signing in with the Acrolinx sign-in web page.
Embedded integrations use either the configured access token or SSO.
Interactive clients with a human user use SSO or the interactive process.

## Request/Validate an API Token [POST /api/v1/auth/sign-ins]

The sign-in collection allows Acrolinx API clients to request user authentication and to check
the validity and privileges of existing access tokens.

If the Acrolinx Platform is configured for single sign-on, this endpoint will accept the configured credentials
to authenticate the request.

+ Request (application/json)

    + Header

            X-Acrolinx-Auth: 123579080a8d1fee12490a90dc3 (valid) OR (invalid/expired access token) OR (no access token)
            X-Acrolinx-Client-Locale: ja
            X-Acrolinx-Client: QWxlU2hNyb2bHVnLWlunhQyR29Rm9xpbvZ2lZXRz; 1.0.1.45;

+ Response 200 (application/json)
    No sign-in needed, the response body will contain valid access tokens.

    The server may decide that the request is already sufficiently authorized. In this case,
    no sign-in process is started. The response will contain the same information as after
    successful sign-in procedure. The following conditions may lead to this response:

    - The `X-Acrolinx-Auth` header contained a valid token.
    - Single sign-on is configured and valid credentials are supplied.

    + Attributes (object)

+ Response 201 (application/json)
    If the `X-Acrolinx-Auth` header is absent a
    new sign-in process is started. The response body contains two links.
    One allows the user to complete the sign-in process.
    The other helps the client to acquire the session data:

    - `interactive` a link to a website that allows the user to authenticate and
          permit the client to access the server. If a language was provided in the
          `X-Acrolinx-Client-Locale` header, the link will point to a localized
          version of that website if available and technically possible.

    - `poll` a link to a resource that will return an *access token* and information
          about the user after sign-in. (see [GET `api/v1/auth/sign-ins/{id}`](#authentication-api-poll-for-a-new-api-token-get))

    Note that the sign-in process will time out. The `interactiveLinkTimeout` field
    contains the duration in seconds, that the `interactive` link will stay valid. If the
    Sign-in page was loaded before this time, the server will extend
    the timeout. To detect timeouts after opening the Sign-in page use the `poll` link.

    + Body

            {
              "data": {
                "state": "Started",
                "interactiveLinkTimeout": 900
              },
              "links": {
                  "interactive": "https://tenant.acrolinx.cloud/dashboard.html?login=19901-2-8412998412",
                  "poll": "https://tenant.acrolinx.cloud/api/v1/auth/sign-ins/185-0ijfgklejt2390tui"
              }
            }

    + Attributes
        + data
          + `state`:`Started` (string, required)
          + `interactiveLinkTimeout`: 900 (number, required)
        + links
            + `interactive`: `https://tenant.acrolinx.cloud/dashboard.html?login=19901-2-8412998412` (string, required)
            + `poll`: `https://tenant.acrolinx.cloud/api/v1/auth/sign-ins/185-0ijfgklejt2390tui` (string, required)

+ Response 401 (application/json)
    If invalid SSO credentials are supplied the request is rejected. This occurs when an SSO username
    is present but the SSO password is wrong or missing or the user couldn't be created.

    + Header

            WWW-Authenticate: ACROLINX_TOKEN, ACROLINX_SIGN_IN (, ACROLINX_SSO)

    + Attributes (object)

+ Response 503
    The server is unable to start a sign-in process at this time.

    + Header

            Retry-After: 30

    + Attributes (object)

## Poll for a New API Token [GET /api/v1/auth/sign-ins/{id}]

This resource lets a client wait for a user to authenticate and authorize it to use the
privileged parts of the Acrolinx API. Once the user has completed the sign-in process,
it will return a new access token. It can be sent with each API call to prove the
privileges and identity owned by the user that signed in.

When polling returned a final result, the polling endpoint will disappear and return a `NOT FOUND` status.

+ Parameters
    + id: `99576707-ed8c-44b6-82b8-c3ced8f349d1` (string, required) - poll-id for the authorization request

+ Request

    + Header

            X-Acrolinx-Client: QWxlU2hNyb2bHVnLWlunhQyR29Rm9xpbvZ2lZXRz; 1.0.1.45

+ Response 200 (application/json)
   A user has completed the sign-in process and the server has created a new access token.

   Note that this resource will disappear after this response.

   + Attributes (object)

+ Response 202 (application/json)
   The user hasn't authorized the sign-in yet. Request the same URI again to continue polling.
   Note that clients should pace themselves by respecting the `Retry-After` header.

    + Header

            Retry-After: 2

    + Attributes
        + progress
           + `retryAfter`: 2 (number, required)

+ Response 404 (application/json)
    The server has no knowledge of the polling token. If a valid poll URI was used, the cause for this is
    a timeout or another poll request may have consumed the credentials.

    The returned type is `interactive_sign_in_timed_out`, which distinguishes this response from a normal 404 caused by a just wrong URL.

    + Attributes
       + error
         + `type`: `interactive_sign_in_timed_out` (string, required)
         + `status`: 404 (number, required)
         + title: `The interactive sign-in process timed out` (string, required)
         + detail: `The interactive sign-in process timed out. Please start a sign-in.` (string, required)


# Group Checking API

The API for checking documents.

## List Checking Capabilities [GET /api/v1/checking/capabilities]

The new checking API replaces writing guides and Content Profiles with a flat list of guidance profiles. Each guidance profile corresponds to a
writing guide or a Checking Profile. If Sublanguages are activated, they're folded into the list of guidance profiles.

For each guidance profile, the server provides information about the language, activated goals, and term sets. The client may use this
for filtering purposes, but they can only select one (complete) guidance profile for checking (for example, not deselect goals).

If the server runs in Targets Mode, the goals contain an additional string field called `scoring`. It can have the values
`required` (meaning this goal will be included in the calculation of the overall score so it is required to take this goal into account
when creating content) or `recommended` (meaning this goal is a recommendation only and does not count towards the overall document score).

**Note:** Before you get started with the Checking API, be sure to review the [authentication and authorization](https://acrolinxapi.docs.apiary.io/#introduction/authentication-and-authorization) requirements. 

+ Request

    + Headers

            X-Acrolinx-Auth: your_access_token
            X-Acrolinx-Client: your_client_signature

+ Response 200 (application/json)

        {
          "data": {
            "guidanceProfiles": [
                {
                    "id": "aud-1",
                    "displayName": "Tom the Technical Type",
                    "language": {
                        "id": "en-gb",
                        "displayName": "English (Great Britain)"
                    },
                    "goals": [{
                        "id": "CORRECTNESS",
                        "displayName": "Correctness",
                        "color": "#00bfa5",
                        "scoring": "required"
                    },
                    {
                        "id": "CLARITY",
                        "displayName": "Clarity",
                        "color": "#ec407a",
                        "scoring": "recommended"
                    },
                    {
                        "id": "WORDS_AND_PHRASES",
                        "displayName": "Words and Phrases",
                        "color": "#ea80fc",
                        "scoring": "required"
                    }],
                    "termSets": [{
                        "displayName": "Switches"
                    },
                    {
                        "displayName": "Acrolinx"
                    }]
                },
                {
                    "id": "aud-2",
                    "displayName": "Randolf Redakteur",
                    "language": {
                        "id": "de",
                        "displayName": "German"
                    },
                    "goals": [{
                        "id": "CORRECTNESS",
                        "displayName": "Correctness",
                        "color": "#00bfa5",
                        "scoring": "required"
                    }],
                    "termSets": []
                }
            ],
            "contentFormats": [
                {
                    "id": "auto",
                    "displayName": "Automatic Detection"
                },
                {
                    "id": "text",
                    "displayName": "Plain Text"
                },
                {
                    "id": "markdown",
                    "displayName": "Markdown"
                },
                {
                    "id": "xml",
                    "displayName": "XML"
                },
                {
                    "id": "word_xml",
                    "displayName": "XML (MS Word 2003)"
                }
            ],
            "contentEncodings": [ "none", "zip,base64", "base64" ],
            "referencePattern": "\\.(xml|xhtm|xhtml)$|\\.(md|markdown|mdown|mkdn|mkd)$|\\.(docx|docm|pptx|pptm|xlsx|xlsm)$|\\.txt$",
            "checkTypes": [ "batch", "interactive", "baseline", "automated" ],
            "reportTypes": ["extractedText", "termharvesting", "scorecard"]
          }
        }

##  Submit a Check [POST /api/v1/checking/checks]

Submits a file for checking. After the file is uploaded, it will be scheduled for checking. Once Acrolinx is done checking the document,
all results will be collected and made available. This leads to the following steps when using the check API:

* submit a check
* poll for progress
* download check results

For an overview on what documents and file types are supported by Acrolinx please consult the list of
[Supported Input Types](https://support.acrolinx.com/hc/en-us/articles/10211264846482-Supported-Input-Types).
The same information is available in the checking capabilities.

+ Request (application/json)

    + Headers

            X-Acrolinx-Auth: your_access_token
            X-Acrolinx-Client: your_client_signature

    + Body

            // A minimal request declaring the format only:

            {
                "content": "text to check",                  // required
                "checkOptions": {
                    "contentFormat": "markdown",                 // recommended, default: auto
                },
            }

            // A minimal request using a document reference to tell the format:

            {
                "content": "text to check",                  // required
                "document": {                                // recommended, default: empty "document" object
                    "reference": "C:\\abc.md",              // recommended, used to determine the input format and correlate multiple checks of the same document
                }
            }


            // If a standard format is configured on the server, the minimal request is even shorter:

            {
                "content": "text to check",                  // required
            }

            // A request can be much more specific, this is the full set of attributes:

            {
                "content": "text to check",                  // required
                "contentEncoding": "base64",                 // optional, default: none = HTTP request encoding
                "checkOptions": {
                    "guidanceProfileId": "aud-1",                // optional, default: first guidance profile. In Targets Mode: optional target name/target id, default: detected by Automatic Target Assignment
                    "reportTypes": ["scorecard"],                // optional, default: scorecard
                    "contentFormat": "markdown",                 // optional, default: auto
                    "checkType": "batch",                        // optional, default: interactive
                                                                 // the use case of the check, can be:
                                                                 //   interactive =  human user checks own document
                                                                 //   batch       =  human user checks many own documents
                                                                 //   baseline    =  a repository of documents is checked, the user doesn't own the documents
                                                                 //   automated   =  check of a single document for automated scenarios as for example a git hook
                    "partialCheckRanges": [{ "begin": 10, "end": 20 }, { "begin": 40, "end": 70 }],   // makes the check a partial check
                    "batchId": "gen.clc.159203590"                      // only for batch checks; optional;
                },
                "document": {                               // optional, default: empty "document" object
                    "reference": "C:\\abc.md",              // optional client known id hint e.g. a file name
                    "customFields": [                       // optional
                        {
                            "key": "field1",
                            "value": "value1"
                        },{
                            "key": "field2",
                            "value": "value2"
                        }
                    ]
                 },
                 "language": "en"                           // optional: force language for Target Assignment using
                                                            //           guidanceProfile.language.id codes (see
                                                            //           checking capabilities)
                                                            // default: target language if target is set in checkOptions.guidanceProfileId,
                                                            //          otherwise auto-detected
            }

+ Response 201 (application/json)

        {
          "data": {
            "id": "AB-153"
          },
          "links": {
            "result": "https://tenant.acrolinx.cloud/api/v1/checking/checks/AB-153",
            "cancel": "https://tenant.acrolinx.cloud/api/v1/checking/checks/AB-153"
          }
        }

+ Response 400 (application/json)

        {
          "error": {
            "detail": "The guidance profile doesn't exist or isn't available for the user id and language given.",
            "type": "content_goal",
            "title": "guidance profile doesn't exist",
            "status": 400
          },
          "links": {
          }
        }


## Check Result [/api/v1/checking/checks/{id}]

### Check Result How-To

#### Ignore All Issue Occurrences
Every issue in the check result has the attribute `positionalInformation.hashes.issue`. You can use this attribute to find all occurrences of an issue. All these issues can be ignored together.

The integration can also remember the `positionalInformation.hashes.issue` attribute after an ignore-all operation. This lets you filter out all previously ignored occurrences of an issue after a recheck.

#### Replace All Issue Occurrences with a Suggestion
Every issue in the check result has the attribute `positionalInformation.hashes.issue`. You can use this attribute to find all occurrences of an issue.

To apply a suggestion to all occurrences of an issue, use the `groupId` attribute to find the corresponding suggestion.
If an occurrence of an issue doesn't have a suggestion with the same `groupId` or if the `groupId` is empty, then it can't be replaced with a replace-all operation.

Note that not all occurrences of an issue always have the same suggestions. In this case, the replace-all operation only applies to issues with the same suggestion.


### Poll Check Result [GET]

Polls the check result. Either a progress or the completed result is returned. The URL for the request is found in the submitted check's "result" link.

+ Parameters
    + id: `AB-153` (required, string) - the check id

+ Request

    + Headers

            X-Acrolinx-Auth: your_access_token
            X-Acrolinx-Client: your_client_signature

+ Response 202 (application/json)

    + Headers

            Retry-After: 2

    + Body

            {
              "progress" : {
                "percent": 20,
                "message": "Waiting in queue",
                "retryAfter": "2"
              }
            }

+ Response 200 (application/json)

        Attention: which attributes are contained in the response depends on
        configuration, request and the document. The 'scoring' field in the
        goals are only present if the server runs in Targets Mode.

        {
          "data":{
            "id": "AB-153",
            "checkOptions": {
                "guidanceProfileId": "aud_1",
                "guidanceProfileName": "Acrolinx Essentials",
                "languageId": "en",
                "termSets": [{
                    "displayName": "Switches"
                },
                {
                    "displayName": "Acrolinx"
                }],
                "reportTypes": ["scorecard", "termharvesting"],
                "contentFormat": "markdown",
                "checkType": "interactive",
                "partialCheckRanges": [{ "begin": "10", "end": "20" }, { "begin": "40", "end": "70" }],
                "confidential": false
            },
            "document": {
                "id": "283ab1e075f21a",
                # DRAFT ------START------
                "contentType": "E-Mail",
                # DRAFT ------END------
                "customFields": [
                    {
                        "displayName": "Project ID",
                        "key": "projectId",
                        "value": "Marketing Campaign",
                        "required": true
                    }
                ],
                "displayInfo": {
                    "reference": "abc.md"
                }
            },
            "quality": {
                "score": 81,
                "status": "red",
                "scoresByStrategy": [
                {
                  "id": "average",
                  "score": 81
                },
                {
                  "id": "minimum",
                  "score": 78
                }],
                "scoresByGoal": [
                {
                  "id": "CORRECTNESS",
                  "score": 83
                },
                {
                  "id": "CLARITY",
                  "score": 64
                },
                {
                  "id": "WORDS_AND_PHRASES",
                  "score": 78
                }],
                "metrics": [
                {
                  "id": "Clarity index",
                  "score": 100
                },
                {
                  "id": "Informality index",
                  "score": 47
                },
                {
                  "id": "Liveliness index",
                  "score": 50
                },
                {
                  "id": "Flesch Reading Ease",
                  "score": 36
                }]
            },
            "counts": {
                "issues": 4,
                "scoredIssues": 2, // **Since Core Platform 2020.11**
                "sentences": 10,
                "words": 121
            },
            "goals": [{
                "id": "CORRECTNESS",
                "displayName": "Correctness",
                "color": "#00bfa5",
                "scoring": "required",
                "issues": 1
            },
            {
                "id": "CLARITY",
                "displayName": "Clarity",
                "color": "#ec407a",
                "scoring": "recommended",
                "issues": 2
            },
            {
                "id": "WORDS_AND_PHRASES",
                "displayName": "Words and Phrases",
                "color": "#ea80fc",
                "scoring": "required",
                "issues": 1
            }],
            "issues": [
                {
                    "goalId": "CORRECTNESS",
                    "guidelineId": "EN20111291451MK",
                    "internalName": "title_case_chicago",
                    "displayNameHtml": "Use Chicago style for the title case?",
                    "guidanceHtml": "<div class=\"shortHelp\" lang=\"en\" xml:lang=\"en\">\n<p>According to the <q>Chicago Manual of Style</q>, here's how you write titles:</p>\n<ul>\n<li>Capitalize the first word and the last word.</li>\n<li>Capitalize all \"main\" words.</li>\n<li>Don't capitalize articles and conjunctions (example: <q>a</q>, <q>and</q>).</li>\n<li>Don't capitalize prepositions independent of their length (example: <q>about</q>, <q>around</q>).</li>\n</ul>\n</div>",
                    "displaySurface": "zentense",
                    "canAddToDictionary": true,
                    "issueType": "actionable",   // possible values: actionable, analytical (since 2021.02)
                    "positionalInformation": {
                        "hashes": {
                            "issue": "BhKh3iaGBjB7Cw6M/GwrLQ==",
                            "environment": "vJ9eCVViEpIdM76h+5K/nA==",
                            "index": "hjlRLT0K+LlvlslKdNUlhw==1"
                        },
                        "matches": [{
                            "extractedPart": "zen",
                            "extractedBegin": 30,
                            "extractedEnd": 33,
                            "originalPart": "zen",
                            "originalBegin": 19247,
                            "originalEnd": 19255
                        }, {
                            "extractedPart": "te",
                            "extractedBegin": 33,
                            "extractedEnd": 35,
                            "originalPart": "&te;",
                            "originalBegin": 19250,
                            "originalEnd": 19254
                        },{
                            "extractedPart": "nse",
                            "extractedBegin": 35,
                            "extractedEnd": 38,
                            "originalPart": "nse",
                 "issueLocations": [
                        {
                            "locationId": "pageLocation",
                            "displayName": "Page 4",
                            "values": { "page": "4" }
                        }
                    ],
                    "suggestions": [
                        {
                            "surface": "sentence",
                            "groupId": "sentence",
                            // the replacements refer to the matches entry of the same Index
                            // null means, don't change, any other value including the empty string means, replace the match
                            "replacements": ["sen",null,"nce"],
                            "iconId":"preferred" // optional icon id for terminology issues, "preferred" or "admitted"
                        }
                  }],
                    "links":
                        {
                            "termContribution": "https://tenant.acrolinx.cloud/terminology/v7/rest/contribute",
                            "termContributionInteractive": "https://tenant.acrolinx.cloud/termcontribution.html?surface=@@base64:cXdlcnR5dWlvcA==&locale=en&language=en&userid=admin&context=@@base64:VGhpcyBzZW50ZW5jZSBoYXMgYSBxd2VydHl1aW9wLg==",
                            "addToDictionary": "https://tenant.acrolinx.cloud/api/v1/dictionary/submit",
                            "help":"https://tenant.acrolinx.cloud/htmldata/en/rules/help/title_case_chicago.html"
                        }
                },
                {
                    "goalId": "WORDS_AND_PHRASES",
                    "guidelineId": "b4a5192e-5f9e-4f10-a849-a16be4b9cb18",
                    "internalName": "term_flag",
                    "displayNameHtml": "<b>Illegal sublanguage variant</b> of preferred term",
                    "guidanceHtml": "<div class=\"guidance term\">\n\t<b>Domains</b>\n\t\t\t<br/><i>Switches</i>\n\t\t\t\t\t<br/>\n\t\t<b>Note</b>\n\t\t<br/>\n\t\tUse &#39;please&#39; in presale materials only. Do NOT use &#39;please&#39; in postsale material.\n\t</div>\n",
                    "canAddToDictionary": false,
                    "issueType": "actionable",
                    "displaySurface": "Please",
                    "positionalInformation": {
                        "hashes": {
                            "issue": "3qyt/AVxwNTOUQSuMA7brw==",
                            "environment": "TiwIFBwA6X920mDAezJTyQ==",
                            "index": "Lm9PqBGGm+tj21rt3pkpjA==1"
                        },
                        "matches": [{
                            "extractedPart": "Please",
                            "extractedBegin": 766,
                            "extractedEnd": 772,
                            "originalPart": "Please",
                            "originalBegin": 28223,
                            "originalEnd": 28229,
                        }],
                    },
                    "readOnly": false,
                    "issueLocations": [],
                    "suggestions": [
                        {
                            "surface": "blablub",
                            "icon": "https://tenant.acrolinx.cloud/tng/icons/preferred.svg",
                            "groupId": "2653",
                            "replacements": ["blablub" ]
                            }
                        }
                    ],
                    # DRAFT ------START------
                    "debug": {
                        "term": {
                            "surface": "please",
                            "status": "DEPRECATED",
                            "termSets": ["RA-Terms"],
                            "domains": ["RA-Terms"],
                            "variant": "legalVariantIllegal",
                        }
                    }
                    # DRAFT -------END-------
                },
                {
                    "goalId": "CLARITY",
                    "guidelineId": "EN40111231459",
                    "internalName": "en-clarity-medium",
                    "displayNameHtml": "Too complex? Your readers need a medium level of clarity. ",
                    "guidanceHtml": "",
                    "canAddToDictionary": false,
                    "issueType": "actionable",
                    "displaySurface": "Reports ... length",
                    "positionalInformation": {
                        "hashes": {
                            "issue": "E3OxJ3bFcfWLyAisUxufAA==",
                            "environment": "XVYQZVyCoFOr1TDeyXuMgg==",
                            "index": "accsS0dbn/3rafcbT9NJGw==1"
                        },
                        "matches": [{
                            "extractedPart": "Reports",
                            "extractedBegin": 1360,
                            "extractedEnd": 1367,
                            "originalPart": "Reports",
                            "originalBegin": 33173,
                            "originalEnd": 33180,
                        }, {
                            "extractedPart": "length",
                            "extractedBegin": 1749,
                            "extractedEnd": 1755,
                            "originalPart": "length",
                            "originalBegin": 33562,
                            "originalEnd": 33568,
                        }]
                    },
                    "suggestions": [],
                    "issueLocations": [],
                    "readOnly": false,
                    "debug": {
                        "penalty": 1234.0967741949999
                    },
                    "subIssues": [{
                        "goalId": "CLARITY",
                        "guidelineId": "EN92712627329",
                        "internalName": "phenomenon_embedded_or_complex_sentence",
                        "displayNameHtml": "Try to split up this sentence.",
                        "guidanceHtml": "<p>This sentence doesn't seem to flow smoothly. We found a few embedded phrases in there that could be messing with your flow somehow.</p>",
                        "canAddToDictionary": false,
                        "issueType": "actionable",
                        "displaySurface": "Reports ... length",
                        "positionalInformation": {
                            "hashes": {
                                "issue": "7s1nqUN96X+P6VY4FlfSQQ==",
                                "environment": "XVYQZVyCoFOr1TDeyXuMgg==",
                                "index": "++0c1Z/OQu1Mwzt0KpkYYA==1"
                            },
                            "matches": [{
                                "extractedPart": "Reports",
                                "extractedBegin": 1360,
                                "extractedEnd": 1367,
                                "originalPart": "Reports",
                                "originalBegin": 33173,
                                "originalEnd": 33180,
                            }, {
                                "extractedPart": "length",
                                "extractedBegin": 1749,
                                "extractedEnd": 1755,
                                "originalPart": "length",
                                "originalBegin": 33562,
                                "originalEnd": 33568,
                            }]
                        },
                        "suggestions": [],
                        "issueLocations": [],
                        "readOnly": false,
                        "debug": {
                            "penalty": 320.0
                        }
                    }, {
                        "goalId": "CLARITY",
                        "guidelineId": "EN12771268128",
                        "internalName": "phenomenon_passive",
                        "displayNameHtml": "The active voice is usually clearer.",
                        "guidanceHtml": "<p>This one could do with a bit of pep. It's probably because it feels kind of passive. We love it when you're assertive.</p>",
                        "canAddToDictionary": false,
                        "issueType": "actionable",
                        "displaySurface": "was first seen",
                        "positionalInformation": {
                            "hashes": {
                                "flag": "dg+ih1XodWeL7lJ/wo17QQ==",
                                "environment": "XVYQZVyCoFOr1TDeyXuMgg==",
                                "index": "fOJLASZHiwnwcJWcfbkXnw==1"
                            },
                            "matches": [{
                                "extractedPart": "was",
                                "extractedBegin": 1406,
                                "extractedEnd": 1409,
                                "originalPart": "was",
                                "originalBegin": 33219,
                                "originalEnd": 33222
                            }, {
                                "extractedPart": "first",
                                "extractedBegin": 1410,
                                "extractedEnd": 1415,
                                "originalPart": "first",
                                "originalBegin": 33223,
                                "originalEnd": 33228
                            }, {
                                "extractedPart": "seen",
                                "extractedBegin": 1416,
                                "extractedEnd": 1420,
                                "originalPart": "seen",
                                "originalBegin": 33229,
                                "originalEnd": 33233
                            }]
                        },
                        "suggestions": [],
                        "issueLocations": [],
                        "readOnly": false,
                        "debug": {
                            "penalty": 40.0
                        }
                    }]
                },
                {
                    "goalId": "CLARITY",
                    "guidelineId": "EN85291241038",
                    "internalName": "guideline_FleschReadingEaseAsGuideline",
                    "displayNameHtml": "<span><b>Flesch Reading Ease: 47</b><br>Flesch Reading Ease is a classic readability metric.</span>",
                    "guidanceHtml": "",
                    "canAddToDictionary": false,
                    "issueType": "analytical",
                    "displaySurface": "I",
                    "issueType": "analytical",
                    "positionalInformation": {
                        "hashes": {
                            "issue": "l5wwcDu9O3IhYnnnlx6m/2e+IMTnPtkA6T3YoeqABMo=",
                            "environment": "lw/i85HTXLCY6KMk/8eOPc1vt5qB79eoy3RG1AEeQMI=",
                            "index": "9PAShJ4SjFdW4YoLGfp1WFzdUnXe9ZCP2rUI30VscFE==1"
                        },
                        "matches": [
                            {
                                "extractedPart": "I",
                                "extractedBegin": 0,
                                "extractedEnd": 1,
                                "originalPart": "I",
                                "originalBegin": 1542,
                                "originalEnd": 1543
                            }
                        ]
                    },
                    "readOnly": false,
                    "issueLocations": [],
                    "suggestions": [],
                    "subIssues": [],
                    "links": {
                        "help": "https://tenant.acrolinx.cloud/htmldata/en/rules/help/voice.FleschReadingEaseAsGuideline.html"
                    }
                }
            ],
            "keywords": {
                "links":{
                    "getTargetKeywords": "https://tenant.acrolinx.cloud/services/v1/rest/findability/targetKeywords?contextId=C%3A%5CUsers%5Cgrabowski%5CDesktop%5Ccloud-linguistic-smoketest.docx",
                    "putTargetKeywords": "https://tenant.acrolinx.cloud/services/v1/rest/findability/targetKeywords?contextId=C%3A%5CUsers%5Cgrabowski%5CDesktop%5Ccloud-linguistic-smoketest.docx"
                },
                "discovered": [{
                    "keyword": "Clarity card",
                    "sortKey": "10",
                    "density": 0.2546269436736127,
                    "count": 4,
                    "prominence": 0.0,
                    "occurrences": [{
                        "matches": [
                        // ...
                        ]
                    }],
                    "warnings": []
                }],
                "target": []
            },
            "embed":[{ // While the below keys represent the current implementation, they can change without notice
                "key": "timeStarted",
                "value": "2018-11-23T07:29:10.979Z[UTC]"
            },{
                "key": "score",
                "value": "84"
            },{
                "key": "status",
                "value": "green"
            },{
                "key": "scorecardUrl",
                "value": "https://tenant.acrolinx.cloud/services/output/en/oi5ilqippevjh2cdyn3hyldiwa_report.html"
            }],
            // DRAFT ------START------
            "addonInfo": [
                {
                    "id": "mightyAddon",
                    "title": "Mighy Addon by Cool Corp.",
                    "iconClass": "search-icon",
                    "iconUrl": "...",
                    "url": "https://mighy.cool.com/addon?fancyId=12345"
                }
            ],
            // DRAFT -------END-------
            "reports": {
                "scorecard": {
                    "displayName":"Score Card",
                    "link": "https://tenant.acrolinx.cloud/output/en/abcdef_1_report.html",
                    "linkAuthenticated": "https://tenant.acrolinx.cloud/output/en/abcdef_1_report.html?apikey=hfhfzhfhrz"
                },
                "termharvesting": {
                    "displayName": "Term Harvesting",
                    "link": "https://tenant.acrolinx.cloud/output/en/termharvesting_1.xml",
                    "linkAuthenticated": "https://tenant.acrolinx.cloud/output/en//termharvesting_1.xml?apikey=tfhzzhfhrz"
                },
                // only if a batch Id was given in the initial request
                "contentAnalysisDashboard": {
                    "displayName": "Content Analysis Dashboard",
                    "link": "https://tenant.acrolinx.cloud/batch/dccerthjj",
                }
            },
            "dictionaryScopes": ["language", "guidanceProfile", "document"]
          },
          "links": {
          }
        }

+ Response 400 (application/json)

        {
          "error": {
            "message": "Custom field values are missing",
            "type": "custom_fields_incorrect",
            "title": "Custom field values are incomplete.",
            "documentId": "3487ahgfh5fg-fg3",
            "validationDetails": [
                {
                    "title": "Custom field is required.",
                    "constraint": "Custom field \"Field\" must not be empty.",
                    "attributePath": "document.customFields.Field",
                    "detail": "Cannot set custom field \"Field\" as it is required and its value is empty.",
                    "invalidValue": null,
                    "possibleValues": ["Correct Value 1","Correct Value 2"],
                    "type": "Required"
                }
            ],
            "status": 400
          },
          "links": {
          }
        }

+ Response 400 (application/json)

        // if any of the given custom fields is invalid, a detailed error information is given.
        {
          "error": {
            "detail": "The value for document custom field \"Field\" cannot be \"Wrong Value\".",
            "type": "custom_fields_incorrect",
            "title": "Custom field values are incorrect",
            "documentId": "3487ahgfh5fg-fg3",
            "validationDetails": [
                {
                    "title": "Custom field of invalid value.",
                    "constraint": "Custom field \"Field\" must not be \"Wrong Value\".",
                    "attributePath": "document.customFields.Field",
                    "detail": "Cannot set custom field \"Field\" as it is required and its value is empty.",
                    "invalidValue": "Wrong Value",
                    "possibleValues": ["Correct Value 1","Correct Value 2"],
                    "type": "InvalidValue" // InvalidValue, InvalidField, Required, Readonly, Inconsistent
                }
            ],
            "status": 400
          }
        }




### Cancel Check [DELETE]

        Cancels a check. Users can only cancel checks they submitted. The URL for the request is found in the submitted check's "cancel" link.

+ Parameters
    + id: `AB-153` (required, string) - the check id

+ Request

    + Headers

            X-Acrolinx-Auth: your_access_token
            X-Acrolinx-Client: your_client_signature

+ Response 200 (application/json)

        {
          "data": {
            "id": "153"
          }
        }


## Get Link to Content Analysis Dashboard [GET /api/v1/checking/{batchId}/contentanalysis]

Returns the links to the human readable Content Analytics Dashboard, which aggregates information of all checks belonging to the given batch id. Requires the Reporting.read privilege. The link with API token contains a new privilege token with the right Reporting.read.

+ Parameters
    + batchId: `XYZ-10-22-33` (required, string) - the batch check id

+ Request

    + Headers

            X-Acrolinx-Auth: your_access_token
            X-Acrolinx-Client: your_client_signature


+ Response 200 (application/json)

        {
            "links": {},
            "data": {
                "links": [
                    {
                        "linkType": "withoutAccessToken",
                        "link": "https://tenant.acrolinx.cloud/analytics/dashboard/app/entry/run.jsp?jrd_resext=%7Bactive%3A0%2Creslst%3A%5B%7Bname%3A%22%2FAcrolinxReports%2Fstandard%2FContent+Analysis.dsh%22%2C%22param_page%22%3Afalse%2Cver%3A-1%2C%22dsh_params%22%3A%5B%7B%22jrd_params%22%3A%7B%22BatchId%22%3A%22_nice_batch_id_88-xyz%22%2C%22CsBaseUrl%22%3A%22http%3A%2F%2Flocalhost%3A8031%22%2C%22CsOutputPath%22%3A%22%2Foutput%22%7D%7D%5D%7D%5D%7D&jrd_userinfo=%7B%22prefer%22%3A%7B%22rpt_lang%22%3A%22en%22%2C%22enableNLS%22%3Atrue%7D%7D&jrs.language=en"
                    },
                    {
                        "linkType": "withAccessToken",
                        "link": "https://tenant.acrolinx.cloud/analytics/dashboard/app/entry/run.jsp?jrd_resext=%7Bactive%3A0%2Creslst%3A%5B%7Bname%3A%22%2FAcrolinxReports%2Fstandard%2FContent+Analysis.dsh%22%2C%22param_page%22%3Afalse%2Cver%3A-1%2C%22dsh_params%22%3A%5B%7B%22jrd_params%22%3A%7B%22BatchId%22%3A%22_nice_batch_id_88-xyz%22%2C%22CsBaseUrl%22%3A%22http%3A%2F%2Flocalhost%3A8031%22%2C%22CsOutputPath%22%3A%22%2Foutput%22%7D%7D%5D%7D%5D%7D&jrd_userinfo=%7B%22prefer%22%3A%7B%22rpt_lang%22%3A%22en%22%2C%22enableNLS%22%3Atrue%7D%7D&jrs.language=en&apikey=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG11ZCI6ImFjcm9saW54OjA4MTEwYThjNzI3MjQzYTMiLCJuYmYiOjE1MDM5MjcyMzksImlzcyI6ImFjcm9saW54OjA4MTEwYThjNzI3MjQzYTM6NWQyNTQ2NWI5ZTA3NDNiZiIsImV4cCINjYwNTYzOSwidG9rZW5UeXBlIjoidXNlciIsImlhdCI6MTUwNDAxMzYzOSwianRpIjoiMmFmOTQzOWIzZDgyNzMwODAEyMGRiZmRlMmYifQ.Lj0chsnnRTX7IevJNyWMMlCviA6ecYAQ0kacy5EGQz0"
                    },
                    {
                        "linkType": "shortWithAccessToken",
                        "link": "http://localhost:8031/api/batch/123?apikey=eyJ0eXAiOiJKV1QiLCOiJhY3JvbGlueCIsInByaXZpbGVnZXMiOlsiQ2hlY2tpbmdBbmRDbGllbnRzLmRvd25sb2FkUmVwb3J0cyJdLCJuYmYiOjE1Mzc5NTQzMjksImlzcyI6ImFjcm9saW54OjA4MTEwYThjNzI3MjQzYTMiLCJleHAiOjE1MzgxMjcxMjksInRva2VuVHlwZSI6InByaXZpbGVnZXMiLCJpYXQi3MjksImp0aSI6IlZRTVNFUzc0SlRCR0JFVFMyWTVBRjJBU1RNIn0.ltac_6JK0s_uODrqrK3TkaUsZiXfrkamo&X-Acrolinx-Client-Locale=en"
                    },
                    {
                        "linkType": "shortWithoutAccessToken",
                        "link": "http://localhost:8031/api/batch/123?X-Acrolinx-Client-Locale=en"
                    }
                ]
            }
        }

# Group User API

**Available since Core Platform version 2018.10**

In the User API, Acrolinx defines a user as an entity that has an id, a username, a fullName, and custom properties (set by the client).

You're _required_ to provide user information for the following:
* Interactive integrations: When you sign in to the Acrolinx Sidebar, you need to enter your user information. This creates an access token for the signed-in user.
* Embedded integrations (API key-based): When you sign in to the Acrolinx Dashboard, you need to enter customer user information. This lets you generate an API token for the user that’s signed in.

Security:
* A user can read and update its own data.
* Only privileged users (admin, for example) can read or update other users' data.

**Note:** Before you get started with the User API, be sure to review the [authentication and authorization](https://acrolinxapi.docs.apiary.io/#introduction/authentication-and-authorization) requirements. 

## User Resource [/api/v1/user]

### Get All Users [GET /api/v1/user{?sort,page,per_page,username,fullName,roles}]

**Added in Core Platform version 2021.05**

**Note:** The table below shows the specific API request parameters by Core Platform version.

| API Request                                                 | Core Platform Version |
|:------------------------------------------------------------|-----------------------|
| `[GET /api/v1/user{?sort}]`                                 | `2021.06`             |
| `[GET /api/v1/user{?page,per_page}]`                        | `2021.08`             |
| `[GET /api/v1/user{?sort=customFields.{customFieldName}}]`  | `2021.12`             |
| `[GET /api/v1/user{?username,fullName}]`                    | `2022.02`             |
| `[GET /api/v1/user{?roles}]`                                | `2022.02`             |
| `[GET /api/v1/user{?excludeProperties={true|false}}]`       | `2023.10`             |
| `[GET /api/v1/user{?includeCustomField={key}}]`             | `2023.10`             |
| `[GET /api/v1/user{?excludeCustomFields={true|false}}]`     | `2024.02`             |

This request retrieves a list of all users in the order that they were added.

**Searching/Filtering**

- You can use the `username` and `fullName` parameters to search or filter users.
- The `username` and `fullName` query parameters are limited to 255 characters, are optional, and can't be `null`.
- If the `username` and `fullName` parameters are set, the API will list users that match both parameters.
- You can use the `roles` parameter to filter users by multiple role ids.
- Invalid role ids will return an empty list.

**Sorting**

If you use the `sort` query parameter, you can only sort the list of users by 1 field.
To display the list in ascending or descending order respectively, you can add a `+` or `-`.

**Sorting Notes:**

- You can only sort by 1 field.
- A query parameter can be any length and can include the order direction prefixes "+" and "-".
- A query parameter can't be empty or include blank spaces.
- A query parameter can accept a mix of characters.
- By default, the list appears in ascending order.
- The list is also sorted by `username` unless this is already the primary sort column.
- Other sort columns include: `fullName`, `createdOn`, `lastIntegrationAccess`, `checkingFrequency`, `licenseType`, `licenseStatus`, and `customFields.{key}`.
- The query parameter `licenseType` sorts by two fields: `licenseType` and `licenseStatus`.
- To sort by a custom field, the sort value needs to include `customFields`, `.`, and the `{key}`. The key is the name of the custom field.

When you sort by `customFields` in ascending order, empty `customFields` values will appear at the beginning of the list. If you sort
in descending order, empty values will appear at the end of the list.

To make sure that the sorting behavior for custom fields is consistent, the following special characters can be sorted: `` !@$^*()_+-=,./;'[]<>?:|~` ``
If you use any additional special characters, the sorting behavior may be inconsistent.

So that the `+` character encoded to `%2B` stays valid, the query parameters need to be encoded in accordance
with [encodeURIComponent](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent). 
You can always leave out the `+` character, because the user list appears in ascending order by default. 

**Pagination**

For a better overview, you might like to view the list of users in pages instead of in one long list.
To request a paginated response, add the query parameters `page` and `per_page`. 
You'll need to set the `page` parameter. The page count always starts at `1`.
By default, `per_page` is set to `10`. You can display as many as 500 users per page. This is an optional parameter. 

If you request a paginated response, Acrolinx will add the following header values:

| Header                     | Description                                     |
|----------------------------|-------------------------------------------------|
| `X-Acrolinx-Page`          | The index of the current page, starting at `1`. |
| `X-Acrolinx-Next-Page`     | The index of the next page.                     |
| `X-Acrolinx-Previous-Page` | The index of the previous page.                 |
| `X-Acrolinx-Total-Pages`   | The total number of pages.                      |
| `X-Acrolinx-Total`         | The total number of items.                      |

In addition to the header values, the response object contains a few URLs
within the `links` object:

| Relation | Description                       |
|----------|-----------------------------------|
| `next`   | The URL to get the next page.     |
| `prev`   | The URL to get the previous page. |
| `first`  | The URL to get the first page.    |
| `last`   | The URL to get the last page.     |

If there aren't any next or previous pages, you won't see the `next` and `prev` links.
For example, when you view page 1, you won't see a `prev` link because there's no page 0. 
This is also the case for the values in the headers.

**Note:** When you switch to the next or previous page, you'll see the current paginated view at the time of the API call. 
This will also reflect any changes to the underlying data source. Say you're on page 2 of 10 with 10 records per page. 
You then decide to delete 10 users before you call the API to fetch page 3. Now when you switch to page 3, the response will show page 3 of 9.

The example response includes the pagination URLs and query parameters in the `links` object so you know what to expect. 

**Dynamically include/exclude nested data**

If you manage a large number of users, you can use the query params `includeCustomField` and `excludeProperties` to filter nested data.

By default, all custom fields are nested in the user model.
You can use the parameter `includeCustomField` to limit the returned fields to those that match the key passed in the param value.
This is helpful if you want to fetch a specific set of custom fields to reduce data transfer.
To include more than one custom field, add `&includeCustomField={Key}` to the request N times.
To exclude all custom fields, you can use the parameter `&excludeCustomFields=true`. This takes priority over any
`includeCustomField` parameters that are present, and will always result in no custom fields being returned.

+ Parameters

    + username (string, optional) - Optional query parameter for searching by username.
    + fullName (string, optional) - Optional query parameter for searching by full name.
    + sort (enum[string], optional) - Optional query parameter for sorting by an attribute. 
            
        + Prefix the field with:
            + **"+"** for ascending order, or
            + **"-"** for descending order. 
        + **Note:** 
            + Omitting a prefix will sort in ascending order.
            + Use `customFields.{key}` to sort by custom fields, `{key}` is the name of the custom field

        + Default: username
        + Members
            + `username`
            + `fullName`
            + `createdOn`
            + `lastIntegrationAccess`
            + `checkingFrequency`
            + `licenseType`
            + `licenseStatus`
            + `customFields.{key}`

    + page (number, optional) - Optional query parameter for pagination
    + per_page (number, optional) - Optional query parameter for sizing a page
        + Default: `10`

+ Request Get a list of all users (application/json)

    + Headers

            X-Acrolinx-Auth: your_access_token

+ Response 200 (application/json)

    + Attributes (object)
        + links (Pagination)
        + data (array[User])
    
    + Body

            {
                "links": {
                    "prev": "https://tenant.acrolinx.cloud/api/v1/user?page=2&per_page=2&sort=username&fullName=Fred Freelancer&username=fred",
                    "next": "https://tenant.acrolinx.cloud/api/v1/user?page=4&per_page=2&sort=username&fullName=Fred Freelancer&username=fred",
                    "first": "https://tenant.acrolinx.cloud/api/v1/user?page=1&per_page=2&sort=username&fullName=Fred Freelancer&username=fred",
                    "last": "https://tenant.acrolinx.cloud/api/v1/user?page=60&per_page=2&sort=username&fullName=Fred Freelancer&username=fred"
                },
                "data": [
                    {
                        "id": "eb323701-839f-4998-b56e-3e20c70259c5",
                        "username": "fred",
                        "fullName": "Fred Freelancer",
                        "createdOn": "2021-04-15T15:00:26.495Z",
                        "lastIntegrationAccess": "1970-01-01T00:00:00Z",
                        "licenseType": "named",
                        "licenseStatus": "inactive",
                        "activeTokenId": "",
                        "checkingFrequency": "infrequent",
                        "properties" : {
                            "customkey": "customvalue",
                        },
                        "roles": [
                            {
                                "id": "d66d4d00-3381-11e0-bc8e-0800200c9a66",
                                "name": "Term Contributor"
                            },
                            {
                                "id": "6a0ebe93-f735-4b08-b6f2-66f7ecc70190",
                                "name": "Term Browser Administrator"
                            }
                        ],
                        "idpUser": true,
                        "staffUser": true,
                        "rolesSetByIdp": false,
                        "customFields": [
                            {
                                "key": "Department",
                                "displayName": "Department",
                                "inputType": "optional",
                                "type": "list",
                                "value": "Example Department",
                                "possibleValues": [
                                    "Example Department"
                                ]
                            }
                        ]
                    },
                    {
                        "id": "fd3eaa89-a6b7-463a-ba12-b7ded410bda0",
                        "username": "franz",
                        "fullName": "Franz Hubendobler",
                        "createdOn": "2021-02-23T17:24:01.131Z",
                        "lastIntegrationAccess": "1970-01-01T00:00:00Z",
                        "licenseType": "builtin",
                        "licenseStatus": "active",
                        "activeTokenId": "uqlyxi3cdxrdqn7bzwdfffyvzr",
                        "checkingFrequency": "infrequent",
                        "properties" : {
                            "customkey": "customvalue",
                        },
                        "roles": [
                            {
                                "id": "898a7c32-2c39-4cde-becb-16f22243e9b8",
                                "name": "Analytics Read-Only User"
                            }
                        ],
                        "idpUser": true,
                        "staffUser": true,
                        "rolesSetByIdp": false,
                        "customFields": [
                            {
                                "key": "Department",
                                "displayName": "Department",
                                "inputType": "optional",
                                "type": "list",
                                "value": "Example Department",
                                "possibleValues": [
                                    "Example Department"
                                ]
                            }
                        ]
                    }
                ]
            }

+ Request Get a list of all users sorted by license type in ascending order (application/json)

    + Headers

            X-Acrolinx-Auth: your_access_token

+ Response 200 (application/json)

    + Attributes (object)
        + links (Pagination)
        + data (array[User])

    + Body

            {
                "links": {},
                "data": [
                    {
                        "id": "5894f2bb-5b34-4874-bc40-ec64e9a4ca63",
                        "username": "analyticsReadOnlyUser",
                        "fullName": "",
                        "createdOn": "2021-10-07T08:40:53.646Z",
                        "activeTokenId": "",
                        "lastIntegrationAccess": "1970-01-01T00:00:00Z",
                        "licenseType": "builtin",
                        "licenseStatus": "active",
                        "checkingFrequency": "infrequent",
                        "roles": [
                            {
                                "id": "898a7c32-2c39-4cde-becb-16f22243e9b8",
                                "name": "Analytics Read-Only User",
                                "default": false
                            }
                        ],
                        "idpUser": true,
                        "staffUser": true,
                        "rolesSetByIdp": false,
                        "properties": {
                            "Segmentation.xml.DTDs": ""
                        },
                        "customFields": [
                            {
                                "key": "Department",
                                "displayName": "Department",
                                "inputType": "optional",
                                "type": "list",
                                "value": "Example Department",
                                "possibleValues": [
                                    "Example Department"
                                ]
                            }
                        ]
                    },
                    {
                        "id": "c85030fd-2e03-4c69-9946-0b4f5689522c",
                        "username": "termcontribution",
                        "fullName": "",
                        "createdOn": "2021-10-07T08:40:53.642Z",
                        "activeTokenId": "",
                        "lastIntegrationAccess": "1970-01-01T00:00:00Z",
                        "licenseType": "builtin",
                        "licenseStatus": "inactive",
                        "checkingFrequency": "infrequent",
                        "roles": [
                            {
                                "id": "d66d4d00-3381-11e0-bc8e-0800200c9a66",
                                "name": "Term Contributor",
                                "default": false
                            }
                        ],
                        "idpUser": true,
                        "staffUser": true,
                        "rolesSetByIdp": false,
                        "properties": {
                            "Segmentation.xml.DTDs": ""
                        },
                        "customFields": [
                            {
                                "key": "Department",
                                "displayName": "Department",
                                "inputType": "optional",
                                "type": "list",
                                "value": "Example Department",
                                "possibleValues": [
                                    "Example Department"
                                ]
                            }
                        ]
                    },
                    {
                        "id": "bb284474-e107-413e-9c15-d813ed7209e9",
                        "username": "fred",
                        "fullName": "Fred Freelancer",
                        "createdOn": "2021-10-21T11:52:36.912Z",
                        "activeTokenId": "touxmkywwmu5vk6nyqto2m75x6",
                        "lastIntegrationAccess": "1970-01-01T00:00:00Z",
                        "licenseType": "named",
                        "licenseStatus": "active",
                        "checkingFrequency": "infrequent",
                        "roles": [
                            {
                                "id": "8c66c4e2-174a-4f77-b8d4-71bfa9ca4d2e",
                                "name": "Author",
                                "default": false
                            },
                            {
                                "id": "bc5c91f3-fae1-49f7-8d60-d325077c6ef9",
                                "name": "Super Administrator",
                                "default": false
                            }
                        ],
                        "idpUser": true,
                        "staffUser": true,
                        "rolesSetByIdp": false,
                        "properties": {
                            "Segmentation.xml.DTDs": ""
                        },
                        "customFields": [
                            {
                                "key": "Department",
                                "displayName": "Department",
                                "inputType": "optional",
                                "type": "list",
                                "value": "C",
                                "possibleValues": [
                                    "Example Department"
                                ]
                            }
                        ]
                    },
                    {
                        "id": "0593c6b4-99d9-4d43-886b-f67cb66df7ed",
                        "username": "franz",
                        "fullName": "Franz Hubendobler",
                        "createdOn": "2021-11-01T07:31:18.365Z",
                        "activeTokenId": "",
                        "lastIntegrationAccess": "1970-01-01T00:00:00Z",
                        "licenseType": "named",
                        "licenseStatus": "inactive",
                        "checkingFrequency": "infrequent",
                        "roles": [
                            {
                                "id": "8c66c4e2-174a-4f77-b8d4-71bfa9ca4d2e",
                                "name": "Author",
                                "default": false
                            }
                        ],
                        "idpUser": true,
                        "staffUser": true,
                        "rolesSetByIdp": false,
                        "properties": {
                            "Segmentation.xml.DTDs": ""
                        },
                        "customFields": [
                            {
                                "key": "Department",
                                "displayName": "Department",
                                "inputType": "optional",
                                "type": "list",
                                "value": "B",
                                "possibleValues": [
                                    "Example Department"
                                ]
                            }
                        ]
                    }
                ]
            }

+ Response 400 (application/json)

        // when the sort query parameter uses an invalid field name
        {
            "links": {},
            "error": {
                "reference": "b4c323ab-413b-4bf5-be60-93e13c3aad93",
                "detail": "Check the request for invalid values or missing parameters.",
                "type": "validation",
                "title": "Couldn't parse 'sort' query parameter",
                "validationDetails": [
                    {
                        "title": "Validation error",
                        "detail": "sort param must not be null",
                        "invalidValue": "null"
                    }
                ],
                "status": 400
            }
        }

+ Response 400 (application/json)

        // when the field name is omitted in the sort query parameter
        {
            "links": {},
            "error": {
                "reference": "b4c323ab-413b-4bf5-be60-93e13c3aad93",
                "detail": "Check the request for invalid values or missing parameters.",
                "type": "validation",
                "title": "Invalid request attributes",
                "validationDetails": [
                    {
                        "title": "Validation error",
                        "constraint": "Pattern",
                        "detail": "must match \"[+-]?.+\"",
                        "invalidValue": "+"
                    }
                ],
                "status": 400
            }
        }

+ Response 400 (application/json)

        // when the per_page parameter exceeds the 500 per page limit
        {
            "links": {},
            "error": {
                "reference": "196f8b88-493c-46d7-b7bc-5da32d0a58d7",
                "detail": "Check the request for invalid values or missing parameters.",
                "type": "validation",
                "title": "Invalid request attributes",
                "validationDetails": [
                {
                    "title": "Validation error",
                    "constraint": "Range",
                    "detail": "must be between 1 and 500",
                    "invalidValue": "900"
                }
                ],
                "status": 400
            }
        }

+ Response 400 (application/json)

        // when the page parameter has an invalid value such as 0 or negative number
        {
            "links": {},
            "error": {
                "reference": "b2045b7f-1dce-49e7-880a-93874f427554",
                "detail": "Invalid page request attribute, it must be greater than zero",
                "type": "client",
                "title": "Bad Request",
                "status": 400
            }
        }

+ Response 400 (application/json)

        // when the custom field name cannot be found
        {
            "links": {},
            "error": {
                "reference": "1095ac3c-4418-467d-930e-d517b8e34beb",
                "detail": "Telephone is not a valid user custom sortable field",
                "type": "client",
                "title": "Bad Request",
                "status": 400
            }
        }

+ Response 400 (application/json)

        // when the custom field name is null or empty
        {
            "links": {},
            "error": {
                "reference": "1095ac3c-4418-467d-930e-d517b8e34beb",
                "detail": "customFields cannot be null or empty.",
                "type": "client",
                "title": "Bad Request",
                "status": 400
            }
        }

+ Response 401 (application/json)

        // when the access token in the request is missing or invalid
        {
            "links": {},
            "error": {
                "detail": "Valid authentication has either not been provided or is insufficient.",
                "type": "auth",
                "title": "Invalid authentication",
                "status": 401
            }
        }

+ Response 404 (application/json)

        // when the page parameter has a non-numeric value, which is invalid
        {
            "links": {},
            "error": {
                "reference": "f1926760-f2e7-4af7-a3a6-f274bcb9a00f",
                "detail": "An unspecific client error occurred.",
                "type": "client",
                "title": "Not Found",
                "status": 404
            }
        }

### Get a User [GET /api/v1/user/{id}]

This request returns information about an user. 
The information includes the user id, username, the user's full name, the date the user was created, the last time the user accessed the integration, checking frequency, tenant ID, token ID, license type, and license status.
You'll also see properties, roles, and custom fields.

+ Parameters

    + id: `eb323701-839f-4998-b56e-3e20c70259c5` (required, string) - UUID of the user, unique identifier

+ Request Get specified user by id (application/json)

    + Headers

            X-Acrolinx-Auth: your_access_token

+ Response 200 (application/json)

    + Attributes (object)
        + links (object)
        + data (User)
    
    + Body

            {
                "links": {},
                "data": {
                    "id": "eb323701-839f-4998-b56e-3e20c70259c5",
                    "username": "fred",
                    "fullName": "Fred Freelancer",
                    "createdOn": "2021-04-15T15:00:26.495Z",
                    "lastIntegrationAccess": "1970-01-01T00:00:00Z",
                    "licenseType": "named",
                    "licenseStatus": "inactive",
                    "activeTokenId": "uqlyxi3cdxrdqn7bzwdfffyvzr",
                    "checkingFrequency": "infrequent",
                    "properties" : {
                        "customkey": "customvalue",
                    },
                    "roles": [
                        {
                            "id": "d66d4d00-3381-11e0-bc8e-0800200c9a66",
                            "name": "Term Contributor"
                        },
                        {
                            "id": "6a0ebe93-f735-4b08-b6f2-66f7ecc70190",
                            "name": "Term Browser Administrator"
                        }
                    ],
                    "idpUser": true,
                    "staffUser": true,
                    "rolesSetByIdp": false,
                    "customFields": [
                        {
                            "key": "Department",
                            "displayName": "Department",
                            "inputType": "optional",
                            "type": "list",
                            "value": "Example Department",
                            "possibleValues": [
                                "Example Department"
                            ]
                        }
                    ]
                }
            }

+ Response 401 (application/json)

        // when the access token in the request is missing or invalid
        {
            "error": {
                "detail": "Valid authentication has either not been provided or is insufficient.",
                "type": "auth",
                "title": "Invalid authentication",
                "status": 401
            }
        }

+ Response 403 (application/json)

        // when you don't have the privilege to fetch users
        {
        "links": {},
            "error": {
                "detail": "The user does not have the required privileges to perform the operation.",
                "type": "insufficientPrivileges",
                "title": "Insufficient privileges",
                "status": 403
            }
        }

+ Response 404 (application/json)

        // when the user couldn't be identified by its *id* in the database
        {
        "links": {},
            "error": {
                "reference": "652b5c86-de20-4629-9df6-84265f2722ec",
                "detail": "An unspecific client error occurred.",
                "type": "client",
                "title": "Not Found",
                "status": 404
            }
        }


### Get a User (Self) [GET /api/v1/user/self]

**Added in Core Platform version 2018.12**

This is an alternative way of getting information about the current (in request authorized) user. 

+ Request Get current user (application/json)

    + Headers

            X-Acrolinx-Auth: your_access_token

+ Response 200 (application/json)

    + Attributes (object)
        + links (object)
        + data (User)
    
    + Body

            {
                "links": {},
                "data": {
                    "id": "eb323701-839f-4998-b56e-3e20c70259c5",
                    "username": "fred",
                    "fullName": "Fred Freelancer",
                    "createdOn": "2021-04-15T15:00:26.495Z",
                    "lastIntegrationAccess": "1970-01-01T00:00:00Z",
                    "licenseType": "named",
                    "licenseStatus": "inactive",
                    "activeTokenId": "uqlyxi3cdxrdqn7bzwdfffyvzr",
                    "checkingFrequency": "infrequent",
                    "properties" : {
                        "customkey": "customvalue",
                    },
                    "roles": [
                        {
                            "id": "d66d4d00-3381-11e0-bc8e-0800200c9a66",
                            "name": "Term Contributor"
                        },
                        {
                            "id": "6a0ebe93-f735-4b08-b6f2-66f7ecc70190",
                            "name": "Term Browser Administrator"
                        }
                    ],
                    "idpUser": true,
                    "staffUser": true,
                    "rolesSetByIdp": false,
                    "customFields": [
                        {
                            "key": "Department",
                            "displayName": "Department",
                            "inputType": "optional",
                            "type": "list",
                            "value": "Example Department",
                            "possibleValues": [
                                "Example Department"
                            ]
                        }
                    ]
                }
            }

+ Response 401 (application/json)

        // when the access token in the request is missing or invalid
        {
            "error": {
                "detail": "Valid authentication has either not been provided or is insufficient.",
                "type": "auth",
                "title": "Invalid authentication",
                "status": 401
            }
        }

+ Response 404 (application/json)

        // when the user couldn't be identified by its *id* in the database
        {
        "links": {},
            "error": {
                "reference": "652b5c86-de20-4629-9df6-84265f2722ec",
                "detail": "An unspecific client error occurred.",
                "type": "client",
                "title": "Not Found",
                "status": 404
            }
        }

### Create a User [POST /api/v1/user]

**Added in Core Platform version 2021.05**

**Note:**

- The username needs to be unique and is limited to 255 characters.
- The `fullName` field is limited to 255 characters (optional).
- The license type can either be "named" or "concurrent" (optional).
- You need `UserAndRoles.editUser` privileges to perform this request.

**Password Requirements**

If you want to create a user, the password field is required as of Core Platform version 2022.02.
Your password needs to meet the following requirements:

- Composed of ASCII printable characters
- Needs to include at least 1 lower case letter
- Needs to include at least 1 upper case letter
- Needs to include at least 1 digit
- Needs to include at least 1 special character symbol
- At least 10 characters long
- No more than 64 characters long

For Core Platform versions 2021.05 to 2022.02, the following apply:

- Password is optional
- At least 1 character long
- No more than 128 characters

**Be extra careful in the following cases:** 
- There are no configured default roles. That means that no roles will be automatically assigned to new users.
- Federated authentication is enabled:
  - Users are created automatically with federated authentication.
  - Only users created by the identity provider can sign in to the Acrolinx Dashboard.
  - Users created through the API can only be used for automation purposes. For example, interactions with the Platform API.


+ Request Create a user (application/json)

     This will create a new user if you add a username, fullName, and password to the request. 

    **Note:** By default, Acrolinx will automatically assign the user the license type `named` and the role `Author`.

    + Headers

            X-Acrolinx-Auth: your_access_token

    + Attributes (CreateUser)
    
    + Body

            {
                "username": "fred",
                "fullName": "Fred Freelancer",
                "password": "P@ssW0rd12345!"
            }

+ Response 201 (application/json)

    + Attributes (object)
        + links (object)
        + data (User)
    
    + Body

            {
                "links": {},
                "data": {
                    "id": "eb323701-839f-4998-b56e-3e20c70259c5",
                    "username": "fred",
                    "fullName": "Fred Freelancer",
                    "createdOn": "2021-04-15T15:00:26.495Z",
                    "lastIntegrationAccess": "1970-01-01T00:00:00Z",
                    "licenseType": "named",
                    "licenseStatus": "inactive",
                    "activeTokenId": "",
                    "checkingFrequency": "infrequent",
                    "properties" : {
                        "customkey": "customvalue",
                    },
                    "roles": [
                        {
                            "id": "8c66c4e2-174a-4f77-b8d4-71bfa9ca4d2e",
                            "name": "Author"
                        }
                    ],
                    "idpUser": false,
                    "staffUser": false,
                    "rolesSetByIdp": false,
                    "customFields": [
                        {
                            "key": "Department",
                            "displayName": "Department",
                            "inputType": "optional",
                            "type": "list",
                            "value": "Example Department",
                            "possibleValues": [
                                "Example Department"
                            ]
                        }
                    ]
                }
            }

+ Response 400 (application/json)

        // when the request format is invalid 
        {
            "links": {},
            "error": {
                "detail": "Unexpected character ....",
                "type": "client",
                "title": "Could not parse request body.",
                "status": 400
            }
        }

+ Response 400 (application/json)

        // when the password doesn't meet the strictness requirements starting from v2021.05
        {
            "links": {},
            "error": {
                "reference": "30c5db1e-fabd-4815-890a-a55416e6c3be",
                "detail": "Check the request for invalid values or missing parameters.",
                "type": "validation",
                "title": "Invalid request attributes",
                "validationDetails": [
                    {
                        "title": "Validation error",
                        "constraint": "Size",
                        "attributePath": "password",
                        "detail": "size must be between 1 and 128",
                        "invalidValue": "simple"
                    }
                ],
                "status": 400
            }
        }

+ Response 400 (application/json)

        // when the password doesn't meet the strictness requirements starting from v2022.02
        {
            "links": {},
            "error": {
                "reference": "30c5db1e-fabd-4815-890a-a55416e6c3be",
                "detail": "Check the request for invalid values or missing parameters.",
                "type": "validation",
                "title": "Invalid request attributes",
                "validationDetails": [
                    {
                        "title": "Validation error",
                        "constraint": "Password must be composed of printable ASCII characters and contain at least 1 lower-case, 1 upper-case letter, 1 digit, one symbol and must be between 10 to 64 characters in length",
                        "attributePath": "password",
                        "detail": "Password must be composed of printable ASCII characters and contain at least 1 lower-case, 1 upper-case letter, 1 digit, one symbol and must be between 10 to 64 characters in length",
                        "invalidValue": "not a secure password"
                    }
                ],
                "status": 400
            }
        }

+ Response 400 (application/json)

        // when the password is omitted starting from v2022.02
        {
            "links": {},
            "error": {
                "reference": "30c5db1e-fabd-4815-890a-a55416e6c3be",
                "detail": "Check the request for invalid values or missing parameters.",
                "type": "validation",
                "title": "Invalid request attributes",
                "validationDetails": [
                    {
                        "title": "Validation error",
                        "constraint": "NotEmpty",
                        "attributePath": "password",
                        "detail": "must not be empty",
                        "invalidValue": ""
                    }
                ],
                "status": 400
            }
        }

+ Response 400 (application/json)

        // when the licenseType is invalid
        {
            "links": {},
            "error": {
                "reference": "f04a1a1e-0046-4b86-b9c3-da491d3343b5",
                "detail": "Check the request for invalid values or missing parameters.",
                "type": "validation",
                "title": "Invalid request attributes",
                "validationDetails": [
                    {
                        "title": "Deserialization error",
                        "constraint": "Must be one of [NAMED, CONCURRENT, BUILTIN].",
                        "attributePath": "licenseType",
                        "detail": "Cannot deserialize enum 'LicenseType' from value 'asd'. Possible values are [NAMED, CONCURRENT, BUILTIN].",
                        "invalidValue": "asd",
                        "possibleValues": [
                            "NAMED",
                            "CONCURRENT",
                            "BUILTIN"
                        ]
                    }
                ],
                "status": 400
            }
        }

+ Response 401 (application/json)

        // when the access token in the request is missing or invalid
        {
            "error": {
                "detail": "Valid authentication has either not been provided or is insufficient.",
                "type": "auth",
                "title": "Invalid authentication",
                "status": 401
            }
        }

+ Response 403 (application/json)

        // when you don't have the privilege to create users
        {
        "links": {},
            "error": {
                "detail": "The user does not have the required privileges to perform the operation.",
                "type": "insufficientPrivileges",
                "title": "Insufficient privileges",
                "status": 403
            }
        }

+ Response 409 (application/json)

        // when the user was created more than once
        {
        "links": {},
            "error": {
                "reference": "a159c153-e99b-4d49-9987-ca457670ef86",
                "detail": "Licensing error (Invalid user id (message ID #2): A user with the name 'fred' already exists. Please provide a different user name or spell the user name appropriately.)",
                "type": "client",
                "title": "Conflict",
                "status": 409
            }
        }

+ Response 500 (application/json)

        // when an unspecified error occurs
        {
            "links": {},
            "error": {
                "reference": "4f356c86-aac1-4cae-8d78-518aea6cebe0",
                "detail": "An unspecific server error occurred. Details may be found in the Acrolinx log files.",
                "type": "server",
                "title": "Unspecific server error",
                "status": 500
            }
        }


+ Request Create a user with specified license type (application/json)

    This request will create a new user with the `named` license type explicitly specified in the request model. 
    
    **Note:** Acrolinx will automatically assign the default role `Author` to the user.

    + Headers

            X-Acrolinx-Auth: your_access_token

    + Attributes (CreateUser)

    + Body

            {
                "username": "fred",
                "fullName": "Fred Freelancer",
                "password": "P@ssW0rd12345!",
                "licenseType": "named"
            }

+ Response 201 (application/json)

    + Attributes (object)
        + links (object)
        + data (User)
    
    + Body

            {
                "links": {},
                "data": {
                    "id": "eb323701-839f-4998-b56e-3e20c70259c5",
                    "username": "fred",
                    "fullName": "Fred Freelancer",
                    "createdOn": "2021-04-15T15:00:26.495Z",
                    "lastIntegrationAccess": "1970-01-01T00:00:00Z",
                    "licenseType": "named",
                    "licenseStatus": "inactive",
                    "activeTokenId": "",
                    "checkingFrequency": "infrequent",
                    "properties" : {
                        "customkey": "customvalue",
                    },
                    "roles": [
                        {
                            "id": "8c66c4e2-174a-4f77-b8d4-71bfa9ca4d2e",
                            "name": "Author"
                        }
                    ],
                    "idpUser": false,
                    "staffUser": false,
                    "rolesSetByIdp": false,
                    "customFields": [
                        {
                            "key": "Department",
                            "displayName": "Department",
                            "inputType": "optional",
                            "type": "list",
                            "value": "Example Department",
                            "possibleValues": [
                                "Example Department"
                            ]
                        }
                    ]
                }
            }

+ Response 400 (application/json)

        // when the request format is invalid 
        {
            "links": {},
            "error": {
                "detail": "Unexpected character ....",
                "type": "client",
                "title": "Could not parse request body.",
                "status": 400
            }
        }

+ Response 400 (application/json)

        // when the password doesn't meet the strictness requirements starting from v2021.05
        {
            "links": {},
            "error": {
                "reference": "30c5db1e-fabd-4815-890a-a55416e6c3be",
                "detail": "Check the request for invalid values or missing parameters.",
                "type": "validation",
                "title": "Invalid request attributes",
                "validationDetails": [
                    {
                        "title": "Validation error",
                        "constraint": "Size",
                        "attributePath": "password",
                        "detail": "size must be between 1 and 128",
                        "invalidValue": "simple"
                    }
                ],
                "status": 400
            }
        }

+ Response 400 (application/json)

        // when the password doesn't meet the strictness requirements starting from v2022.02
        {
            "links": {},
            "error": {
                "reference": "30c5db1e-fabd-4815-890a-a55416e6c3be",
                "detail": "Check the request for invalid values or missing parameters.",
                "type": "validation",
                "title": "Invalid request attributes",
                "validationDetails": [
                    {
                        "title": "Validation error",
                        "constraint": "Password must be composed of printable ASCII characters and contain at least 1 lower-case, 1 upper-case letter, 1 digit, one symbol and must be between 10 to 64 characters in length",
                        "attributePath": "password",
                        "detail": "Password must be composed of printable ASCII characters and contain at least 1 lower-case, 1 upper-case letter, 1 digit, one symbol and must be between 10 to 64 characters in length",
                        "invalidValue": "not a secure password"
                    }
                ],
                "status": 400
            }
        }

+ Response 400 (application/json)

        // when the password is omitted starting from v2022.02
        {
            "links": {},
            "error": {
                "reference": "30c5db1e-fabd-4815-890a-a55416e6c3be",
                "detail": "Check the request for invalid values or missing parameters.",
                "type": "validation",
                "title": "Invalid request attributes",
                "validationDetails": [
                    {
                        "title": "Validation error",
                        "constraint": "NotEmpty",
                        "attributePath": "password",
                        "detail": "must not be empty",
                        "invalidValue": ""
                    }
                ],
                "status": 400
            }
        }

+ Response 400 (application/json)

        // when the licenseType is invalid
        {
            "links": {},
            "error": {
                "reference": "f04a1a1e-0046-4b86-b9c3-da491d3343b5",
                "detail": "Check the request for invalid values or missing parameters.",
                "type": "validation",
                "title": "Invalid request attributes",
                "validationDetails": [
                    {
                        "title": "Deserialization error",
                        "constraint": "Must be one of [NAMED, CONCURRENT, BUILTIN].",
                        "attributePath": "licenseType",
                        "detail": "Cannot deserialize enum 'LicenseType' from value 'asd'. Possible values are [NAMED, CONCURRENT, BUILTIN].",
                        "invalidValue": "asd",
                        "possibleValues": [
                            "NAMED",
                            "CONCURRENT",
                            "BUILTIN"
                        ]
                    }
                ],
                "status": 400
            }
        }

+ Response 401 (application/json)

        // when the access token in the request is missing or invalid
        {
            "error": {
                "detail": "Valid authentication has either not been provided or is insufficient.",
                "type": "auth",
                "title": "Invalid authentication",
                "status": 401
            }
        }

+ Response 403 (application/json)

        // when you don't have the privilege to create users
        {
        "links": {},
            "error": {
                "detail": "The user does not have the required privileges to perform the operation.",
                "type": "insufficientPrivileges",
                "title": "Insufficient privileges",
                "status": 403
            }
        }

+ Response 409 (application/json)

        // when the same user is created more than once
        {
        "links": {},
            "error": {
                "reference": "a159c153-e99b-4d49-9987-ca457670ef86",
                "detail": "Licensing error (Invalid user id (message ID #2): A user with the name 'fred' already exists. Please provide a different user name or spell the user name appropriately.)",
                "type": "client",
                "title": "Conflict",
                "status": 409
            }
        }

+ Response 500 (application/json)

        // when there's an unspecified error
        {
            "links": {},
            "error": {
                "reference": "4f356c86-aac1-4cae-8d78-518aea6cebe0",
                "detail": "An unspecific server error occurred. Details may be found in the Acrolinx log files.",
                "type": "server",
                "title": "Unspecific server error",
                "status": 500
            }
        }

+ Request Create a user with specified roles (application/json)

    This request will create a new user with specified roles.

    + Attributes (CreateUser)
    
    + Body

            {
                "username": "fred",
                "fullName": "Fred Freelancer",
                "password": "P@ssW0rd12345!",
                "roles": [
                    {
                        "id": "d66d4d00-3381-11e0-bc8e-0800200c9a66",
                        "name": "Term Contributor"
                    },
                    {
                        "id": "6a0ebe93-f735-4b08-b6f2-66f7ecc70190",
                        "name": "Term Browser Administrator"
                    }
                ]
            }

+ Response 201 (application/json)

    + Attributes (object)
        + links (object)
        + data (User)
    
    + Body

            {
                "links": {},
                "data": {
                    "id": "eb323701-839f-4998-b56e-3e20c70259c5",
                    "username": "fred",
                    "fullName": "Fred Freelancer",
                    "createdOn": "2021-04-15T15:00:26.495Z",
                    "lastIntegrationAccess": "1970-01-01T00:00:00Z",
                    "licenseType": "named",
                    "licenseStatus": "inactive",
                    "activeTokenId": "",
                    "checkingFrequency": "infrequent",
                    "properties" : {
                        "customkey": "customvalue",
                    },
                    "roles": [
                        {
                            "id": "d66d4d00-3381-11e0-bc8e-0800200c9a66",
                            "name": "Term Contributor"
                        },
                        {
                            "id": "6a0ebe93-f735-4b08-b6f2-66f7ecc70190",
                            "name": "Term Browser Administrator"
                        }
                    ],
                    "idpUser": false,
                    "staffUser": false,
                    "rolesSetByIdp": false,
                    "customFields": [
                        {
                            "key": "Department",
                            "displayName": "Department",
                            "inputType": "optional",
                            "type": "list",
                            "value": "Example Department",
                            "possibleValues": [
                                "Example Department"
                            ]
                        }
                    ]
                }
            }

+ Response 400 (application/json)

        // when the request format is invalid 
        {
            "links": {},
            "error": {
                "detail": "Unexpected character ....",
                "type": "client",
                "title": "Could not parse request body.",
                "status": 400
            }
        }

+ Response 400 (application/json)

        // when the password doesn't meet the strictness requirements starting from v2021.05
        {
            "links": {},
            "error": {
                "reference": "30c5db1e-fabd-4815-890a-a55416e6c3be",
                "detail": "Check the request for invalid values or missing parameters.",
                "type": "validation",
                "title": "Invalid request attributes",
                "validationDetails": [
                    {
                        "title": "Validation error",
                        "constraint": "Size",
                        "attributePath": "password",
                        "detail": "size must be between 1 and 128",
                        "invalidValue": "simple"
                    }
                ],
                "status": 400
            }
        }

+ Response 400 (application/json)

        // when the password doesn't meet the strictness requirements starting from v2022.02
        {
            "links": {},
            "error": {
                "reference": "30c5db1e-fabd-4815-890a-a55416e6c3be",
                "detail": "Check the request for invalid values or missing parameters.",
                "type": "validation",
                "title": "Invalid request attributes",
                "validationDetails": [
                    {
                        "title": "Validation error",
                        "constraint": "Password must be composed of printable ASCII characters and contain at least 1 lower-case, 1 upper-case letter, 1 digit, one symbol and must be between 10 to 64 characters in length",
                        "attributePath": "password",
                        "detail": "Password must be composed of printable ASCII characters and contain at least 1 lower-case, 1 upper-case letter, 1 digit, one symbol and must be between 10 to 64 characters in length",
                        "invalidValue": "not a secure password"
                    }
                ],
                "status": 400
            }
        }

+ Response 400 (application/json)

        // when the password is omitted starting from v2022.02
        {
            "links": {},
            "error": {
                "reference": "30c5db1e-fabd-4815-890a-a55416e6c3be",
                "detail": "Check the request for invalid values or missing parameters.",
                "type": "validation",
                "title": "Invalid request attributes",
                "validationDetails": [
                    {
                        "title": "Validation error",
                        "constraint": "NotEmpty",
                        "attributePath": "password",
                        "detail": "must not be empty",
                        "invalidValue": ""
                    }
                ],
                "status": 400
            }
        }

+ Response 400 (application/json)

        // when the licenseType is invalid
        {
            "links": {},
            "error": {
                "reference": "f04a1a1e-0046-4b86-b9c3-da491d3343b5",
                "detail": "Check the request for invalid values or missing parameters.",
                "type": "validation",
                "title": "Invalid request attributes",
                "validationDetails": [
                    {
                        "title": "Deserialization error",
                        "constraint": "Must be one of [NAMED, CONCURRENT, BUILTIN].",
                        "attributePath": "licenseType",
                        "detail": "Cannot deserialize enum 'LicenseType' from value 'asd'. Possible values are [NAMED, CONCURRENT, BUILTIN].",
                        "invalidValue": "asd",
                        "possibleValues": [
                            "NAMED",
                            "CONCURRENT",
                            "BUILTIN"
                        ]
                    }
                ],
                "status": 400
            }
        }

+ Response 401 (application/json)

        // when the access token in the request is missing or invalid
        {
            "error": {
                "detail": "Valid authentication has either not been provided or is insufficient.",
                "type": "auth",
                "title": "Invalid authentication",
                "status": 401
            }
        }

+ Response 403 (application/json)

        // when you don't have the privilege to create users
        {
        "links": {},
            "error": {
                "detail": "The user does not have the required privileges to perform the operation.",
                "type": "insufficientPrivileges",
                "title": "Insufficient privileges",
                "status": 403
            }
        }

+ Response 403 (application/json)

        // when you can't assign Super Administrator role because you don't have the Super Administrator role when you create users
        {
        "links": {},
            "error": {
                "detail": "It's not possible to make these changes. You need Super Administrator role to create or edit a user with this role.",
                "type": "insufficientPrivileges",
                "title": "Insufficient privileges",
                "status": 403
            }
        }

+ Response 409 (application/json)

        // when the same user was created more than once
        {
        "links": {},
            "error": {
                "reference": "a159c153-e99b-4d49-9987-ca457670ef86",
                "detail": "Licensing error (Invalid user id (message ID #2): A user with the name 'fred' already exists. Please provide a different user name or spell the user name appropriately.)",
                "type": "client",
                "title": "Conflict",
                "status": 409
            }
        }

+ Response 500 (application/json)

        // when there's an unspecified error
        {
            "links": {},
            "error": {
                "reference": "4f356c86-aac1-4cae-8d78-518aea6cebe0",
                "detail": "An unspecific server error occurred. Details may be found in the Acrolinx log files.",
                "type": "server",
                "title": "Unspecific server error",
                "status": 500
            }
        }

+ Request Create a user with specified custom field values (application/json)

    This request will create a new user with specified custom field values.

    + Attributes (CreateUser)
    
    + Body

            {
                "username": "fred",
                "fullName": "Fred Freelancer",
                "password": "P@ssW0rd12345!",
                "customFields": [
                    {
                        "key": "Department",
                        "value": "Example Department"
                    }
                ]
            }

+ Response 201 (application/json)

    + Attributes (object)
        + links (object)
        + data (User)
    
    + Body

            {
                "links": {},
                "data": {
                    "id": "eb323701-839f-4998-b56e-3e20c70259c5",
                    "username": "fred",
                    "fullName": "Fred Freelancer",
                    "createdOn": "2021-04-15T15:00:26.495Z",
                    "lastIntegrationAccess": "1970-01-01T00:00:00Z",
                    "licenseType": "named",
                    "licenseStatus": "inactive",
                    "activeTokenId": "",
                    "checkingFrequency": "infrequent",
                    "properties" : {
                        "customkey": "customvalue",
                    },
                    "roles": [
                        {
                            "id": "d66d4d00-3381-11e0-bc8e-0800200c9a66",
                            "name": "Term Contributor"
                        },
                        {
                            "id": "6a0ebe93-f735-4b08-b6f2-66f7ecc70190",
                            "name": "Term Browser Administrator"
                        }
                    ],
                    "idpUser": false,
                    "staffUser": false,
                    "rolesSetByIdp": false,
                    "customFields": [
                        {
                            "key": "Department",
                            "displayName": "Department",
                            "inputType": "optional",
                            "type": "list",
                            "value": "Example Department",
                            "possibleValues": [
                                "Example Department"
                            ]
                        }
                    ]
                }
            }

+ Response 400 (application/json)

        // when the request format is invalid 
        {
            "links": {},
            "error": {
                "detail": "Unexpected character ....",
                "type": "client",
                "title": "Could not parse request body.",
                "status": 400
            }
        }

+ Response 400 (application/json)

        // when the password doesn't meet the strictness requirements starting from v2021.05
        {
            "links": {},
            "error": {
                "reference": "30c5db1e-fabd-4815-890a-a55416e6c3be",
                "detail": "Check the request for invalid values or missing parameters.",
                "type": "validation",
                "title": "Invalid request attributes",
                "validationDetails": [
                    {
                        "title": "Validation error",
                        "constraint": "Size",
                        "attributePath": "password",
                        "detail": "size must be between 1 and 128",
                        "invalidValue": "simple"
                    }
                ],
                "status": 400
            }
        }

+ Response 400 (application/json)

        // when the password doesn't meet the strictness requirements starting from v2022.02
        {
            "links": {},
            "error": {
                "reference": "30c5db1e-fabd-4815-890a-a55416e6c3be",
                "detail": "Check the request for invalid values or missing parameters.",
                "type": "validation",
                "title": "Invalid request attributes",
                "validationDetails": [
                    {
                        "title": "Validation error",
                        "constraint": "Password must be composed of printable ASCII characters and contain at least 1 lower-case, 1 upper-case letter, 1 digit, one symbol and must be between 10 to 64 characters in length",
                        "attributePath": "password",
                        "detail": "Password must be composed of printable ASCII characters and contain at least 1 lower-case, 1 upper-case letter, 1 digit, one symbol and must be between 10 to 64 characters in length",
                        "invalidValue": "not a secure password"
                    }
                ],
                "status": 400
            }
        }

+ Response 400 (application/json)

        // when the password is omitted starting from v2022.02
        {
            "links": {},
            "error": {
                "reference": "30c5db1e-fabd-4815-890a-a55416e6c3be",
                "detail": "Check the request for invalid values or missing parameters.",
                "type": "validation",
                "title": "Invalid request attributes",
                "validationDetails": [
                    {
                        "title": "Validation error",
                        "constraint": "NotEmpty",
                        "attributePath": "password",
                        "detail": "must not be empty",
                        "invalidValue": ""
                    }
                ],
                "status": 400
            }
        }

+ Response 400 (application/json)

        // when the password doesn't meet the strictness requirements starting from v2022.02
        {
            "links": {},
            "error": {
                "reference": "30c5db1e-fabd-4815-890a-a55416e6c3be",
                "detail": "Check the request for invalid values or missing parameters.",
                "type": "validation",
                "title": "Invalid request attributes",
                "validationDetails": [
                    {
                        "title": "Validation error",
                        "constraint": "Password must be composed of printable ASCII characters and contain at least 1 lower-case, 1 upper-case letter, 1 digit, one symbol and must be between 10 to 64 characters in length",
                        "attributePath": "password",
                        "detail": "Password must be composed of printable ASCII characters and contain at least 1 lower-case, 1 upper-case letter, 1 digit, one symbol and must be between 10 to 64 characters in length",
                        "invalidValue": "not a secure password"
                    }
                ],
                "status": 400
            }
        }

+ Response 400 (application/json)

        // when the password is omitted starting from v2022.02
        {
            "links": {},
            "error": {
                "reference": "30c5db1e-fabd-4815-890a-a55416e6c3be",
                "detail": "Check the request for invalid values or missing parameters.",
                "type": "validation",
                "title": "Invalid request attributes",
                "validationDetails": [
                    {
                        "title": "Validation error",
                        "constraint": "NotEmpty",
                        "attributePath": "password",
                        "detail": "must not be empty",
                        "invalidValue": ""
                    }
                ],
                "status": 400
            }
        }

+ Response 400 (application/json)

        // when the licenseType is invalid
        {
            "links": {},
            "error": {
                "reference": "f04a1a1e-0046-4b86-b9c3-da491d3343b5",
                "detail": "Check the request for invalid values or missing parameters.",
                "type": "validation",
                "title": "Invalid request attributes",
                "validationDetails": [
                    {
                        "title": "Deserialization error",
                        "constraint": "Must be one of [NAMED, CONCURRENT, BUILTIN].",
                        "attributePath": "licenseType",
                        "detail": "Cannot deserialize enum 'LicenseType' from value 'asd'. Possible values are [NAMED, CONCURRENT, BUILTIN].",
                        "invalidValue": "asd",
                        "possibleValues": [
                            "NAMED",
                            "CONCURRENT",
                            "BUILTIN"
                        ]
                    }
                ],
                "status": 400
            }
        }

+ Response 400 (application/json)

        // when the provided custom field value is not in the list of possible values
        {
            "links": {},
            "error": {
                "detail": "Cannot set custom field \"Department\" as its value is not one of \"Example Department\".",
                "type": "customFieldsIncorrect",
                "title": "Custom field values are incorrect",
                "validationDetails": [
                    {
                        "title": "Invalid custom field value",
                        "constraint": "Must be one of \"Example Department\".",
                        "attributePath": "customFields.Department",
                        "detail": "Cannot set custom field \"Department\" as its value is not one of \"Example Department\".",
                        "invalidValue": "My Department",
                        "possibleValues": [
                            "Example Department"
                        ],
                        "type": "InvalidValue"
                    }
                ],
                "status": 400
            }
        }

+ Response 400 (application/json)

        // when the provided custom field does not exists
        {
            "links": {},
            "error": {
                "detail": "Cannot set custom field \"T-Shirt size\" as its value is not one of \"Department\".",
                "type": "customFieldsIncorrect",
                "title": "Custom field values are incorrect",
                "validationDetails": [
                    {
                        "title": "Invalid custom field name",
                        "constraint": "Must be one of \"Department\".",
                        "attributePath": "customFields.T-Shirt size",
                        "detail": "Cannot set custom field \"T-Shirt size\" as its value is not one of \"Department\".",
                        "invalidValue": "T-Shirt size",
                        "possibleValues": [
                            "Department"
                        ],
                        "type": "InvalidField"
                    }
                ],
                "status": 400
            }
        }


+ Response 401 (application/json)

        // when the access token in the request is missing or invalid
        {
            "error": {
                "detail": "Valid authentication has either not been provided or is insufficient.",
                "type": "auth",
                "title": "Invalid authentication",
                "status": 401
            }
        }

+ Response 403 (application/json)

        // when you don't have the privilege to create users
        {
        "links": {},
            "error": {
                "detail": "The user does not have the required privileges to perform the operation.",
                "type": "insufficientPrivileges",
                "title": "Insufficient privileges",
                "status": 403
            }
        }

+ Response 409 (application/json)

        // when the same user was created more than once
        {
        "links": {},
            "error": {
                "reference": "a159c153-e99b-4d49-9987-ca457670ef86",
                "detail": "Licensing error (Invalid user id (message ID #2): A user with the name 'fred' already exists. Please provide a different user name or spell the user name appropriately.)",
                "type": "client",
                "title": "Conflict",
                "status": 409
            }
        }

+ Response 500 (application/json)

        // when there's an unspecified error
        {
            "links": {},
            "error": {
                "reference": "4f356c86-aac1-4cae-8d78-518aea6cebe0",
                "detail": "An unspecific server error occurred. Details may be found in the Acrolinx log files.",
                "type": "server",
                "title": "Unspecific server error",
                "status": 500
            }
        }



### Update a User [PUT /api/v1/user/{id}]

**Added in Core Platform version 2021.05**

+ Parameters
    + id: `eb323701-839f-4998-b56e-3e20c70259c5` (required, string) - UUID of the user, unique identifier

+ Request Update fullName attribute (application/json)

    You can update the fullName attribute for a user.

    In this example, only the `fullName` attribute will change for the user `fred`. This was identified in the database by its *id*.

    **Note:**
    - You can delete the `fullName` by changing the attribute to empty.

    + Headers

            X-Acrolinx-Auth: your_access_token

    + Attributes (object)
        + fullName (string, required)

    + Body

            {
                "fullName": "New Full Name"
            }

+ Response 200 (application/json)

    + Attributes (object)
        + links (object)
        + data (User)

    + Body

            {
                "links": {},
                "data": {
                    "id": "eb323701-839f-4998-b56e-3e20c70259c5",
                    "username": "fred",
                    "fullName": "New Full Name",
                    "createdOn": "2021-04-15T15:00:26.495Z",
                    "lastIntegrationAccess": "1970-01-01T00:00:00Z",
                    "licenseType": "named",
                    "licenseStatus": "inactive",
                    "activeTokenId": "uqlyxi3cdxrdqn7bzwdfffyvzr",
                    "checkingFrequency": "infrequent",
                    "properties" : {
                        "customkey": "customvalue",
                    },
                    "roles": [
                        {
                            "id": "d66d4d00-3381-11e0-bc8e-0800200c9a66",
                            "name": "Term Contributor"
                        },
                        {
                            "id": "6a0ebe93-f735-4b08-b6f2-66f7ecc70190",
                            "name": "Term Browser Administrator"
                        }
                    ],
                    "idpUser": false,
                    "staffUser": false,
                    "rolesSetByIdp": false,
                    "customFields": [
                        {
                            "key": "Department",
                            "displayName": "Department",
                            "inputType": "optional",
                            "type": "list",
                            "value": "Example Department",
                            "possibleValues": [
                                "Example Department"
                            ]
                        }
                    ]
                }
            }

+ Response 401 (application/json)

        // when the access token in the request is missing or invalid
        {
            "error": {
                "detail": "Valid authentication has either not been provided or is insufficient.",
                "type": "auth",
                "title": "Invalid authentication",
                "status": 401
            }
        }

+ Response 403 (application/json)

        // when you don't have the privilege to update users
        {
            "links": {},
                "error": {
                    "detail": "The user doesn't have the privileges required to perform the operation.",
                    "type": "insufficientPrivileges",
                    "title": "Insufficient privileges",
                    "status": 403
            }
        }

+ Response 404 (application/json)

        // when the user couldn't be identified by its *id* in the database
        {
        "links": {},
            "error": {
                "reference": "57380cf5-7f4d-481f-9490-375c950afe9d",
                "detail": "An unspecific client error occurred.",
                "type": "client",
                "title": "Not Found",
                "status": 404
            }
        }

+ Request Update roles (application/json)

    You can update a user's role.

    In this example, only the `roles` attribute will change for the user `fred`. This was identified in the database by its *id*. Each user needs at least one assigned role. This doesn't apply to built-in users. You can only assign Super Administrator role if you have Super Administrator role. If you add a role that doesn't exist, the call will fail and the error message will show the unknown roles that were referenced.

    + Headers

            X-Acrolinx-Auth: your_access_token

    + Attributes (object)
        + roles (array[Role], required)

    + Body

            {
                "roles": [{"id": "8c66c4e2-174a-4f77-b8d4-71bfa9ca4d2e"}]
            }

+ Response 200 (application/json)

    + Attributes (object)
        + links (object)
        + data (User)

    + Body
    
            {
                "links": {},
                "data": {
                    "id": "eb323701-839f-4998-b56e-3e20c70259c5",
                    "username": "fred",
                    "fullName": "New Full Name",
                    "createdOn": "2021-04-15T15:00:26.495Z",
                    "lastIntegrationAccess": "1970-01-01T00:00:00Z",
                    "licenseType": "named",
                    "licenseStatus": "inactive",
                    "properties" : {
                        "customkey": "customvalue",
                    },
                    "roles": [
                        {
                            "id": "d66d4d00-3381-11e0-bc8e-0800200c9a66",
                            "name": "Term Contributor"
                        },
                        {
                            "id": "6a0ebe93-f735-4b08-b6f2-66f7ecc70190",
                            "name": "Term Browser Administrator"
                        }
                    ],
                    "idpUser": false,
                    "staffUser": false,
                    "rolesSetByIdp": false,
                    "customFields": [
                        {
                            "key": "Department",
                            "displayName": "Department",
                            "inputType": "optional",
                            "type": "list",
                            "value": "Example Department",
                            "possibleValues": [
                                "Example Department"
                            ]
                        }
                    ]
                }
            }

+ Response 400 (application/json)

        // when the roles array is empty
        {
            "links": {},
            "error": {
                "reference": "aecbef3d-d1a5-4d69-8d6c-3639f3d944b1",
                "detail": "Check the request for invalid values or missing parameters.",
                "type": "validation",
                "title": "Invalid request attributes",
                "validationDetails": [
                    {
                        "title": "Validation error",
                        "constraint": "NotEmpty",
                        "attributePath": "roles",
                        "detail": "must not be empty",
                        "invalidValue": "[]"
                    }
                ],
                "status": 400
            }
        }

+ Response 400 (application/json)

        // when one or more of the roles that are specified that do not exist
        {
            "links": {},
            "error": {
                "reference": "57380cf5-7f4d-481f-9490-375c950afe9d",
                "detail": "The following role(s) could not be found when trying to assign them to user with ID eb323701-839f-4998-b56e-3e20c70259c5: [Role One], [Role Two]",
                "type": "entityToAssociateNotFound",
                "title": "The requested role(s) could not be found.",
                "status": 400
            }
        }

+ Response 400 (application/json)

        // when the user has their roles managed by their identity provider
        {
            "links": {},
            "error": {
                "reference": "57380cf5-7f4d-481f-9490-375c950afe9d",
                "detail": "You cannot update this users roles, because they are managed by the user's IDP"
                "type": "validation",
                "title": "Cannot update roles"
                "status": 400
            }
        }

+ Response 401 (application/json)

        // when the access token in the request is missing or invalid
        {
            "error": {
                "detail": "Valid authentication has either not been provided or is insufficient.",
                "type": "auth",
                "title": "Invalid authentication",
                "status": 401
            }
        }

+ Response 403 (application/json)

        // when you don't have the privilege to grant a role
        {
        "links": {},
            "error": {
                "detail": "The user does not have the required privileges to perform the operation.",
                "type": "insufficientPrivileges",
                "title": "Insufficient privileges",
                "status": 403
            }
        }

        // when you can't assign Super Administrator role because you don't have the Super Administrator role when you edit users
        {
        "links": {},
            "error": {
                "detail": "It's not possible to make these changes. You need Super Administrator role to create or edit a user with this role.",
                "type": "insufficientPrivileges",
                "title": "Insufficient privileges",
                "status": 403
            }
        }

+ Response 409 (application/json)

        // when you try to update a built-in user
        {
        "links": {},
            "error": {
                "detail": "Not possible to update built-in user",
                "type": "client",
                "title": "Conflict",
                "status": 409
            }
        }

+ Request Set a custom field (application/json)

    + Headers

            X-Acrolinx-Auth: your_access_token

    + Attributes (object)
        + customFields (array[CustomField])

    + Body

            {
                "customFields": [
                    {
                        "key": "Test Field",
                        "value": "This is a string of text"
                    },
                    {
                        "key": "Department",
                        "value": "Example Department"
                    }
                ]
            }

+ Response 200 (application/json)

    + Attributes (object)
        + links (object)
        + data (User)
    
    + Body

            {
                "links": {},
                "data": {
                    "id": "eb323701-839f-4998-b56e-3e20c70259c5",
                    "username": "fred",
                    "fullName": "Fred Freelancer",
                    "createdOn": "2021-04-15T15:00:26.495Z",
                    "lastIntegrationAccess": "1970-01-01T00:00:00Z",
                    "licenseType": "named",
                    "licenseStatus": "inactive",
                    "activeTokenId": "uqlyxi3cdxrdqn7bzwdfffyvzr",
                    "checkingFrequency": "infrequent",
                    "properties" : {
                        "customkey": "customvalue",
                    },
                    "roles": [
                        {
                            "id": "d66d4d00-3381-11e0-bc8e-0800200c9a66",
                            "name": "Term Contributor"
                        },
                        {
                            "id": "6a0ebe93-f735-4b08-b6f2-66f7ecc70190",
                            "name": "Term Browser Administrator"
                        }
                    ],
                    "idpUser": false,
                    "staffUser": false,
                    "rolesSetByIdp": false,
                    "customFields": [
                        {
                            "key": "Department",
                            "displayName": "Department",
                            "inputType": "optional",
                            "type": "list",
                            "value": "Example Department",
                            "possibleValues": [
                                "Example Department"
                            ]
                        },
                        {
                            "key": "Test Field",
                            "displayName": "Test Field",
                            "inputType": "optional",
                            "type": "text",
                            "value": "This is a string of text",
                            "possibleValues": [
                                "Item"
                            ]
                        }
                    ]
                }
            }

+ Request Clear a custom field (application/json)

    + Headers

            X-Acrolinx-Auth: your_access_token

    + Attributes (object)
        + customFields (array[CustomField])

    + Body

            {
                "customFields": [
                    {
                        "key": "Test Field",
                        "value": ""
                    },
                    {
                        "key": "Department",
                        "value": ""
                    }
                ]
            }

+ Response 200 (application/json)

    + Attributes (object)
        + links (object)
        + data (User)
    
    + Body

            {
                "links": {},
                "data": {
                    "id": "eb323701-839f-4998-b56e-3e20c70259c5",
                    "username": "fred",
                    "fullName": "Fred Freelancer",
                    "createdOn": "2021-04-15T15:00:26.495Z",
                    "lastIntegrationAccess": "1970-01-01T00:00:00Z",
                    "licenseType": "named",
                    "licenseStatus": "inactive",
                    "activeTokenId": "uqlyxi3cdxrdqn7bzwdfffyvzr",
                    "checkingFrequency": "infrequent",
                    "properties" : {
                        "customkey": "customvalue",
                    },
                    "roles": [
                        {
                            "id": "d66d4d00-3381-11e0-bc8e-0800200c9a66",
                            "name": "Term Contributor"
                        },
                        {
                            "id": "6a0ebe93-f735-4b08-b6f2-66f7ecc70190",
                            "name": "Term Browser Administrator"
                        }
                    ],
                    "idpUser": false,
                    "staffUser": false,
                    "rolesSetByIdp": false,
                    "customFields": [
                        {
                            "key": "Department",
                            "displayName": "Department",
                            "inputType": "optional",
                            "type": "list",
                            "value": "Example Department",
                            "possibleValues": [
                                "Example Department"
                            ]
                        },
                        {
                            "key": "Test Field",
                            "displayName": "Test Field",
                            "inputType": "optional",
                            "type": "text",
                            "value": "This is a string of text",
                            "possibleValues": [
                                "Item"
                            ]
                        }
                    ]
                }
            }

+ Response 400 (application/json)

        // when any of the updated fields are invalid, you'll see a detailed error message
        {
            "links": {},
            "error": {
                "detail": "Cannot set custom field \"Department\" as its value is not one of \"Example Department\".",
                "type": "customFieldsIncorrect",
                "title": "Custom field values are incorrect",
                "validationDetails": [
                    {
                        "title": "Invalid custom field value",
                        "constraint": "Must be one of \"Example Department\".",
                        "attributePath": "customFields.Department",
                        "detail": "Cannot set custom field \"Department\" as its value is not one of \"Example Department\".",
                        "invalidValue": "This is not valid",
                        "possibleValues": [
                            "Example Department"
                        ],
                        "type": "InvalidValue"
                    }
                ],
                "status": 400
            }
        }

+ Response 401 (application/json)

        // when the access token in the request is missing or invalid
        {
            "error": {
                "detail": "Valid authentication has either not been provided or is insufficient.",
                "type": "auth",
                "title": "Invalid authentication",
                "status": 401
            }
        }
+ Response 403 (application/json)

        // when you don't have the privilege to update custom fields
        {
        "links": {},
            "error": {
                "detail": "The user does not have the required privileges to perform the operation.",
                "type": "insufficientPrivileges",
                "title": "Insufficient privileges",
                "status": 403
            }
        }

+ Response 404 (application/json)

        // when a role wasn't found in the database based on its *id*
        {
        "links": {},
            "error": {
                "reference": "57380cf5-7f4d-481f-9490-375c950afe9d",
                "detail": "An unspecific client error occurred.",
                "type": "client",
                "title": "Not Found",
                "status": 404
            }
        }

+ Request Update password attribute (application/json)

    You can update the password attribute for a user.

    In this example, only the `password` attribute will change for the user `fred`. This was identified in the database by its *id*.

    **Note:**
    - You can update the `password` field as of Core Platform version 2022.02

    + Headers

            X-Acrolinx-Auth: your_access_token

    + Attributes (object)
        + fullName (string, required)

    + Body

            {
                "password": "New_Secure_P@ssW0rd"
            }

+ Response 200 (application/json)

    + Attributes (object)
        + links (object)
        + data (User)

    + Body

            {
                "links": {},
                "data": {
                    "id": "eb323701-839f-4998-b56e-3e20c70259c5",
                    "username": "fred",
                    "fullName": "New Full Name",
                    "createdOn": "2021-04-15T15:00:26.495Z",
                    "lastIntegrationAccess": "1970-01-01T00:00:00Z",
                    "licenseType": "named",
                    "licenseStatus": "inactive",
                    "activeTokenId": "uqlyxi3cdxrdqn7bzwdfffyvzr",
                    "checkingFrequency": "infrequent",
                    "properties" : {
                        "customkey": "customvalue",
                    },
                    "roles": [
                        {
                            "id": "d66d4d00-3381-11e0-bc8e-0800200c9a66",
                            "name": "Term Contributor"
                        },
                        {
                            "id": "6a0ebe93-f735-4b08-b6f2-66f7ecc70190",
                            "name": "Term Browser Administrator"
                        }
                    ],
                    "idpUser": false,
                    "staffUser": false,
                    "rolesSetByIdp": false,
                    "customFields": [
                        {
                            "key": "Department",
                            "displayName": "Department",
                            "inputType": "optional",
                            "type": "list",
                            "value": "Example Department",
                            "possibleValues": [
                                "Example Department"
                            ]
                        }
                    ]
                }
            }
+ Response 400 (application/json)

        // when the password doesn't meet the strictness requirements starting from v2022.02
        {
            "links": {},
            "error": {
                "reference": "30c5db1e-fabd-4815-890a-a55416e6c3be",
                "detail": "Check the request for invalid values or missing parameters.",
                "type": "validation",
                "title": "Invalid request attributes",
                "validationDetails": [
                    {
                        "title": "Validation error",
                        "constraint": "Password must be composed of printable ASCII characters and contain at least 1 lower-case, 1 upper-case letter, 1 digit, one symbol and must be between 10 to 64 characters in length",
                        "attributePath": "password",
                        "detail": "Password must be composed of printable ASCII characters and contain at least 1 lower-case, 1 upper-case letter, 1 digit, one symbol and must be between 10 to 64 characters in length",
                        "invalidValue": "not a secure password"
                    }
                ],
                "status": 400
            }
        }

+ Response 400 (application/json)

        // when the password is omitted starting from v2022.02
        {
            "links": {},
            "error": {
                "reference": "30c5db1e-fabd-4815-890a-a55416e6c3be",
                "detail": "Check the request for invalid values or missing parameters.",
                "type": "validation",
                "title": "Invalid request attributes",
                "validationDetails": [
                    {
                        "title": "Validation error",
                        "constraint": "NotEmpty",
                        "attributePath": "password",
                        "detail": "must not be empty",
                        "invalidValue": ""
                    }
                ],
                "status": 400
            }
        }

+ Response 401 (application/json)

        // when the access token in the request is missing or invalid
        {
            "error": {
                "detail": "Valid authentication has either not been provided or is insufficient.",
                "type": "auth",
                "title": "Invalid authentication",
                "status": 401
            }
        }
+ Response 403 (application/json)

        // when you don't have the privilege to update custom fields
        {
        "links": {},
            "error": {
                "detail": "The user does not have the required privileges to perform the operation.",
                "type": "insufficientPrivileges",
                "title": "Insufficient privileges",
                "status": 403
            }
        }

+ Response 404 (application/json)

        // when a role wasn't found in the database based on its *id*
        {
        "links": {},
            "error": {
                "reference": "57380cf5-7f4d-481f-9490-375c950afe9d",
                "detail": "An unspecific client error occurred.",
                "type": "client",
                "title": "Not Found",
                "status": 404
            }
        }

### Delete a User [DELETE /api/v1/user/{id}]

**Added in Core Platform version 2021.05**

This method deletes a specified user based on its *id*.

**Note:** You can only delete a user successfully if all of the following conditions are met:
- The user isn't a preconfigured, built-in user such as "admin", "termcontribution", or "analyticsReadOnlyUser".

To read more about managing users and built-in users, see [User Management](https://support.acrolinx.com/hc/en-us/sections/10210965582994-User-Management) in the Acrolinx documentation.

+ Parameters
    + id: `eb323701-839f-4998-b56e-3e20c70259c5` (required, string) - UUID of the user, unique identifier

+ Request Delete user by id

    + Headers

            X-Acrolinx-Auth: your_access_token

+ Response 204

+ Response 400 (application/json)

        // when the request is invalid because of a typo, for example
        {
            "links": {},
            "error": {
                "reference": "eb323701-839f-4998-b56e-3e20c70259c5",
                "detail": "An unspecific client error occurred.",
                "type": "client",
                "title": "Bad Request",
                "status": 400
            }
        }

+ Response 401 (application/json)

        // when the access token in the request is missing or invalid
        {
            "links": {},
            "error": {
                "detail": "Valid authentication has either not been provided or is insufficient.",
                "type": "auth",
                "title": "Invalid authentication",
                "status": 401
            }
        }

+ Response 403 (application/json)

        // when you don't have the privilege to delete a user
        {
        "links": {},
            "error": {
                "detail": "The user does not have the required privileges to perform the operation.",
                "type": "insufficientPrivileges",
                "title": "Insufficient privileges",
                "status": 403
            }
        }

+ Response 404 (application/json)

        // when the user wasn't found in the database based on its *id*
        {
        "links": {},
            "error": {
                "reference": "e49d3cd5-330a-408d-84a1-e9ecf20677bf",
                "detail": "An unspecific client error occurred.",
                "type": "client",
                "title": "Not Found",
                "status": 404
            }
        }

+ Response 409 (application/json)

        // when you can't delete a user
        {
            "links": {},
            "error": {
                "reference": "e9c4227c-e75b-4576-93e4-f5b4fec65d3b",
                "detail": "Built-in user \"termcontribution (termcontribution) \" cannot be deleted",
                "type": "client",
                "title": "Conflict",
                "status": 409
            }
        }


## Missing Required User Custom Fields [/api/v1/user/custom-fields-missing]

**Added in Core Platform version 2022.04**

You can query users who don't have required custom fields.

**What's a missing required custom field?** The User API returns your user-related custom fields in the `customFields[]` array. If a custom field is required (marked with `"inputType": "required"`) and is missing a value (`"value": ""`), the field is considered to be missing.

**Note:**
- You need the `UserAndRoles.editUser` privilege.

### Count Users [HEAD /api/v1/user/custom-fields-missing]

Returns the total number of users who are missing one or more required user custom field.

**Note:**
- The response has no content.
- The user count will be shown in the header `X-Acrolinx-Total`.
- The header value is a numeral.
- It returns a 0 (zero) when no required custom fields are missing.

+ Request

    Query the number of users who are missing information in one or more required user custom fields.

    + Headers

            X-Acrolinx-Auth: your_access_token

+ Response 204

    + Headers

            X-Acrolinx-Total: 5

+ Response 401 (application/json)

+ Response 403 (application/json)

### Get Users [GET /api/v1/user/custom-fields-missing{?page,per_page}]

Returns a list of users who are missing one or more required user custom fields.

**Note:** Similar to the User Resource > Get All Users request, it supports pagination. See more details there.

+ Request

    + Headers

            X-Acrolinx-Auth: your_access_token

+ Response 200 (application/json)

    + Attributes (object)
        + links (object)
        + data (User)

    + Body

            {
                "links": {},
                "data": [
                    {
                        "id": "eb323701-839f-4998-b56e-3e20c70259c5",
                        "username": "fred",
                        "fullName": "Fred Freelancer",
                        "createdOn": "2021-04-15T15:00:26.495Z",
                        "lastIntegrationAccess": "1970-01-01T00:00:00Z",
                        "licenseType": "named",
                        "licenseStatus": "inactive",
                        "activeTokenId": "",
                        "checkingFrequency": "infrequent",
                        "properties" : {
                            "customkey": "customvalue",
                        },
                        "roles": [
                            {
                                "id": "d66d4d00-3381-11e0-bc8e-0800200c9a66",
                                "name": "Author"
                            }
                        ],
                        "idpUser": false,
                        "staffUser": false,
                        "rolesSetByIdp": false,
                        "customFields": [
                            {
                                "key": "Department",
                                "displayName": "Department",
                                "inputType": "optional",
                                "type": "list",
                                "value": "Example Department",
                                "possibleValues": [
                                    "Example Department"
                                ]
                            },
                            {
                            // Note that the value is empty ("") and the inputType is "required", so it's missing!
                                "key": "Employee number",
                                "displayName": "Employee number",
                                "inputType": "required",
                                "type": "text",
                                "value": "",
                                "possibleValues": []
                            }
                        ]
                    },
                    {
                        "id": "fd3eaa89-a6b7-463a-ba12-b7ded410bda0",
                        "username": "franz",
                        "fullName": "Franz Hubendobler",
                        "createdOn": "2021-02-23T17:24:01.131Z",
                        "lastIntegrationAccess": "1970-01-01T00:00:00Z",
                        "licenseType": "builtin",
                        "licenseStatus": "active",
                        "activeTokenId": "uqlyxi3cdxrdqn7bzwdfffyvzr",
                        "checkingFrequency": "infrequent",
                        "properties" : {
                            "customkey": "customvalue",
                        },
                        "roles": [
                            {
                                "id": "898a7c32-2c39-4cde-becb-16f22243e9b8",
                                "name": "Analytics Read-Only User"
                            }
                        ],
                        "idpUser": false,
                        "staffUser": false,
                        "rolesSetByIdp": false,
                        "customFields": [
                            {
                                "key": "Department",
                                "displayName": "Department",
                                "inputType": "optional",
                                "type": "list",
                                "value": "Example Department",
                                "possibleValues": [
                                    "Example Department"
                                ]
                            },
                            {
                            // Note that the value is empty ("") and the inputType is "required", so it's missing!
                                "key": "Employee number",
                                "displayName": "Employee number",
                                "inputType": "required",
                                "type": "text",
                                "value": "",
                                "possibleValues": []
                            }
                        ]
                    }
                ]
            }

+ Response 400 (appplication/json)

        // when the page parameter has an invalid value such as 0 or negative number
        {
            "links": {},
            "error": {
                "reference": "b2045b7f-1dce-49e7-880a-93874f427554",
                "detail": "Invalid page request attribute, it must be greater than zero",
                "type": "client",
                "title": "Bad Request",
                "status": 400
            }
        }

+ Response 401 (application/json)

        // when the access token in the request is missing or invalid
        {
            "error": {
                "detail": "Valid authentication has either not been provided or is insufficient.",
                "type": "auth",
                "title": "Invalid authentication",
                "status": 401
            }
        }

+ Response 403 (application/json)

        // when you don't have sufficent privileges
        {
        "links": {},
            "error": {
                "detail": "The user does not have the required privileges to perform the operation.",
                "type": "insufficientPrivileges",
                "title": "Insufficient privileges",
                "status": 403
            }
        }

+ Response 404 (application/json)

        // when the page parameter has a non-numeric value, which is invalid
        {
            "links": {},
            "error": {
                "reference": "f1926760-f2e7-4af7-a3a6-f274bcb9a00f",
                "detail": "An unspecific client error occurred.",
                "type": "client",
                "title": "Not Found",
                "status": 404
            }
        }

## User-Generated API Tokens [/api/v1/user/{id}/tokens]

You can generate long-lasting API tokens for programmatic access to the Platform APIs.

Acrolinx protects its APIs with self-contained access tokens. These access tokens let you authorize yourself as a user. API tokens have different characteristics than the access tokens that are issued when you use the sign-in endpoint.

Don't forget to check out the *Introduction > Authentication and Authorization* section in this API Blueprint.

Be aware that you can only be bound to one API token at a time.
* When you create a new API token, your previous API token becomes invalid.

**Warning:** Follow these security guidelines when you work with API tokens:
+ Store your API token securely and never share it with others.
+ Don't bake your API token into any custom code that interacts with the Acrolinx Platform APIs.

**Note:** To learn more about creating API tokens in Acrolinx, read [Create an API Token](https://support.acrolinx.com/hc/en-us/articles/10306041244818-Create-an-API-Token) in the Acrolinx documentation.

### Create an API Token (Self)  [POST /api/v1/user/self/tokens]

**Added in Core Platform version 2021.06**

Use this method to create an API token for the current user.

**Note:** You don't need extra privileges or roles to create a new personal API token bound to the user authorized in the request.

**Note:** This endpoint lets users use the Basic authentication scheme to avoid reusing an existing API token.

+ Request Create an API token using Basic auth
    
    To authenticate using Basic auth, provide your username and password in the `X-Acrolinx-Auth` request header in the format `Basic username:password`. 

    * **Important:** 
        * This needs to have the prefix `Basic`.
        * Your credentials (`username:password`) must be base64 encoded.

    + Headers

            X-Acrolinx-Auth: Basic dGVzdDp0ZXN0

+ Response 200 (application/json)

    + Attributes (object)
        + links (object)
        + data (UserApiTokenCreateResponse)
    
    + Body

            {
                "links": {},
                "data": {
                    "type": "api",
                    "issuedAt": "2021-04-23T07:54:07Z",
                    "expiresAt": "2025-04-22T07:54:07Z",
                    "token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ0ZXJtY29udHJpYnV0aW9uIiwiYXVkIjoiYWNy..."
                }
            }

+ Response 401 (application/json)

        // when the credentails provided are missing or invalid
        {
            "links": {},
            "error": {
                "detail": "Valid authentication has either not been provided or is insufficient.",
                "type": "auth",
                "title": "Invalid authentication",
                "status": 401
            }
        }

+ Request Create an API token using an existing API token

    + Headers

            X-Acrolinx-Auth: // here you will find the existing API token

+ Response 200 (application/json)

    + Attributes (object)
        + links (object)
        + data (UserApiTokenCreateResponse)
    
    + Body

            {
                "links": {},
                "data": {
                    "type": "api",
                    "issuedAt": "2021-04-23T07:54:07Z",
                    "expiresAt": "2025-04-22T07:54:07Z",
                    "token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ0ZXJtY29udHJpYnV0aW9uIiwiYXVkIjoiYWNy..."
                }
            }

+ Response 401 (application/json)

        // when the access token in the request is missing or invalid
        {
            "links": {},
            "error": {
                "detail": "Valid authentication has either not been provided or is insufficient.",
                "type": "auth",
                "title": "Invalid authentication",
                "status": 401
            }
        }

### Create an API Token for User(s) [POST /api/v1/user/{id}/tokens]

**Added in Core Platform version 2021.05**

This method lets you create an API token for users based on their *id*.

Typical use cases for this API:
1. Create an API token for personal use
    - 1.1. Get your own unique identifier *id* via the *Current user* request.
    - 1.2. Enter your *id* as a parameter.
    - 1.3. Start using the issued API token.
2. Create an API token for someone else
    - 2.1. Get the unique identifier *id* for the other user via the *Get users* requests.
    - 2.2. Enter the other user's *id* as a parameter.
    - 2.3. Give the issued API token to the user securely.

**Note:** You can only create an API token if you have the appropriate permissions: 
* To create an API token for yourself, you need to be authorized with a valid access token.
* To create an API token for someone else, you need the privilege `UserAndRoles.setApiTokensForOthers` and you need to be authorized with a valid access token.

**Alternative use case:** Create an API token to impersonate a user

    Sometimes an admin might want to impersonate a user to help troubleshoot. 
    If a user comes across a bug, for example, an admin may want to impersonate the user to try and duplicate the problem.

+ Parameters
    + id: `eb323701-839f-4998-b56e-3e20c70259c5` (required, string) - UUID of the user, unique identifier

+ Request Create an API token for someone by user id

    + Headers

            X-Acrolinx-Auth: your_access_token

+ Response 200 (application/json)

    + Attributes (object)
        + links (object)
        + data (UserApiTokenCreateResponse)
    
    + Body

            {
                "links": {},
                "data": {
                    "type": "api",
                    "issuedAt": "2021-04-23T07:54:07Z",
                    "expiresAt": "2025-04-22T07:54:07Z",
                    "token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ0ZXJtY29udHJpYnV0aW9uIiwiYXVkIjoiYWNyb2xpbngiLCJuYmYiOjE2MTkwNzgwNDcsImlzcyI6ImFjcm9saW54OjAwMDBmZmZmZmZmZjAwMDAiLCJleHAiOjE3NDUzMDg0NDcsInRva2VuVHlwZSI6ImFwaSIsImlhdCI6MTYxOTE2NDQ0NywianRpIjoid3lvaXZoenl3Y3dwN3B4ejc2a29xN2F5NDQifQ.hRa2kHPl7EJ6xm115UOmu4QuppFoST7E626ceIsPeCI"
                }
            }

+ Response 401 (application/json)

        // when the access token in the request is missing or invalid
        {
            "links": {},
            "error": {
                "detail": "Valid authentication has either not been provided or is insufficient.",
                "type": "auth",
                "title": "Invalid authentication",
                "status": 401
            }
        }

+ Response 403 (application/json)

        // when the user can't create an API token for others ("UserAndRoles.setApiTokensForOthers")
        {
            "links": {},
            "error": {
                "reference": "64311fe7-2a7e-4e3b-849e-4e9ff8651400",
                "detail": "The user does not have the required privileges to perform the operation.",
                "type": "insufficientPrivileges",
                "title": "Insufficient privileges",
                "status": 403
            }
        }

+ Response 403 (application/json)

        // when the creator or receiver of the token is the built-in `admin`
        {
            "links": {},
            "error": {
                "reference": "64311fe7-2a7e-4e3b-849e-4e9ff8651400",
                "detail": "The built-in user `admin` mustn\'\'t create or retrieve any API tokens.",
                "type": "insufficientPrivileges",
                "title": "Can't Create API Token For `admin`",
                "status": 403
            }
        }

+ Response 403 (application/json)

        // when the user tries to create a token for a Super Administrator user, when they are not a Super Administrator themselves
        {
            "links": {},
            "error": {
                "reference": "64311fe7-2a7e-4e3b-849e-4e9ff8651400",
                "detail": "Operating user attempted to assign more elevated privileges than their own. This isn't allowed.",
                "type": "insufficientPrivileges",
                "title": "Privilege Escalation (Insufficient Privileges)",
                "status": 403
            }
        }

+ Response 404 (application/json)

        // when the user wasn't found in the database based on its *id*

## Random Passwords [/api/v1/user/random-passwords]

You can generate random passwords that meet the Acrolinx password policy.
This API is convenient when you want to create new users.

### Get a Randomly Generated Compliant Password [GET /api/v1/user/random-passwords]

**Added in Core Platform version 2022.03**

**Password Requirements**

A password needs to meet the following requirements:

- Composed of ASCII printable characters
- Includes at least 1 lowercase letter
- Includes at least 1 uppercase letter
- Includes at least 1 digit
- Includes at least 1 special character
- At least 10 characters long
- No more than 64 characters long

**Note:**
- You need the `UserAndRoles.editUser` privilege.
- The randomly generated password isn't saved anywhere.
- The HTTP requests aren't cached.
- The randomly generated passwords are always 20 characters long.

+ Request Get a random password from the API

    + Headers

            X-Acrolinx-Auth: your_access_token

+ Response 200 (application/json)

    + Headers

            Cache-Control: private, no-cache, no-transform, must-revalidate, max-age=0
            Pragma: no-Cache
            Expires: Thu, 01 Jan 1970 00:00:00 GMT

    + Attributes (object)
        + links (object)
        + data (RandomPassword)

    + Body

            {
                "links": {},
                "data": {
                    "value": "#n(Y2Ne|=ODfEV @,y8I"
                }
            }

+ Response 401 (application/json)

        // when the access token in the request is missing or invalid
        {
            "links": {},
            "error": {
                "detail": "Valid authentication has either not been provided or is insufficient.",
                "type": "auth",
                "title": "Invalid authentication",
                "status": 401
            }
        }

+ Response 403 (application/json)

        // when the user doesn't have the privilege to modify users ("UserAndRoles.editUser")
        {
            "links": {},
            "error": {
                "reference": "64311fe7-2a7e-4e3b-849e-4e9ff8651400",
                "detail": "The user does not have the required privileges to perform the operation.",
                "type": "insufficientPrivileges",
                "title": "Insufficient privileges",
                "status": 403
            }
        }

+ Response 503 (application/json)

        // when the random password generator takes too long to generate an acceptable password
        {
            "links": {},
            "error": {
                "detail": "the service was unable to process your request at this time, please try again",
                "type": "temporaryUnavailable",
                "title": "Temporarily unable to process the request",
                "status": 503
            }
        }

## User Commands [/api/v1/user/{id}/_{command}]

The APIs in this group follow the API design command style.   

These administrative commands can help govern users in your Acrolinx instance. The commands can do more than simply (re)send the new state of a single resource. 

**Note:** You can apply these requests multiple times without changing the result (idempotent). 

### Release an Active Named User License [PUT /api/v1/user/{id}/_release]

**Added in Core Platform version 2021.05**

This method uses the *id* to release an active license consumed by a user.

**Note:**
- You can only release users with the `named` license type.
- If you release the license of a user who doesn't consume a license, you won't see an error.
- To do this, you need the `UserAndRoles.deleteSessions` privilege.

**Result:** User's `licenseStatus` changed from `active` to `inactive`.

+ Parameters
    + id: `eb323701-839f-4998-b56e-3e20c70259c5` (required, string) - UUID of the user, unique identifier

+ Request Release an Active Named User License by user id

    + Headers

            X-Acrolinx-Auth: your_access_token

+ Response 204

+ Response 401 (application/json)

        // when the access token in the request is missing or invalid
        {
            "links": {},
            "error": {
                "detail": "Valid authentication has either not been provided or is insufficient.",
                "type": "auth",
                "title": "Invalid authentication",
                "status": 401
            }
        }

+ Response 403 (application/json)

        // when you don't have the privilege to release other users' licenses ("UserAndRoles.deleteSessions")
        {
            "links": {},
            "error": {
                "reference": "64311fe7-2a7e-4e3b-849e-4e9ff8651400",
                "detail": "The user does not have the required privileges to perform the operation.",
                "type": "insufficientPrivileges",
                "title": "Insufficient privileges",
                "status": 403
            }
        }

+ Response 404 (application/json)

        // when the user wasn't found in the database by its *id*
        {
        "links": {},
            "error": {
                "reference": "e49d3cd5-330a-408d-84a1-e9ecf20677bf",
                "detail": "An unspecific client error occurred.",
                "type": "client",
                "title": "Not Found",
                "status": 404
            }
        }

### Request User Information Update  [PUT /api/v1/user/{id}/_request_cf_update]

**Added in Core Platform version 2021.12**

The user specified by the *id* in this request will be asked to update their user information.

**Note:**
- The next time the user signs in, they'll need to re-enter their user information via a form.
- If you repeat the request for the same user UUID, you won't be notified that a request was already submitted.
- To do this, you need the `UserAndRoles.editUser` privilege.

+ Parameters
    + id: `eb323701-839f-4998-b56e-3e20c70259c5` (required, string) - UUID of the user, unique identifier

+ Request Ask one user to update their user information

    + Headers

            X-Acrolinx-Auth: your_access_token

+ Response 204

+ Response 401 (application/json)

        // when the access token in the request is missing or invalid
        {
            "links": {},
            "error": {
                "detail": "Valid authentication has either not been provided or is insufficient.",
                "type": "auth",
                "title": "Invalid authentication",
                "status": 401
            }
        }

+ Response 403 (application/json)

        // when you don't have the neccessary privileges ("UserAndRoles.editUser")
        {
            "links": {},
            "error": {
                "reference": "64311fe7-2a7e-4e3b-849e-4e9ff8651400",
                "detail": "The user does not have the required privileges to perform the operation.",
                "type": "insufficientPrivileges",
                "title": "Insufficient privileges",
                "status": 403
            }
        }

+ Response 404 (application/json)

        // when the user wasn't found in the database by its *id*
        {
        "links": {},
            "error": {
                "reference": "e49d3cd5-330a-408d-84a1-e9ecf20677bf",
                "detail": "An unspecific client error occurred.",
                "type": "client",
                "title": "Not Found",
                "status": 404
            }
        }

### Export a List of Users [GET /api/v1/user/_export]

**Added in Core Platform version 2021.06**

This API provides an easy way to export a concise user list in various file formats.

The endpoint uses content negotiation to determine the format of the export. You can include the `Accept` header in your request to specify the format you prefer. See the `Supported formats` section for more information about the formats that Acrolinx currently supports.

**Supported formats:**
+ `text/csv` (default, file extension is `.csv`)

**Note:** If you don't specify the format in the `Accept` header, the default will be used.

**Content-Disposition:**

The API also returns the `Content-Disposition` response header to give information about the returned content. 
Based on this, browsers can recognize downloadable attachments that can be saved locally.

The header parameters are set as follows:
+ `attachment` - Indicates that the content should be downloaded.
+ `filename="acrolinx_users_export_yyyyMMdd_HHmmss.{fileExt}"` - Most browsers present a "Save as" dialog for attachments. This will be prefilled with the value of the filename parameter.

+ Request Export a list of users in CSV format

    This lets you export a list of users and their data into a CSV file that looks like a spreadsheet but has a `.csv` extension.
    Each line of the file is a user data record. Each record consists of one or more user fields and the actual value, separated by column delimiter.
    You can use the CSV file with most spreadsheet programs, such as Microsoft Excel or Google Sheets.

    You'll see the following user fields in the file (in the following order):
    + **user_id**: The user's unique identifier (string, UUID).
    + **Username**: The user's username, which can be used for sign in and user identification.
    + **Full Name**: The full name of the user.
    + **Roles**: A list of assigned roles.
    + **Created On**: Indicates when the user was created.
    + **Last Integration Access**: Indicates when the user last accessed an integration. If the user hasn't accessed an integration, the default value is `Never`.
    + **Checking Frequency**: Displays a rough idea of the user's usage pattern based on checking frequency across the user's lifetime in days. Its value can be [ "frequent", "infrequent', "regular" ].
    + **License Type**: Indicates the type of license. Its value can be ["named", "concurrent", "builtin"].
    + **{Custom Field name}**: Users can have multiple (0...N) custom fields that are also attached to the schema. 
        + For custom fields, the column name is mapped from the custom field's name (specified when you create it). The column will be added to the end of the sheet dynamically. 

    **Notes, about the CSV file and data formatting:** 
    + Column headers are also written into the first row of the file.
    + Fields are separated by a semicolon `;` (as column delimiter). 
    + Date and time values are exported in `UTC`, for example `2021-05-12T15:40:00.876Z`.
        + When there's no stored value for a given Date time type field, the cell should contain `Never` or an empty value.
    + Values of a list type field are separated with a colon `:` (as the "in-cell" delimiter).
    + Values that contain space characters are in double quotes in the file, for example, `user_id;Username;"Full Name";...`.

    + Headers

            Accept: text/csv
            X-Acrolinx-Auth: your_access_token

+ Response 200 (text/csv)

    + Headers

            Content-Disposition: attachment; filename="acrolinx_users_export_20210514_101248.csv"

    + Body

            user_id;Username;"Full Name";Roles;"Created On";"Last Integration Access";"Checking Frequency";"License Type";"License Status";Department
            "1ba8d14c-7697-4dbd-b370-3d22662e6fe0";termcontribution;"Term Contribution";"Term Contributor";"2021-05-12T15:40:00.876Z";Never;infrequent;builtin;inactive;"R&D"
            "f265a1b7-4fed-4ff3-b2d4-9dc6e29e268f";analyticsReadOnlyUser;"Analytics Read Only User";"Analytics Read-Only User";"2021-05-12T15:40:00.876Z";Never;infrequent;builtin;inactive;"Example Department"
            "4f86f443-e5e3-49c9-93da-cb1f89cd28c7";admin;Adminisztrator;"Super Administrator";"2021-05-12T15:40:00.866Z";Never;infrequent;builtin;inactive;IT
            "05aa0b12-a3b1-455f-9aa6-f48034c191ae";termapiaccess;"Term API Access (builtin)";"Terminology API Access";"2021-05-12T15:40:00.876Z";Never;infrequent;builtin;inactive;
            "394cdff2-bde8-41d2-85cd-34cd3bbca350";termtargetaccess;"Term Target Access (builtin)";"Term Browser User, Term Browser Administrator";"2021-05-12T15:40:00.876Z";Never;infrequent;builtin;inactive;

+ Response 401 (application/json)

        // when the access token in the request is missing or is invalid
        {
            "links": {},
            "error": {
                "detail": "Valid authentication has either not been provided or is insufficient.",
                "type": "auth",
                "title": "Invalid authentication",
                "status": 401
            }
        }

+ Response 403 (application/json)

        // when you don't have the privilege to export users ("UsersAndRoles.editUser")
        {
            "links": {},
            "error": {
                "reference": "64311fe7-2a7e-4e3b-849e-4e9ff8651400",
                "detail": "The user does not have the required privileges to perform the operation.",
                "type": "insufficientPrivileges",
                "title": "Insufficient privileges",
                "status": 403
            }
        }

+ Request Export users with an unsupported media type

    If you enter an unsupported media type in the `Accept` header, for example, `text/html`, the API will return the http status `406 - Not Acceptable`.

    + Headers

            Accept: text/html
            X-Acrolinx-Auth: your_access_token

+ Response 406

        {
            "links": {},
            "error": {
                "reference": "1baade57-4292-49c9-81b8-fdaa815123fb",
                "detail": "An unspecific client error occurred.",
                "type": "client",
                "title": "Not Acceptable",
                "status": 406
            }
        }

## User Bulk Operations [/api/v1/user/bulk]

These APIs let you perform bulk operations. Bulk operations follow the multi-status request and response model.
In this model, the incoming bulk request includes a list of objects that need to be processed (as opposed to using the same API many times). 
The response to the request is `207 Multi-Status`. The response includes a list of `results` for the objects that were processed successfully 
and a list of `errors` for the objects that couldn't be processed.

**Note:** Each API has a limit for bulk requests. User creation is an atomic operation, but the bulk request is nontransactional.

### Create Users in Bulk [POST /api/v1/user/bulk]

**Added in Core Platform version 2021.06**

This API lets you create a list of new users. All user objects follow the requirements and constraints
noted in the Create User API section.

**Note:** You can create up to 100 users per bulk request, the minimum is 1.

+ Request Create Users in Bulk (application/json)

    This request lets you create 5 new users by specifying some basic fields (`username`, `fullName`, `password`) in the request model.

    **Note:** Acrolinx will assign a license type and role automatically. These are typically the license type `named` and the role `Author`.

    + Headers

            X-Acrolinx-Auth: your_access_token

    + Attributes (BulkCreateUser)
    
    + Body

            [
                {
                    "username": "new.user.1",
                    "fullName": "New User 1",
                    "password": "P@ssW0rd12345!"
                },
                {
                    "username": "new.user.2",
                    "fullName": "New User 2",
                    "password": "P@ssW0rd12345!"
                },
                {
                    "username": "new.user.3",
                    "fullName": "New User 3",
                    "password": "P@ssW0rd12345!"
                },
                {
                    "username": "new.user.4",
                    "fullName": "New User 4",
                    "password": "P@ssW0rd12345!"
                },
                {
                    "username": "new.user.5",
                    "fullName": "New User 5",
                    "password": "P@ssW0rd12345!"
                }
            ]
+ Response 207 (application/json)

    + Attributes (BulkResultResponse)

    + Body

            // When all users were successfully created
            {
                "results": [
                    {
                        "status": 201,
                        "id": "c06de3b6-46c3-46d8-a136-afb6501f88e3",
                        "location": "http://tenant.acrolinx.cloud/api/v1/user/c06de3b6-46c3-46d8-a136-afb6501f88e3"
                    },
                    {
                        "status": 201,
                        "id": "3bd446b9-6371-4ecb-a4fb-ebeb01bae9e3",
                        "location": "http://tenant.acrolinx.cloud/api/v1/user/3bd446b9-6371-4ecb-a4fb-ebeb01bae9e3"
                    },
                    {
                        "status": 201,
                        "id": "4d8a94a8-55fe-4ee6-bf67-8f21a335e7da",
                        "location": "http://tenant.acrolinx.cloud/api/v1/user/4d8a94a8-55fe-4ee6-bf67-8f21a335e7da"
                    },
                    {
                        "status": 201,
                        "id": "76d79076-fbf7-4e02-89b5-a9c52d38b5e6",
                        "location": "http://tenant.acrolinx.cloud/api/v1/user/76d79076-fbf7-4e02-89b5-a9c52d38b5e6"
                    },
                    {
                        "status": 201,
                        "id": "a3b18412-4e61-4795-b5c0-4b2fc82f7995",
                        "location": "http://tenant.acrolinx.cloud/api/v1/user/a3b18412-4e61-4795-b5c0-4b2fc82f7995"
                    }
                ],
                "errors": []
            }


            // when 3 users were created successfully but 2 weren't
            {
                "results": [
                    {
                        "status": 201,
                        "id": "c06de3b6-46c3-46d8-a136-afb6501f88e3",
                        "location": "http://tenant.acrolinx.cloud/api/v1/user/c06de3b6-46c3-46d8-a136-afb6501f88e3"
                    },
                    {
                        "status": 201,
                        "id": "3bd446b9-6371-4ecb-a4fb-ebeb01bae9e3",
                        "location": "http://tenant.acrolinx.cloud/api/v1/user/3bd446b9-6371-4ecb-a4fb-ebeb01bae9e3"
                    },
                    {
                        "status": 201,
                        "id": "4d8a94a8-55fe-4ee6-bf67-8f21a335e7da",
                        "location": "http://tenant.acrolinx.cloud/api/v1/user/4d8a94a8-55fe-4ee6-bf67-8f21a335e7da"
                    }
                ],
                "errors": [
                    {
                        "status": 409,
                        "id": "test.user.4",
                        "type": "client",
                        "title": "Conflict",
                        "detail": "Licensing error (Invalid user id (message ID #2): A user with the name 'test.user.1' already exists. Please provide a different user name or spell the user name appropriately.)",
                        "reference": "68327a0f-db3e-459c-91f9-5a3da691a1d1"
                    },
                    {
                        "status": 409,
                        "id": "test.user.5",
                        "type": "client",
                        "title": "Conflict",
                        "detail": "Licensing error (Invalid user id (message ID #2): A user with the name 'test.user.2' already exists. Please provide a different user name or spell the user name appropriately.)",
                        "reference": "4be034f9-c8f3-4465-9117-cde7c1f075ca"
                    }
                ]
            }

+ Response 400 (application/json)

        // when a bulk request is sent with an empty list
        {
            "links": {},
            "error": {
                "reference": "88892611-7955-4a8f-9f5f-71b99b31bdca",
                "detail": "Check the request for invalid values or missing parameters.",
                "type": "validation",
                "title": "Invalid request attributes",
                "validationDetails": [
                    {
                        "title": "Validation error",
                        "constraint": "Size",
                        "detail": "size must be between 1 and 100",
                        "invalidValue": "[]"
                    }
                ],
                "status": 400
            }
        }

        // when a bulk request exceeds the maximum valid limit
        {
            "links": {},
            "error": {
                "reference": "367fedac-e5bb-4229-9405-3fcc425bf1f5",
                "detail": "Check the request for invalid values or missing parameters.",
                "type": "validation",
                "title": "Invalid request attributes",
                "validationDetails": [
                    {
                        "title": "Validation error",
                        "constraint": "Size",
                        "detail": "size must be between 1 and 100",
                        "invalidValue": "[username=test.user.1, username=test.user.2, ... username=test.user.100, username=test.user.101]"
                    }
                ],
                "status": 400
            }
        }

        // when a bulk request includes validation errors such as an empty password 
        {
            "links": {},
            "error": {
                "reference": "241a2429-0f53-49a6-a6af-72aaaf41ad36",
                "detail": "Check the request for invalid values or missing parameters.",
                "type": "validation",
                "title": "Invalid request attributes",
                "validationDetails": [
                    {
                        "title": "Validation error",
                        "constraint": "NotEmpty",
                        "attributePath": "password",
                        "detail": "must not be empty",
                        "invalidValue": ""
                    }
                ],
                "status": 400
            }
        }

        // when a bulk request is sent without a payload body
        {
            "links": {},
            "error": {
                "reference": "82b2e14b-95f8-4789-8ee8-3822c2297a9c",
                "detail": "Check the request for invalid values or missing parameters.",
                "type": "validation",
                "title": "Invalid request attributes",
                "validationDetails": [
                    {
                        "title": "Validation error",
                        "constraint": "NotNull",
                        "detail": "must not be null",
                        "invalidValue": null
                    }
                ],
                "status": 400
            }
        }

+ Response 403 (application/json)

        // when you don't have the privilege to create users
        {
        "links": {},
            "error": {
                "detail": "The user does not have the required privileges to perform the operation.",
                "type": "insufficientPrivileges",
                "title": "Insufficient privileges",
                "status": 403
            }
        }

+ Response 500 (application/json)

        // when there's an unspecified error
        {
            "links": {},
            "error": {
                "reference": "2f17395a-770f-439e-b2b4-65c6c03717db",
                "detail": "An unspecific server error occurred. Details may be found in the Acrolinx log files.",
                "type": "server",
                "title": "Unspecific server error",
                "status": 500
            }
        }


### Request User Information Update in Bulk  [PUT /api/v1/user/bulk/_request_cf_update]

**Added in Core Platform version 2021.12**

This API is the bulk operation for "Request User Information Update" from the "User Commands" group.
It lets you ask multiple users to update their user information.

**Note:** There are currently no limitations on the number of users a client can ask for an information update.

+ Request Ask multiple users to update their user information (application/json)

  + Headers

            X-Acrolinx-Auth: your_access_token

    + Attributes (object)

    + Body

            [
                "1f17395a-770f-439e-b2b4-65c6c03717db",
                "2f17395a-770f-439e-b2b4-65c6c03717db",
                "3f17395a-770f-439e-b2b4-65c6c03717db",
            ]

+ Response 207 (application/json)

    + Attributes (BulkResultResponse)

    + Body

            {
                "results": [
                    {
                        "status": 204,
                        "id": "1f17395a-770f-439e-b2b4-65c6c03717db",
                    },
                    {
                        "status": 204,
                        "id": "2f17395a-770f-439e-b2b4-65c6c03717db",
                    },
                    {
                        "status": 204,
                        "id": "3f17395a-770f-439e-b2b4-65c6c03717db",
                    }
                ],
                "errors": []
            }

+ Response 403 (application/json)

        // when you don't have the neccessary privileges ("UserAndRoles.editUser")
        {
        "links": {},
            "error": {
                "detail": "The user does not have the required privileges to perform the operation.",
                "type": "insufficientPrivileges",
                "title": "Insufficient privileges",
                "status": 403
            }
        }

+ Response 500 (application/json)

        // when there's an unspecified error
        {
            "links": {},
            "error": {
                "reference": "2f17395a-770f-439e-b2b4-65c6c03717db",
                "detail": "An unspecific server error occurred. Details may be found in the Acrolinx log files.",
                "type": "server",
                "title": "Unspecific server error",
                "status": 500
            }
        }

+ Request Error Example - If user ids in the request are invalid or unknown (application/json)

  + Headers

            X-Acrolinx-Auth: your_access_token

    + Attributes (object)

    + Body

            [
                "f265a1b7-4fed-4ff3-b2d4-9dc6e29e268f",
                "no-user-with-this-id-for-sure",
                null
            ]

+ Response 207 (application/json)

    + Attributes (BulkResultResponse)

    + Body

            {
                 "results": [
                     {
                         "status": 204,
                         "id": "f265a1b7-4fed-4ff3-b2d4-9dc6e29e268f"
                     }
                 ],
                 "errors": [
                     {
                         "status": 400,
                         "id": null,
                         "type": "client",
                         "title": "Bad Request",
                         "detail": "The provided uuid is not a valid user id.",
                         "reference": "d18c9c62-faed-4753-b4f4-6a6d6e967d9e"
                     },
                     {
                         "status": 404,
                         "id": "no-user-with-this-id-for-sure",
                         "type": "client",
                         "title": "Not Found",
                         "detail": "User does not exist with the given id.",
                         "reference": "592577df-4526-4eea-a4bb-1628102a063c"
                     }
                 ]
             }

+ Response 403 (application/json)

        // when you don't have the neccessary privileges ("UserAndRoles.editUser")
        {
        "links": {},
            "error": {
                "detail": "The user does not have the required privileges to perform the operation.",
                "type": "insufficientPrivileges",
                "title": "Insufficient privileges",
                "status": 403
            }
        }

+ Response 500 (application/json)

        // when there's an unspecified error
        {
            "links": {},
            "error": {
                "reference": "2f17395a-770f-439e-b2b4-65c6c03717db",
                "detail": "An unspecific server error occurred. Details may be found in the Acrolinx log files.",
                "type": "server",
                "title": "Unspecific server error",
                "status": 500
            }
        }

### Delete Users in Bulk [DELETE /api/v1/user/bulk]

**Added in Core Platform version 2021.12**

This API lets you delete a list of users. All user ids follow the requirements and constraints
noted in the "Delete User API" section.

**Note:** You can delete up to 100 users per bulk request, the minimum is 1.

+ Request Delete users in bulk (application/json)

    This request lets you delete 5 users by specifying user UUIDs in the request object.

    Example when all users were successfully deleted

    + Headers

            X-Acrolinx-Auth: your_access_token

    + Body

            [
                "d6601a5b-c74e-4753-8d7a-4a7d15e71149",
                "d7b6d898-79b2-4a8b-9afd-760fdda9c921",
                "bb284474-e107-413e-9c15-d813ed7209e9",
                "c4eba54b-4cb6-4045-85f1-88e72fd9be6f",
                "b08309c7-87ee-4270-8d94-de5a916d24be"
            ]

+ Response 207 (application/json)

    + Attributes (BulkResultResponse)

    + Body

            {
                "results": [
                    {
                        "status": 204,
                        "id": "d6601a5b-c74e-4753-8d7a-4a7d15e71149"
                    },
                    {
                        "status": 204,
                        "id": "d7b6d898-79b2-4a8b-9afd-760fdda9c921"
                    },
                    {
                        "status": 204,
                        "id": "bb284474-e107-413e-9c15-d813ed7209e9"
                    },
                    {
                        "status": 204,
                        "id": "c4eba54b-4cb6-4045-85f1-88e72fd9be6f"
                    },
                    {
                        "status": 204,
                        "id": "b08309c7-87ee-4270-8d94-de5a916d24be"
                    }
                ],
                "errors": []
                }

+ Request Example with users that can't be deleted (application/json)

  + Headers

            X-Acrolinx-Auth: your_access_token

    + Attributes (object)

    + Body

            [
                "d6601a5b-c74e-4753-8d7a-4a7d15e71149",
                "d7b6d898-79b2-4a8b-9afd-760fdda9c921",
                "bb284474-e107-413e-9c15-d813ed7209e9",
                "c4eba54b-4cb6-4045-85f1-88e72fd9be6f",
                "b08309c7-87ee-4270-8d94-de5a916d24be"
            ]

+ Response 207 (application/json)

    + Attributes (BulkResultResponse)

    + Body

            {
                "results": [
                    {
                        "status": 204,
                        "id": "d6601a5b-c74e-4753-8d7a-4a7d15e71149"
                    },
                    {
                        "status": 204,
                        "id": "d7b6d898-79b2-4a8b-9afd-760fdda9c921"
                    }
                ],
                "errors": [
                    {
                        "status": 409,
                        "id": "b08309c7-87ee-4270-8d94-de5a916d24be",
                        "type": "client",
                        "title": "Conflict",
                        "detail": "Cannot delete own account",
                        "reference": "06bc308c-c65d-45eb-a626-a9cc5908798c"
                    },
                    {
                        "status": 409,
                        "id": "d6601a5b-c74e-4753-8d7a-4a7d15e71149",
                        "type": "client",
                        "title": "Conflict",
                        "detail": "Built-in user \"admin (admin) \" cannot be deleted",
                        "reference": "b08309c7-87ee-4270-8d94-de5a916d24be"
                    },
                    {
                        "status": 404,
                        "id": "d7b6d898-79b2-4a8b-9afd-760fdda9c921",
                        "type": "client",
                        "title": "Not Found",
                        "detail": "An unspecific client error occurred.",
                        "reference": "c0c67650-4fd6-42a4-9300-1f9431274912"
                    }
                ]
            }

+ Response 400 (application/json)

        // when a bulk delete request is sent with an empty list
        {
            "links": {},
            "error": {
                "reference": "ea0ef815-435b-4311-8937-c32ece0c7cc4",
                "detail": "Check the request for invalid values or missing parameters.",
                "type": "validation",
                "title": "Invalid request attributes",
                "validationDetails": [
                    {
                        "title": "Validation error",
                        "constraint": "Size",
                        "detail": "size must be between 1 and 100",
                        "invalidValue": "[]"
                    }
                ],
                "status": 400
            }
        }

        // when a bulk delete request exceeds the maximum valid limit
        {
            "links": {},
            "error": {
                "reference": "a2616dcb-1009-47c6-a6cd-34fe71776dd5",
                "detail": "Check the request for invalid values or missing parameters.",
                "type": "validation",
                "title": "Invalid request attributes",
                "validationDetails": [
                    {
                        "title": "Validation error",
                        "constraint": "Size",
                        "detail": "size must be between 1 and 100",
                        "invalidValue": "[d6601a5b-c74e-4753-8d7a-4a7d15e71149, d7b6d898-79b2-4a8b-9afd-760fdda9c921, ...]"
                    }
                ],
                "status": 400
            }
        }

        // when a bulk request is sent without a payload body
        {
            "links": {},
            "error": {
                    "reference": "f36cbe4d-0ebb-44c1-9771-2555cb17f025",
                    "detail": "Check the request for invalid values or missing parameters.",
                    "type": "validation",
                    "title": "Invalid request attributes",
                    "validationDetails": [
                        {
                            "title": "Validation error",
                            "constraint": "NotNull",
                            "detail": "must not be null",
                            "invalidValue": null
                        }
                ],
                "status": 400
            }
        }

+ Request Example with invalid or unknown user ids in request (application/json)

  + Headers

            X-Acrolinx-Auth: your_access_token

    + Attributes (object)

    + Body

            [
                "f265a1b7-4fed-4ff3-b2d4-9dc6e29e268f",
                "no-user-with-this-id-for-sure",
                null
            ]

+ Response 207 (application/json)

    + Attributes (BulkResultResponse)

    + Body

            {
                "results": [
                    {
                        "status": 204,
                        "id": "33b5b2e3-6870-4ecb-92f9-ac496a9ac2c3"
                    }
                ],
                "errors": [
                    {
                        "status": 404,
                        "id": "no-user-with-this-id-for-sure",
                        "type": "client",
                        "title": "Not Found",
                        "detail": "HTTP 404 Not Found",
                        "reference": "8aafe860-8fa7-4f5f-89c6-40dda1c444c4"
                    },
                    {
                        "status": 400,
                        "id": null,
                        "type": "client",
                        "title": "Bad Request",
                        "detail": "The provided uuid is not a valid user id.",
                        "reference": "cc3c4907-5fa2-40e9-988a-3623a5c358d7"
                    }
                ]
            }

+ Response 403 (application/json)

        // when you don't have the privilege to delete users
        {
        "links": {},
            "error": {
                "detail": "The user does not have the required privileges to perform the operation.",
                "type": "insufficientPrivileges",
                "title": "Insufficient privileges",
                "status": 403
            }
        }

+ Response 500 (application/json)

        // when there's an unspecified error
        {
            "links": {},
            "error": {
                "reference": "2f17395a-770f-439e-b2b4-65c6c03717db",
                "detail": "An unspecific server error occurred. Details may be found in the Acrolinx log files.",
                "type": "server",
                "title": "Unspecific server error",
                "status": 500
            }
        }

# Group Custom Fields API

**Available since Core Platform version 2022.03**

This API lets you set and view user custom fields.

**Note:** You only need a valid access token for this request (no special privileges needed).

## Custom Fields [/api/v1/custom-fields/user]

### Get Custom Fields [GET]

This shows a list of your user custom fields.

+ Request Get Custom Fields (application/json)

    + Headers

            X-Acrolinx-Auth: your_access_token

+ Response 200 (application/json)

    + Attributes (object)
        + links (object)
        + data (array[CustomField], fixed-type)

    + Body

            {
                "links": {},
                "data": [
                    {
                        "key": "key1",
                        "displayName": "displayName1",
                        "inputType": "required",
                        "type": "list",
                        "possibleValues": [
                            "",
                            "possibleValue1",
                            "possibleValue2"
                        ]
                    },
                    {
                        "key": "key2",
                        "displayName": "displayName2",
                        "inputType": "optional",
                        "type": "text"
                    }
                ]
            }

+ Response 401 (application/json)

        // when the access token in the request is missing or invalid
        {
            "links": {},
            "error": {
                "detail": "Valid authentication has either not been provided or is insufficient.",
                "type": "auth",
                "title": "Invalid authentication",
                "status": 401
            }
        }

# Group Licenses API

**Available since Core Platform version 2021.06**

License information is provided by the following set of APIs.

## Statistics [/api/v1/licenses/statistics]

### Get License Statistics for Users [GET]

Returns license statistics for the running instance showing the sum of license types `named` and `concurrent`.
The following conditions are checked for all users in order to qualify them to be included in the calculation:

- Must be one of the following License Types `named` or `concurrent`
- For `named` license they must be active it must satisfy the following
    - Be activated for `Checking` session type
    - Must not be free of charge
- All other `named` licensed users will be considered `inactive`
- All `concurrent` licensed users will be `existing` if a license exists

**Note:** Built-in users such as `Admin`, `TermBrowser`, `TermTargetAccess`, `TermContribution`, `TermApiAccess`, and `AnalyticsReadOnlyUser`
are included in the license statistics along with all other users, but they are subject to the conditions above.

Details of the statistics attributes in the table below:

| License Type | Sum Attribute | Description                   |
|:-------------|---------------|-------------------------------|
| `named`      | licensed      | Total number of licenses      |
| `named`      | active        | Total active licenses         |
| `named`      | inactive      | Total inactive licenses       |
| `named`      | available     | Total available licenses (`licensed` minus `active`) |
| `concurrent` | licensed      | Total number of licenses      |
| `concurrent` | existing      | Total number of licenses used |

**Note:**
- Must have `UserAndRoles.editUser` privileges to perform this request
- Concurrent license numbers may be seen (non-zero) if a license has been configured for both `named` and `concurrent` user limits

+ Response 200 (application/json)

    + Attributes (object)
        + links (object)
        + data(LicenseStatistics)

    + Body

            {
                "links": {},
                "data": {
                    "named": {
                        "licensed": 150,
                        "active": 58,
                        "inactive": 23,
                        "available": 92
                    },
                    "concurrent": {
                        "licensed": 50,
                        "existing": 10
                    }
                }
            }

+ Response 401 (application/json)

        // When the access token is missing or is invalid in the request
        {
            "links": {},
            "error": {
                "detail": "Valid authentication has either not been provided or is insufficient.",
                "type": "auth",
                "title": "Invalid authentication",
                "status": 401
            }
        }

+ Response 403 (application/json)

        // when there is insufficient privileges to fetch license statistics
        {
            "links": {},
            "error": {
                "detail": "The user does not have the required privileges to perform the operation.",
                "type": "insufficientPrivileges",
                "title": "Insufficient privileges",
                "status": 403
            }
        }

# Group Role API

**Available since Core Platform version 2021.05**

In the Role API, Acrolinx defines a role as an entity that has an id, a name and list of privileges, and information on whether this role is a default role. 
You can use roles to group sets of privileges and assign them to different users.
Mark roles as default if you want to automatically assign at least one default role to all new users.

To read more about role-based access control in Acrolinx, see [User Roles](https://support.acrolinx.com/hc/en-us/articles/10210994316562-User-Roles).

**Note:** Before you get started with the Role API, be sure to review the [authentication and authorization](https://acrolinxapi.docs.apiary.io/#introduction/authentication-and-authorization) requirements. 

## Roles [/api/v1/roles/]

### Get All Roles [GET]

Returns a list of all roles including the associated privileges.

+ Request

    + Headers

            X-Acrolinx-Auth: your_access_token

+ Response 200 (application/json)

    + Attributes (object)
        + links (object)
        + data (array[Role])
    
    + Body

            {
                "links": {},
                "data": [
                    {
                        "id": "fdcd7fc6-9715-42f8-a947-88812bc02b2a",
                        "name": "Term Browser User",
                        "privileges": [
                            "Terminology.read",
                            "Dashboard.logon",
                            "Termbrowser.logon"
                        ],
                        "default": false
                    },
                    {
                        "id": "8c66c4e2-174a-4f77-b8d4-71bfa9ca4d2e",
                        "name": "Author",
                        "privileges": [
                            "CheckingAndClients.checkingApplications",
                            "CheckingAndClients.downloadReports"
                        ],
                        "default": true
                    },
                    {
                        "id": "d66d4d00-3381-11e0-bc8e-0800200c9a66",
                        "name": "Term Contributor",
                        "privileges": [
                            "TermContribution.contributeTerms",
                            "TermContribution.commentTerms"
                        ],
                        "default": false
                    },
                    {
                        "id": "6a0ebe93-f735-4b08-b6f2-66f7ecc70190",
                        "name": "Term Browser Administrator",
                        "privileges": [
                            "Terminology.read",
                            "Dashboard.logon"
                        ],
                        "default": false
                    },
                    {
                        "id": "898a7c32-2c39-4cde-becb-16f22243e9b8",
                        "name": "Analytics Read-Only User",
                        "privileges": [
                            "Reporting.read",
                            "Dashboard.logon",
                            "CheckingAndClients.downloadReports"
                        ],
                        "default": false
                    },
                    {
                        "id": "bc5c91f3-fae1-49f7-8d60-d325077c6ef9",
                        "name": "Super Administrator",
                        "privileges": [
                            "UserAndRoles.read",
                            "Terminology.read",
                            "LinguisticConfiguration.configureAndDeployRules",
                            "LinguisticConfiguration.configureAndDeployReuse",
                            "CheckingAndClients.submitDictionaryEntry",
                            "CheckingAndClients.editPluginSegmentation",
                            "CheckingAndClients.terminologyApplications",
                            "TermContribution.contributeTerms",
                            "Reporting.administration",
                            "Servers.monitoring",
                            "Terminology.export",
                            "Terminology.edit",
                            "CheckingAndClients.checkingApplications",
                            "Terminology.undump",
                            "Servers.editNotification",
                            "CheckingAndClients.reuseApplications",
                            "CheckingAndClients.runTermHarvesting",
                            "TermContribution.commentTerms",
                            "Servers.downloadSupportPackage",
                            "LinguisticConfiguration.tuneResources",
                            "LinguisticConfiguration.reloadLanguageConfiguration",
                            "Terminology.customize",
                            "Reporting.create",
                            "LinguisticConfiguration.configureAndDeployTerminology",
                            "Servers.overlay",
                            "Terminology.dump",
                            "UserAndRoles.setApiTokensForOthers",
                            "Reporting.read",
                            "CheckingAndClients.editCheckingProfiles",
                            "Servers.readLicense",
                            "TermContribution.removeCommentTerms",
                            "ReuseManagement.edit",
                            "Dashboard.logon",
                            "UserAndRoles.editUser",
                            "Servers.editLicense",
                            "LinguisticConfiguration.editTargets",
                            "Termbrowser.logon",
                            "Servers.downloadLogs",
                            "UserAndRoles.deleteSessions",
                            "Terminology.import",
                            "Servers.capture",
                            "Servers.list",
                            "CheckingAndClients.downloadReports",
                            "Servers.restart",
                            "Terminology.termbrowserAdmin",
                            "ReuseManagement.read",
                            "Terminology.statusChange",
                            "CheckingAndClients.accessExtractedContent"
                        ],
                        "default": false
                    }
                ]
            }

+ Response 401 (application/json)

        // when the access token in the request is missing or invalid
        {
            "links": {},
            "error": {
                "detail": "Valid authentication has either not been provided or is insufficient.",
                "type": "auth",
                "title": "Invalid authentication",
                "status": 401
            }
        }

+ Response 403 (application/json)

        // when you don't have the privilege to view users and roles ("UserAndRoles.read")
        {
        "links": {},
            "error": {
                "reference": "f92270f4-ffe8-4104-87d5-ca457fa17cb7",
                "detail": "The user does not have the required privileges to perform the operation.",
                "type": "insufficientPrivileges",
                "title": "Insufficient privileges",
                "status": 403
            }
        }

## Privileges [/api/v1/roles/privileges]

Privileges determine if a user can perform an action via the API or Acrolinx Dashboard.

### Get All Privileges [GET]

This returns a list of all supported privileges.

**Note:** Depending on your Acrolinx version, the example response may look different than the response that you get for your supported privileges. 
In newer platform releases, there are rare instances where privileges might be introduced or removed. 
To find out which privileges come with your installation, submit this request and compare it to the example response.  

+ Request

    + Headers

            X-Acrolinx-Auth: your_access_token

+ Response 200 (application/json)

    + Attributes (object)
        + links (object)
        + data (array[string])

    + Body

            {
                "links": {},
                "data": [
                    "CheckingAndClients.accessExtractedContent",
                    "CheckingAndClients.checkingApplications",
                    "CheckingAndClients.downloadReports",
                    "CheckingAndClients.editCheckingProfiles",
                    "CheckingAndClients.editPluginSegmentation",
                    "CheckingAndClients.reuseApplications",
                    "CheckingAndClients.runTermHarvesting",
                    "CheckingAndClients.submitDictionaryEntry",
                    "CheckingAndClients.terminologyApplications",
                    "Dashboard.logon",
                    "LinguisticConfiguration.configureAndDeployReuse",
                    "LinguisticConfiguration.configureAndDeployRules",
                    "LinguisticConfiguration.configureAndDeployTerminology",
                    "LinguisticConfiguration.editTargets",
                    "LinguisticConfiguration.reloadLanguageConfiguration",
                    "LinguisticConfiguration.tuneResources",
                    "Reporting.administration",
                    "Reporting.create",
                    "Reporting.read",
                    "ReuseManagement.edit",
                    "ReuseManagement.read",
                    "Servers.capture",
                    "Servers.downloadLogs",
                    "Servers.downloadSupportPackage",
                    "Servers.editLicense",
                    "Servers.editNotification",
                    "Servers.list",
                    "Servers.monitoring",
                    "Servers.overlay",
                    "Servers.readLicense",
                    "Servers.restart",
                    "TermContribution.commentTerms",
                    "TermContribution.contributeTerms",
                    "TermContribution.removeCommentTerms",
                    "Termbrowser.logon",
                    "Terminology.customize",
                    "Terminology.dump",
                    "Terminology.edit",
                    "Terminology.export",
                    "Terminology.import",
                    "Terminology.read",
                    "Terminology.statusChange",
                    "Terminology.termbrowserAdmin",
                    "Terminology.undump",
                    "UserAndRoles.deleteSessions",
                    "UserAndRoles.editUser",
                    "UserAndRoles.read",
                    "UserAndRoles.setApiTokensForOthers"
                ]
            }

+ Response 401 (application/json)

        // when the access token in the request is missing or invalid
        {
            "links": {},
            "error": {
                "detail": "Valid authentication has either not been provided or is insufficient.",
                "type": "auth",
                "title": "Invalid authentication",
                "status": 401
            }
        }

+ Response 403 (application/json)

        // when you don't have the privilege to view users and roles ("UserAndRoles.read")
        {
        "links": {},
            "error": {
                "reference": "f92270f4-ffe8-4104-87d5-ca457fa17cb7",
                "detail": "The user does not have the required privileges to perform the operation.",
                "type": "insufficientPrivileges",
                "title": "Insufficient privileges",
                "status": 403
            }
        }

## Role [/api/v1/roles]

### Create Roles [POST]

This lets you add new roles.

**Note:**
- The name needs to be unique and must be between 1 and 254 characters.
- A role needs to have at least one privilege assigned.
- Existing privileges must be referenced.


+ Request Create a role (application/json)

    + Headers

            X-Acrolinx-Auth: your_access_token

    + Attributes (CreateOrUpdateRole)

    + Body

            {
                "name": "My new role",
                "privileges": [
                    "Dashboard.logon"
                ]
            }
    
+ Response 201 (application/json)

    + Attributes (object)
        + links (object)
        + data (Role)

    + Body

            {
                "links": {},
                "data": {
                    "id": "f608876c-a943-4ad2-82c1-e59df943ce41",
                    "name": "My new role",
                    "privileges": [
                        "Dashboard.logon"
                    ],
                    "default": false
                }
            }

+ Response 400 (application/json)

            // when an empty name was provided or the name provided is longer than 254 characters
            {
                "links": {},
                "error": {
                    "reference": "357a24b5-eb48-45c3-9527-9718506e6e10",
                    "detail": "Check the request for invalid values or missing parameters.",
                    "type": "validation",
                    "title": "Invalid request attributes",
                    "validationDetails": [
                        {
                            "title": "Validation error",
                            "constraint": "NotBlank",
                            "attributePath": "name",
                            "detail": "must not be blank",
                            "invalidValue": ""
                        },
                        {
                            "title": "Validation error",
                            "constraint": "Size",
                            "attributePath": "name",
                            "detail": "size must be between 1 and 254",
                            "invalidValue": ""
                        }
                    ],
                    "status": 400
                }
            }

+ Response 400 (application/json)

            // when empty privileges were provided 
            {
                "links": {},
                "error": {
                    "reference": "55973236-1b1a-4d76-a62d-360f5d9a1e29",
                    "detail": "Check the request for invalid values or missing parameters.",
                    "type": "validation",
                    "title": "Invalid request attributes",
                    "validationDetails": [
                        {
                            "title": "Validation error",
                            "constraint": "NotEmpty",
                            "attributePath": "privileges",
                            "detail": "must not be empty",
                            "invalidValue": "[]"
                        }
                    ],
                    "status": 400
                }
            }

+ Response 400 (application/json)

            // when privilege keys that don't exist were referenced
            {
                "links": {},
                "error": {
                    "reference": "89f517a8-7d8e-4579-8879-5c6bbdd8fd5a",
                    "detail": "Check the request for invalid values or missing parameters.",
                    "type": "validation",
                    "title": "Invalid request attributes",
                    "validationDetails": [
                        {
                            "title": "Validation error",
                            "constraint": "Unknown privileges: My.privilege",
                            "attributePath": "privileges",
                            "detail": "Unknown privileges: My.privilege",
                            "invalidValue": "[My.privilege]"
                        }
                    ],
                    "status": 400
                }
            }

+ Response 401 (application/json)

        // when the access token in the request is missing or invalid
        {
            "links": {},
            "error": {
                "detail": "Valid authentication has either not been provided or is insufficient.",
                "type": "auth",
                "title": "Invalid authentication",
                "status": 401
            }
        }

+ Response 403 (application/json)

        // when you don't have the privilege to edit roles
        {
        "links": {},
            "error": {
                "reference": "f92270f4-ffe8-4104-87d5-ca457fa17cb7",
                "detail": "The user does not have the required privileges to perform the operation.",
                "type": "insufficientPrivileges",
                "title": "Insufficient privileges",
                "status": 403
            }
        }

+ Response 409 (application/json)

        // when a role with the same name already exists
        {
            "links": {},
            "error": {
                "reference": "f3c9e0d7-1c86-4da3-916f-617d839d2da5",
                "detail": "A role with name 'My new role' already exists.",
                "type": "client",
                "title": "Conflict",
                "status": 409
            }
        }

+ Request Create a default role (application/json)

    + Headers

            X-Acrolinx-Auth: your_access_token

    + Attributes (CreateOrUpdateRole)

    + Body

            {
                "name": "This is Default",
                "privileges": [
                    "Dashboard.logon"
                ],
                "default": true
            }
    
+ Response 201 (application/json)

    + Attributes (object)
        + links (object)
        + data (Role)

    + Body

            {
                "links": {},
                "data": {
                    "id": "f608876c-a943-4ad2-82c1-e59df943ce42",
                    "name": "This is Default",
                    "privileges": [
                        "Dashboard.logon"
                    ],
                    "default": true
                }
            }

+ Response 400 (application/json)

            // when an empty name was provided or the name provided is longer than 254 characters
            {
                "links": {},
                "error": {
                    "reference": "357a24b5-eb48-45c3-9527-9718506e6e10",
                    "detail": "Check the request for invalid values or missing parameters.",
                    "type": "validation",
                    "title": "Invalid request attributes",
                    "validationDetails": [
                        {
                            "title": "Validation error",
                            "constraint": "NotBlank",
                            "attributePath": "name",
                            "detail": "must not be blank",
                            "invalidValue": ""
                        },
                        {
                            "title": "Validation error",
                            "constraint": "Size",
                            "attributePath": "name",
                            "detail": "size must be between 1 and 254",
                            "invalidValue": ""
                        }
                    ],
                    "status": 400
                }
            }

+ Response 400 (application/json)

            // when empty privileges were provided 
            {
                "links": {},
                "error": {
                    "reference": "55973236-1b1a-4d76-a62d-360f5d9a1e29",
                    "detail": "Check the request for invalid values or missing parameters.",
                    "type": "validation",
                    "title": "Invalid request attributes",
                    "validationDetails": [
                        {
                            "title": "Validation error",
                            "constraint": "NotEmpty",
                            "attributePath": "privileges",
                            "detail": "must not be empty",
                            "invalidValue": "[]"
                        }
                    ],
                    "status": 400
                }
            }

+ Response 400 (application/json)

            // when privilege keys that don't exist were referenced
            {
                "links": {},
                "error": {
                    "reference": "89f517a8-7d8e-4579-8879-5c6bbdd8fd5a",
                    "detail": "Check the request for invalid values or missing parameters.",
                    "type": "validation",
                    "title": "Invalid request attributes",
                    "validationDetails": [
                        {
                            "title": "Validation error",
                            "constraint": "Unknown privileges: My.privilege",
                            "attributePath": "privileges",
                            "detail": "Unknown privileges: My.privilege",
                            "invalidValue": "[My.privilege]"
                        }
                    ],
                    "status": 400
                }
            }

+ Response 401 (application/json)

        // when the access token in the request is missing or invalid
        {
            "links": {},
            "error": {
                "detail": "Valid authentication has either not been provided or is insufficient.",
                "type": "auth",
                "title": "Invalid authentication",
                "status": 401
            }
        }

+ Response 403 (application/json)

        // when you don't have the privilege to edit roles
        {
        "links": {},
            "error": {
                "reference": "f92270f4-ffe8-4104-87d5-ca457fa17cb7",
                "detail": "The user does not have the required privileges to perform the operation.",
                "type": "insufficientPrivileges",
                "title": "Insufficient privileges",
                "status": 403
            }
        }

+ Response 409 (application/json)

        // when a role with the same name already exists
        {
            "links": {},
            "error": {
                "reference": "f3c9e0d7-1c86-4da3-916f-617d839d2da5",
                "detail": "A role with name 'My new role' already exists.",
                "type": "client",
                "title": "Conflict",
                "status": 409
            }
        }

### Get a Role [GET /api/v1/roles/{id}]

This returns a role that was identified by its *id* in the database.

+ Parameters
    + id: `f608876c-a943-4ad2-82c1-e59df943ce41` (required, string) - UUID of the role, unique identifier

+ Request

    + Headers

            X-Acrolinx-Auth: your_access_token

+ Response 200 (application/json)

    + Attributes (object)
        + links (object)
        + data (Role)

    + Body

            {
                "links": {},
                "data": {
                    "id": "f608876c-a943-4ad2-82c1-e59df943ce41",
                    "name": "ExampleRole",
                    "privileges": [
                        "Dashboard.logon"
                    ],
                    "default": false
                }
            }

+ Response 403 (application/json)

        // when the user doesn't have the privilege to view roles
        {
        "links": {},
            "error": {
                "reference": "f92270f4-ffe8-4104-87d5-ca457fa17cb7",
                "detail": "The user does not have the required privileges to perform the operation.",
                "type": "insufficientPrivileges",
                "title": "Insufficient privileges",
                "status": 403
            }
        }

+ Response 404 (application/json)

        // when the specified role ID can't be found
        {
        "links": {},
            "error": {
                "reference": "9396654f-08b2-461d-80f9-d8b492786186",
                "detail": "An unspecific client error occurred.",
                "type": "client",
                "title": "Not Found",
                "status": 404
            }
        }

### Update a Role [PUT /api/v1/roles/{id}]

This lets you update a role that was identified by its *id* in the database.

**Note:** 
- To update roles, you need the privilege `UserAndRoles.editUser`.
- You can't edit the preconfigured roles!
    - Acrolinx comes with a number of preconfigured roles that are common in many organizations that use Acrolinx. 
- You can use one request to update role attributes individually or completely. The request will ignore missing attributes or attributes with `null` values.

+ Parameters
    + id: `f608876c-a943-4ad2-82c1-e59df943ce41` (required, string) - UUID of the role, unique identifier

+ Request Update entire model (application/json)

    You can use one request to update all attributes of a role.

    **Note:** Check the other request examples to see how to update individual attributes and validations.

    + Headers

            X-Acrolinx-Auth: your_access_token

    + Attributes (CreateOrUpdateRole)

    + Body

            {
                "name": "Preferred name",
                "privileges": [
                    "Dashboard.logon"
                ],
                "default": false
            }
    
+ Response 200 (application/json)

    + Attributes (object)
        + links (object)
        + data (Role)

    + Body

            {
                "links": {},
                "data": {
                    "id": "f608876c-a943-4ad2-82c1-e59df943ce41",
                    "name": "Preferred name",
                    "privileges": [
                        "Dashboard.logon"
                    ],
                    "default": false
                }
            }

+ Response 403 (application/json)

        // when you don't have the privilege to edit roles
        {
        "links": {},
            "error": {
                "reference": "f92270f4-ffe8-4104-87d5-ca457fa17cb7",
                "detail": "The user does not have the required privileges to perform the operation.",
                "type": "insufficientPrivileges",
                "title": "Insufficient privileges",
                "status": 403
            }
        }

+ Response 404 (application/json)

        // when the role couldn't be identified by its *id* in the database
        {
        "links": {},
            "error": {
                "reference": "5caccf73-faa9-4176-b931-8869392a2c1b",
                "detail": "An unspecific client error occurred.",
                "type": "client",
                "title": "Not Found",
                "status": 404
            }
        }


+ Request Update role name (application/json)

    You can update the name of a role.

    In this example, the name will be changed for the role `ExampleRole`, which was identified by its *id* in the database.

    **Note:**
    - The name needs to be unique and must be between 1 and 254 characters.

    + Headers

            X-Acrolinx-Auth: your_access_token

    + Attributes (object)
        + name (string, required)

    + Body

            {
                "name": "Preferred name"
            }
    
+ Response 200 (application/json)

    + Attributes (object)
        + links (object)
        + data (Role)

    + Body

            {
                "links": {},
                "data": {
                    "id": "f608876c-a943-4ad2-82c1-e59df943ce41",
                    "name": "Preferred name",
                    "privileges": [
                        "Dashboard.logon"
                    ],
                    "default": false
                }
            }

+ Response 400 (application/json)

            // when an empty name was provided or the name provided is longer than 254 characters
            {
                "links": {},
                "error": {
                    "reference": "b22b60a5-6ee4-4f4d-90fb-8a64ae4e697a",
                    "detail": "Check the request for invalid values or missing parameters.",
                    "type": "validation",
                    "title": "Invalid request attributes",
                    "validationDetails": [
                        {
                            "title": "Validation error",
                            "constraint": "Size",
                            "attributePath": "name",
                            "detail": "size must be between 1 and 254",
                            "invalidValue": ""
                        },
                        {
                            "title": "Validation error",
                            "constraint": "NotBlank",
                            "attributePath": "name",
                            "detail": "must not be blank",
                            "invalidValue": ""
                        }
                    ],
                    "status": 400
                }
            }

+ Response 401 (application/json)

        // when the access token in the request is missing or invalid
        {
            "links": {},
            "error": {
                "detail": "Valid authentication has either not been provided or is insufficient.",
                "type": "auth",
                "title": "Invalid authentication",
                "status": 401
            }
        }

+ Response 403 (application/json)

        // when the user doesn't have the privilege to edit roles
        {
        "links": {},
            "error": {
                "reference": "f92270f4-ffe8-4104-87d5-ca457fa17cb7",
                "detail": "The user does not have the required privileges to perform the operation.",
                "type": "insufficientPrivileges",
                "title": "Insufficient privileges",
                "status": 403
            }
        }

+ Response 404 (application/json)

        // when the role couldn't be identified by its *id* in the database
        {
        "links": {},
            "error": {
                "reference": "5caccf73-faa9-4176-b931-8869392a2c1b",
                "detail": "An unspecific client error occurred.",
                "type": "client",
                "title": "Not Found",
                "status": 404
            }
        }

+ Response 409 (application/json)

        // when you update a preconfigured built-in role
        {
            "links": {},
            "error": {
                "reference": "677ece6e-d34a-4148-a05a-6b69fa8ab16e",
                "detail": "Role 'Term Browser User(uuid=fdcd7fc6-9715-42f8-a947-88812bc02b2a privileges=[Termbrowser.logon [TERM_BROWSER] implies [Terminology.read [TERM_MANAGEMENT] implies [Dashboard.logon, Terminology.downloadImages [TERM_MANAGEMENT]]]])' is an immutable built-in role and cannot be changed.",
                "type": "client",
                "title": "Conflict",
                "status": 409
            }
        }

        // when a role with the same name already exists
        {
            "links": {},
            "error": {
                "reference": "f3c9e0d7-1c86-4da3-916f-617d839d2da5",
                "detail": "A role with name 'Preferred name' already exists.",
                "type": "client",
                "title": "Conflict",
                "status": 409
            }
        }


+ Request Update the privileges that belong to a role (application/json)

    You can use roles to update the privileges that are assigned to a user.

    In this example, the `UserAndRoles.read` privilege will be assigned to the role `ExampleRole`. The role was identified by its *id* in the database. 

    **Note:**
    - A role needs to have at least one privilege assigned.
    - You can add/remove privilege(s). The server completely replaces every privilege.
    - There might be interdependencies with other privileges.
    - Any changes to a role are automatically inherited by all users with that particular role.
    - You need to reference existing privileges. See [Get All Privileges](###Get_all_privileges).

    **Warning:** This action **permanently** updates the privileges that belong to a role. 
    When you change the privileges for a role, all users with that role will get the updated set of privileges.

    + Headers

            X-Acrolinx-Auth: your_access_token

    + Attributes (object)
        + privileges (array[string], required)

    + Body

            {
                "privileges": [
                    "Dashboard.logon",
                    "UserAndRoles.read"
                ]
            }

+ Response 200 (application/json)

    + Attributes (object)
        + links (object)
        + data (Role)

    + Body

            {
                "links": {},
                "data": {
                    "id": "f608876c-a943-4ad2-82c1-e59df943ce41",
                    "name": "ExampleRole",
                    "privileges": [
                        "UserAndRoles.read",
                        "Dashboard.logon"
                    ],
                    "default": false
                }
            }

+ Response 400 (application/json)

        // when an unknown privilege is provided in the request ("Example.privilege")
        {
            "links": {},
            "error": {
                "reference": "bc9b2e2f-1130-4ab5-8127-d9faf7f09485",
                "detail": "Check the request for invalid values or missing parameters.",
                "type": "validation",
                "title": "Invalid request attributes",
                "validationDetails": [
                    {
                        "title": "Validation error",
                        "constraint": "Unknown privileges: Example.privilege",
                        "attributePath": "privileges",
                        "detail": "Unknown privileges: Example.privilege",
                        "invalidValue": "[Dashboard.logon, UserAndRoles.read, Example.privilege]"
                    }
                ],
                "status": 400
            }
        }

+ Response 400 (application/json)

        // when empty privileges are provided in the request
        {
            "links": {},
            "error": {
                "reference": "58629cdc-3102-4ff2-973b-68eb82ef2ea0",
                "detail": "Check the request for invalid values or missing parameters.",
                "type": "validation",
                "title": "Invalid request attributes",
                "validationDetails": [
                    {
                        "title": "Validation error",
                        "constraint": "NotEmpty",
                        "attributePath": "privileges",
                        "detail": "must not be empty",
                        "invalidValue": "[]"
                    }
                ],
                "status": 400
            }
        }

+ Response 401 (application/json)

        // when the access token in the request is missing or invalid
        {
            "links": {},
            "error": {
                "detail": "Valid authentication has either not been provided or is insufficient.",
                "type": "auth",
                "title": "Invalid authentication",
                "status": 401
            }
        }

+ Response 403 (application/json)

        // when you don't have the privilege to edit roles
        {
        "links": {},
            "error": {
                "reference": "f92270f4-ffe8-4104-87d5-ca457fa17cb7",
                "detail": "The user does not have the required privileges to perform the operation.",
                "type": "insufficientPrivileges",
                "title": "Insufficient privileges",
                "status": 403
            }
        }

+ Response 404 (application/json)

        // when the role couldn't be identified by its *id* in the database
        {
        "links": {},
            "error": {
                "reference": "5caccf73-faa9-4176-b931-8869392a2c1b",
                "detail": "An unspecific client error occurred.",
                "type": "client",
                "title": "Not Found",
                "status": 404
            }
        }

+ Response 409 (application/json)

        // when you update a preconfigured built-in role
        {
            "links": {},
            "error": {
                "reference": "677ece6e-d34a-4148-a05a-6b69fa8ab16e",
                "detail": "Role 'Term Browser User(uuid=fdcd7fc6-9715-42f8-a947-88812bc02b2a privileges=[Termbrowser.logon [TERM_BROWSER] implies [Terminology.read [TERM_MANAGEMENT] implies [Dashboard.logon, Terminology.downloadImages [TERM_MANAGEMENT]]]])' is an immutable built-in role and cannot be changed.",
                "type": "client",
                "title": "Conflict",
                "status": 409
            }
        }

+ Request Add a default role (application/json)

    You may want to add a default role so that you can automatically assign it to newly created users.

    In this example, the `default` attribute will be updated for the role `ExampleRole`. The role was identified by its *id* in the database.

    **Note:**
    - You can have multiple default roles.

    + Headers

            X-Acrolinx-Auth: your_access_token

    + Attributes (object)
        + default (boolean, required) - Possible values are 'true' or 'false'

    + Body

            {
                "default": true
            }
    
+ Response 200 (application/json)

    + Attributes (object)
        + links (object)
        + data (Role)

    + Body

            {
                "links": {},
                "data": {
                    "id": "f608876c-a943-4ad2-82c1-e59df943ce41",
                    "name": "ExampleRole",
                    "privileges": [
                        "Dashboard.logon"
                    ],
                    "default": true
                }
            }

+ Response 401 (application/json)

        // when the access token in the request is missing or invalid
        {
            "links": {},
            "error": {
                "detail": "Valid authentication has either not been provided or is insufficient.",
                "type": "auth",
                "title": "Invalid authentication",
                "status": 401
            }
        }

+ Response 403 (application/json)

        // when you don't have the privilege to edit roles
        {
        "links": {},
            "error": {
                "reference": "f92270f4-ffe8-4104-87d5-ca457fa17cb7",
                "detail": "The user does not have the required privileges to perform the operation.",
                "type": "insufficientPrivileges",
                "title": "Insufficient privileges",
                "status": 403
            }
        }

+ Response 404 (application/json)

        // when the role couldn't be identified by its *id* in the database
        {
        "links": {},
            "error": {
                "reference": "f608876c-a943-4ad2-82c1-e59df943ce41",
                "detail": "An unspecific client error occurred.",
                "type": "client",
                "title": "Not Found",
                "status": 404
            }
        }

+ Request Remove a role from defaults (application/json)

    You may want to remove a default role so it isn't automatically assigned to newly created users.

    In this example, the `default` attribute will be updated for the role `ExampleRole`. The role was identified by its *id* in the database.

    **Note:**
    - You aren't required to have default roles.

    + Headers

            X-Acrolinx-Auth: your_access_token

    + Attributes (object)
        + default (boolean, required) - Possible values are 'true' or 'false'

    + Body

            {
                "default": false
            }
    
+ Response 200 (application/json)

    + Attributes (object)
        + links (object)
        + data (Role)

    + Body

            {
                "links": {},
                "data": {
                    "id": "f608876c-a943-4ad2-82c1-e59df943ce41",
                    "name": "ExampleRole",
                    "privileges": [
                        "Dashboard.logon"
                    ],
                    "default": false
                }
            }

+ Response 401 (application/json)

        // when the access token in the request is missing or invalid
        {
            "links": {},
            "error": {
                "detail": "Valid authentication has either not been provided or is insufficient.",
                "type": "auth",
                "title": "Invalid authentication",
                "status": 401
            }
        }

+ Response 403 (application/json)

        // when you don't have the privilege to edit roles
        {
        "links": {},
            "error": {
                "reference": "f92270f4-ffe8-4104-87d5-ca457fa17cb7",
                "detail": "The user does not have the required privileges to perform the operation.",
                "type": "insufficientPrivileges",
                "title": "Insufficient privileges",
                "status": 403
            }
        }

+ Response 404 (application/json)

### Delete a Role [DELETE /api/v1/roles/{id}]

This lets you delete a specified role based on its *id*.

**Note:** You can only successfully delete a role if all of the following conditions are met:
- The role isn't a preconfigured built-in role such as "Author", "Super Administrator", or "Term Browser".
- The role isn't selected as a default role.
- The role isn't currently assigned to one or more users.

+ Parameters
    + id: `f608876c-a943-4ad2-82c1-e59df943ce41` (required, string) - UUID of the role, unique identifier

+ Request Delete by id

    + Headers

            X-Acrolinx-Auth: your_access_token

+ Response 204

+ Response 400 (application/json)

        // when the request is invalid because of a typo, for example
        {
            "links": {},
            "error": {
                "reference": "a0b499dc-2511-4aa7-8a4e-c386d60b7800",
                "detail": "An unspecific client error occurred.",
                "type": "client",
                "title": "Bad Request",
                "status": 400
            }
        }

+ Response 401 (application/json)

        // when the access token in the request is missing or invalid
        {
            "links": {},
            "error": {
                "detail": "Valid authentication has either not been provided or is insufficient.",
                "type": "auth",
                "title": "Invalid authentication",
                "status": 401
            }
        }

+ Response 403 (application/json)

        // when you don't have the privilege to delete roles
        {
        "links": {},
            "error": {
                "reference": "f92270f4-ffe8-4104-87d5-ca457fa17cb7",
                "detail": "The user does not have the required privileges to perform the operation.",
                "type": "insufficientPrivileges",
                "title": "Insufficient privileges",
                "status": 403
            }
        }

+ Response 404 (application/json)

        // when the role couldn't be identified by its *id* in the database
        {
        "links": {},
            "error": {
                "reference": "5caccf73-faa9-4176-b931-8869392a2c1b",
                "detail": "An unspecific client error occurred.",
                "type": "client",
                "title": "Not Found",
                "status": 404
            }
        }

+ Response 409 (application/json)

        // when the preconditions to delete a role aren't met
        {
            "links": {},
            "error": {
                "reference": "7ca66314-1341-4b29-848a-fc53a14b6401",
                "detail": "An unspecific client error occurred.",
                "type": "client",
                "title": "Conflict",
                "status": 409
            }
        }

# Group Document API

Here, a document is an entity that associates names/characteristics that identify a document with an ID. It also contains the custom document information.

Typical program flow:

1. A document is opened in the host editor.
2. The integration uses create or retrieve document information, to check if the custom fields have to be filled out.
    If the user has to fill out custom fields, the API returns all fields to fill out and the set values.
3. The integration requests the user to fill out the custom field.
4. The integration sets the new custom fields either using the update document function or while submitting a check request.

## Document [/api/v1/document/{id}]
### Get Document [GET]

This method provides Document which was found in the database.

+ Parameters
    + id: `99576707-ed8c-44b6-82b8-c3ced8f349d1` (string, required) - document id

+ Response 200 (application/json)

        {
            "data": {
                "id": "283ab1e075f21a",
                "customFields": [
                    {
                        "displayName": "Project ID",
                        "key": "projectId",
                        "value": null,
                        "required": true
                    }
                ],
                "displayInfo": {
                    "reference": "abc.md"
                }
            }
        }

### Update Document Custom Fields [PUT]

+ Request (application/json)

        {
            "reference": "C:\\abc.md",
            "contentType": "E-Mail",
            "customFields": [
                {
                    "key": "projectId",
                    "value": "Marketing Campaign"
                }
            ],
            "displayInfo": {
                "reference": "abc.md"
            }
        }


+ Response 200 (application/json)

        {
            "data": {
                "id": "283ab1e075f21a",
                "reference": "C:\\abc.md",
                "contentType": "E-Mail",
                "customFields": [
                    {
                        "displayName": "Project ID",
                        "key": "projectId",
                        "value": "Marketing Campaign",
                        "required": true
                    }
                ],
                "displayInfo": {
                    "reference": "abc.md"
                }
            }
        }

## Document API Capabilities [GET /api/v1/document/capabilities]

Use this method to discover the configuration and capabilities of the document API.
Available information includes the configured document custom fields.

+ Response 200 (application/json)
    + Attributes
        + data (object)
        + links (object)

# Group Dictionary API

This API handles the spelling dictionary.
Items listed in the spelling dictionary are ignored (not flagged) by the spelling checker.

## Dictionary Entry
From an API perspective, an "item" or *dictionary entry* has the following properties:

* `surface`: The string that isn't a spelling issue.
* `scope`: The range of influence of the spelling exception.
    * `language`
    * `guidanceProfile`
    * `document`
* `languageId`: The language in which the surface shouldn't be a spelling issue.
* `guidanceProfileId`: The guidanceProfile for which the surface shouldn't be a spelling issue.
* `documentId`: The document in which the surface shouldn't be a spelling issue.

Depending on the `scope`, the -`Id`-values are optional or mandatory:

* `scope=language` requires a `languageId` (or alternatively an `guidanceProfileId`).
* `scope=guidanceProfile` requires an `guidanceProfileId`.
* `scope=document` requires a `documentId` and alternatively a `languageId` or an `guidanceProfileId`.

The `documentId` is a persistent identifier of the document from the Acrolinx Analytics reporting database.

(Tip: With an `guidanceProfileId` and a `documentId` you're always on the safe side.)

(Tip: guidance profiles have languages.
Keep `languageId` and `guidanceProfileId` consistent in that respect if sending both.
Otherwise the winner depends on the `scope`.)

## Get Dictionary Capabilities [GET /api/v1/dictionary/capabilities]

This method enables the integration to discover the available dictionary scopes.
(The availability of scopes depends on the server configuration and the user's privileges.)

Alternatively, you can retrieve the available scopes from a check result:

```
data.dictionaryScopes: [ "language", "guidanceProfile", "document" ]
```

+ Response 200 (application/json)

        {
          "data": {
            "scopes": [ "language", "guidanceProfile", "document" ]
          }
        }



## Add to Dictionary [POST /api/v1/dictionary/submit]

Create a dictionary entry for the specified scope.

Beware:
Spell checking is a multifaceted functionality.
Whether or not a particular issue will disappear after adding it to the dictionary, depends on the issue's true nature.
The spelling checker tells you if you can reasonably suppress an issue by adding a surface to the dictionary.
In the check result:

```
issues[n].canAddToDictionary: true
```

+ Request (application/json)

        {
            "surface": "wiruwaruwolz",                  // required
            "scope": "document",                        // required, one of the scopes above
            "languageId": "en_GB",                      // required if scope!=guidanceProfile
            "guidanceProfileId": "aud-1",               // required if scope=guidanceProfile
            "documentId": "283ab1e075f21a"              // required if scope=document
        }

+ Response 201 (application/json)

        {
          "data": {
            "surface": "wiruwaruwolz",
            "scope": "document",
            "languageId": "en_GB",
            "guidanceProfileId": null,
            "documentId": "283ab1e075f21a"
          }
        }


# Group Broadcast API - DRAFT

You can use platform notifications to inform users that checking might be affected by server maintenance or planned server outages.

## Create a Platform Notification [POST /api/v1/broadcasts/platform-notifications]

Publishes a new notification on the platform.


+ Request (application/json)

        {
            "title": "Important Announcement",                               // required; The title of the notification
            "body":  "Acrolinx Platform 5.6 will be deployed tomorrow.",     // required; Notification text.
            "importance": "high",                                            // optional; "high"|"normal"; default: "normal"
            "start": 1528127782,                                             // required; Notification start time (epoch millisecond timestamp)
            "end": 1530719782                                                // required; Notification end time (epoch millisecond timestamp)
        }

+ Response 201 (application/json)

        {
          "data": {
            "id": "e06491e9-c67f-4da7-85da-eb30b9ca9101"
          }
        }

## Retrieve Platform Notifications [GET /api/v1/broadcasts/platform-notifications/{lastRequestTimeInMilliseconds}]

Retrieves active notifications from the platform.

+ Parameters
    + lastRequestTimeInMilliseconds: `1525449382` (long, required) - epoch millisecond timestamp used to filter active notifications


+ Response 200 (application/json)

        {
            "data": {
                "requestTimeInMilliseconds": "1525449382",
                "platformNotifications": [
                    {
                        "id": "e06491e9-c67f-4da7-85da-eb30b9ca9101",
                        "title": "Important Announcement",
                        "body": "Acrolinx Platform 5.6 will be deployed tomorrow.",
                        "importance": "high",
                        "start": 1528127782,
                        "end": 1530719782
                    }
                ]
            }
        }



# Group Monitoring API

**Since Core Platform 2019.10**

The resources in this group provide information about the health and performance of the Acrolinx Platform.
Accessing this information requires the permission "Access to monitoring API." This privilege isn't granted
to all users. Make sure the user associated with your API token has the requisite roles.

For a quick check of your permissions see if the [metrics index](#monitoring-api-get-available-metrics)
contains links. More information about permission management can be found in the
[Acrolinx documentation](https://support.acrolinx.com/hc/en-us/sections/10210965582994-User-Management).

## Get Available Metrics [GET /api/v1/monitoring]

Lists available metrics according to the permissions of the API user. If access is granted a link to
the metrics resource will be added to the links hash. The following relations are currently available:

|Key             | Target
|----------------|-----------------
|`checkMetrics`  |[check monitoring resource](#monitoring-api-get-check-metrics)
|`healthMetrics` |[server health monitoring resource](#monitoring-api-get-health-metrics)

+ Response 200 (application/json)

        {
          "links": {
            "checkMetrics": "/api/v1/monitoring/checks",
            "healthMetrics": "/api/v1/monitoring/health"
          }
        }

## Get Check Metrics [GET /api/v1/monitoring/checks]

Provides a summary of the check activity on the Acrolinx Platform.

|Field                    |Contents
|-------------------------|-------------------
|`receivedChecks`         |Total number of checks received by the platform.
|`successfulChecks`       |Total number of completed checks that didn't result in an error.
|`failedChecks`           |Total number of completed checks that resulted in an error.
|`unparseableDocuments`   |Total number of checks that failed due to parsing errors.
|`currentQueueLength`     |Current number of checks waiting for a free language server.
|`totalQueueTime`         |Total time, in seconds, check requests waited for a free language server.


+ Response 200 (application/json)

    + Attributes (object)
        + data (object)
            + receivedChecks: 54132 (number) - Total number of checks received
            + successfulChecks: 54130 (number) - Total number of successful checks
            + failedChecks (number): 2 - Total number of failed checks
            + unparseableDocuments: 2 (number) - Total number of checks failed due to parsing errors
            + currentQueueLength: 0 (number) - Current number of waiting checks
            + totalQueueTime: 1563 (number) - Total time checks spent waiting


## Get Health Metrics [GET /api/v1/monitoring/health]

A general summary of the health of the Acrolinx Platform.

|Field                    |Contents
|-------------------------|-------------------
|`languagesReady`         |A hash containing all configured languages as keys. If Acrolinx is ready to check in a language its value will be true.

+ Response 200 (application/json)

        {
            "data": {
                "languagesReady": {
                    "en": true,
                    "fr": true,
                    "ja": false
                }
            }
        }

## Get Health Status [GET /api/v1/monitoring/health/status]

This returns a successful response when at least one language server is available for checking.
This API response will only contain `200` response code. You don't need
access to the permission "Access to monitoring API" to use this API.

**Available since Core Platform version 2022.03**

+ Response 200

+ Response 503

        {
            "links": {},
            "error": {
                "reference": "abee2169-66ce-4566-b21a-f086d0c2c82a",
                "detail": "Not all languages are available for checking.",
                "type": "server",
                "title": "Service Unavailable",
                "status": 503
            }
        }

## Get Health Liveliness [GET /api/v1/monitoring/health/live]

This returns a successful response when the server can accept and process web requests.
This does not tell you if the server is ready to process check requests. To get that information,
you can make an API call to `api/v1/monitoring/health/status`.

This API response will contain the plain-text message "OK" and a `200` response code. You don't need
access to the permission "Access to monitoring API" to use this API. If a response is unsuccessful,
you'll see a response that isn't `200`.

**Available since Core Platform version 2022.09**

+ Response 200 (text/plain)

        OK

# Data Structures

## Role (object) 
+ id (string) - UUID 
+ name (string) - Name of the role
+ privileges (array[string]) - Belonging privileges of the role
+ default (boolean) - Indicates the role is assigned to new users by default [ true | false ]

## CreateOrUpdateRole (object) 
+ name (string, required) - Name of the role
+ privileges (array[string], required) - Belonging privileges of the role
+ default (boolean, optional) - Indicates the role is assigned to new users by default [ true | false ]

## User (object)
+ id (string) - UUID
+ username (string) - The username
+ fullName (string) - The full name of the user
+ createdOn (string) - The ISO8601 timestamp indicating when the user was created
+ lastIntegrationAccess (string) - The ISO8601 timestamp indicating when the last integration access occurred
+ licenseType (string) - Indicates the type of license as one of ['named' | 'concurrent' | 'builtin']
+ licenseStatus (string) - The license status
+ activeTokenId (string) - Displays the currently active API token's id or an empty string if there is no active token
+ checkingFrequency (UserStatus) - Displays a rough idea of the usage pattern of the user by checking their frequency across the lifetime of the user in days
+ properties (object) - Key/Value pair of properties
+ roles (array[Role]) - List of assigned roles
+ idpUser (boolean) - Indicates whether the user has any linked identity providers
+ staffUser (boolean) - Indicates whether the user is an Acrolinx staff member
+ rolesSetByIdp (boolean) - Indicates whether the user has their roles managed by their identity provider
+ customFields (array[CustomField]) - List of custom fields

### UserStatus (enum)
+ `frequent` - Perform 1 more check than regular users.
+ `infrequent` - Perform fewer checks than regular users.
+ `regular` - Performs 1 check in 24 hours (plus/minus 25%) on average.

## CreateUser (object)
+ username (string) - The unique username, max length 255 characters
+ fullName (string) - The full name of the user, max length 255 characters (optional)
+ password (string) - The user password, length between 1 and 128 characters (optional)
+ licenseType (string) - Indicates the type of license as one of ['named' | 'concurrent'] (optional)
+ roles (array[Role]) - List of assignable roles (optional)

### CustomField (object)
+ key (string) - The unique key of the custom field 
+ displayName (string) - The name to be displayed
+ inputType (string) - Indicates the origin of the field ['required' | 'optional' | 'externallyProvided']
+ type (string) - Indicates the type ['list' | 'text']
+ value (string) - The value of the field
+ possibleValues (array[string]) - List of possible valid values

### UserApiTokenCreateResponse
+ type: "api" (string)
+ issuedAt (string) - The ISO8601 timestamp indicating when the token was issued at
+ expiresAt (string) - The ISO8601 timestamp indicating when the token will expire at
+ token (string) - The generated API token (JWT)

### BulkCreateUser (object)
+ users (array[CreateUser]) - List of users to be created

## BulkResult
+ status (number) - The resulting HTTP success code of the operation performed on the object
+ id (string) - The generated UUID of the object
+ location (string) - The href location of the affected object

## BulkError
+ status (number) - The resulting HTTP error code of the operation performed on the object
+ id (string) - An associated unique identifier of the object involved in the error
+ type (string) - Indicates the type of the error ['client' | 'server']
+ title (string) - The title of the error message
+ detail (string) - More details on the actual error and the potential cause
+ reference (string) - UUID for internal error logging reference

## BulkResultResponse (object)
+ results (array[BulkResult])
+ errors (array[BulkError])

## LicenseStatistics
+ named (Named)
+ concurrent (Concurrent)

### Named
+ licensed (number) - The total number of named licenses available
+ active (number) - The number of active named users
+ inactive (number) - The number of inactive named users
+ available (number) - The number of available licenses (licensed - active)

### Concurrent
+ licensed (number) - The total number of concurrent licenses available
+ existing (number) - The number of concurrent licenses used

### Pagination
+ prev (string) - URI of the previous page
+ next (string) - URI of the next page
+ first (string) - URI of the first page
+ last  (string) - URI of the last page

## RandomPassword
+ value (string) - a random, policy-compliant password

# Group Reporting API

The reporting API provides direct access to raw check data and raw issue data.
You can download the data as a CSV file and add it to your preferred analysis tool.

### Restrictions
#### Available Data
Default: 12 months

You can download data from the past 12 months by default. Contact Acrolinx Support for more information.

#### Time Limit

You can only download 31 days of data per request.

#### Concurrent Requests
Default: 3 requests per tenant

This limits the number of concurrent downloads. The default is 3 concurrent downloads.
If you exceed the quota, you'll get a 429 status code. The response will include the headers Retry-After, RateLimit-Limit, and RateLimit-Remaining.

#### Download Volume
Default: 1000 days of raw check data and 1000 days of raw issue data. The data will replenish at 5 days of data per day.

If you download any amount of data for a specific day, that day counts toward the default. This includes empty days. The 1000-day default is designed to give you access to all available historic data.

The quota is set for each type of data. For example, when you download check data it won't affect the amount of issue data you can download.

If you exceed the download quota, you'll get a 429 status code. The response will include the headers Retry-After, RateLimit-Limit, RateLimit-Remaining, and RateLimit-Reset headers.

**Note:** To access the Reporting API, you'll need to be authorized and authenticated via an access token. Before you get started with the Reporting API, be sure to review the [authentication and authorization](https://acrolinxapi.docs.apiary.io/#introduction/authentication-and-authorization) requirements.

## Get check data [GET /api/v1/reporting/data/checks{?start,end}]

Download check data as a CSV file. You can access the data with cURL.

```
curl \
    'https://<replace_your_host_address>/api/v1/reporting/data/checks?start=<replace_start_date>&end=<replace_end_date>' \
    -H "X-Acrolinx-Auth: <replace_your_access_token>" \
    -o <replace_file_name>.csv
```

+ Request

    + Headers

            X-Acrolinx-Auth:your_access_token

+ Parameters
    + start: `2024-08-23` (string, required) - Date format `yyyy-MM-dd`. Download data starting from this date.
    + end: `2024-08-28` (string, required) - Date format `yyyy-MM-dd`. Download data up to this date.

+ Response 200 (text/csv)

        "Check ID","Check start time",Language,"Scorecard URI","File ID","Content reference","File path","File name","Content ID","Acrolinx Score","Acrolinx Score color","All issues",Words,Sentences,Target,"Target ID","Content group ID","Content group","User ID","Full name",Integration,"Integration version","Content profile","Check scope","Custom field department","Custom field role","Custom field status","Clarity goal score","Consistency goal score","Correctness goal score","Inclusive language goal score","Scannability goal score","Terminology goal score","Tone goal score","Clarity goal issues","Consistency goal issues","Correctness goal issues","Inclusive language goal issues","Scannability goal issues","Terminology goal issues","Tone goal issues"
        "4265b702-9a69-38ca-bb45-bcad9ee7d910",2024-01-14T23:06:58Z,en,"api/v1/checking/scorecards/4265b702-9a69-38ca-bb45-bcad9ee7d910","9d38800b-89ae-396c-ae11-1de419f13a8f",Yak-1,,Yak-1,,35,red,20,1119,47,"Essentials English 2","2bd7dbcb-5510-4cdf-b054-0f275d3047c2",,,"96e79a50-97f9-3721-a755-0e9616c26a0b","AbcFull XyzName",webchecker,v1,"f5b8573c-e603-46d7-8af0-512d199d478b",check,developers,junior,draft,57,6,76,40,19,45,42,3,2,8,2,5,5,3
        "0521406f-ccf1-3acf-904a-7452766df8d7",2024-01-15T05:34:06Z,en,"api/v1/checking/scorecards/0521406f-ccf1-3acf-904a-7452766df8d7","77ad4993-80f1-31ec-9aef-1a33d2021a86",Su-22,,Su-22,,52,yellow,20,504,41,"Essentials English 2","2bd7dbcb-5510-4cdf-b054-0f275d3047c2","710eed98-732b-3668-8a67-f4294d9a7ff4",Wade,"96e79a50-97f9-3721-a755-0e9616c26a0b","AbcFull XyzName",webchecker,v1,"f5b8573c-e603-46d7-8af0-512d199d478b",check,developers,senior,draft,15,64,84,42,43,30,85,4,2,6,6,3,0,9

+ Response 400 (application/json)

        {
            "code": 400,
            "message": "Provide a start date."
        } 

+ Response 400 (application/json)

        {
            "code": 400,
            "message": "Provide an end date."
        }

+ Response 400 (application/json)

        {
            "code": 400,
            "message": "2024-06-31 is an invalid start date. Make sure the date entered is in the format 'yyyy-MM-dd' and corresponds with the actual number of days in the month."
        } 

+ Response 400 (application/json)

        {
            "code": 400,
            "message": "2024-Sept-09 is an invalid end date. Make sure the date entered is in the format 'yyyy-MM-dd' and corresponds with the actual number of days in the month."
        } 

+ Response 400 (application/json)

        {
            "code": 400,
            "message": "Invalid 'start' date 2024-08-29 and 'end' date 2024-08-28. The 'start' date must be before the 'end' date."
        }

+ Response 400 (application/json)

        {
            "code": 400,
            "message": "Invalid 'end' date 2024-08-28. The 'end' date must be before 2024-08-28. The most recent data available for download is from yesterday."
        } 

+ Response 400 (application/json)

        {
            "code": 400,
            "message": "You can only download data from the past 12 months. Provide a different start date."
        } 

+ Response 400 (application/json)

        {
            "code": 400,
            "message": "You can only download 31 days of data at a time. Adjust the date range."
        } 

+ Response 401 (application/json)

        {
            "code": 401,
            "message": "Unauthorized access to reporting API. Contact your Acrolinx administrator for more information."
        } 

+ Response 403 (application/json)

        {
            "code": 403,
            "message": "The Reporting API feature is inactive."
        } 
        
+ Response 409 (application/json)

        {
            "code": 409,
            "message": "Data before 2024-08-01 is available to download. To download data up to 2024-08-01, adjust the dates."
        } 

+ Response 409 (application/json)

        {
            "code": 409,
            "message": "No data is available for download. Try again later."
        } 

+ Response 429 (application/json)

        {
            "code": 429,
            "message": "Too many requests. Try again later. If you still have trouble, contact Acrolinx Support."
        } 

+ Response 429 (application/json)

        {
            "code": 429,
            "message": "Download volume reached. The data will replenish at a rate of 5 days of data per day."
        } 
        
+ Response 500 (application/json)

        {
            "code": 500,
            "message": "Something went wrong. Try again or contact Acrolinx Support."
        } 

+ Attributes (object)
    + Checks CSV data structure (object)
        + Check ID (string) - Unique check ID
        + Check start time (string) - Start time of the check in the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, for example, `2022-08-01T23:49:14.627Z` 
        + Language (string) - Checking language 
        + Scorecard URI (string) - Uniform Resource Identifier (URI) of the Scorecard 
        + File ID (string) - Unique file ID 
        + Content reference (string) - Acrolinx assigns the file a content reference the first time you run a check. Files with the same content reference are treated as the same file.
        + File path (string) - The file's location when it’s first checked 
        + File name (string) - Name of the file 
        + Content ID (string) - Unique check ID for batch checks 
        + Acrolinx Score (number) - Overall Acrolinx Score 
        + Acrolinx Score color (string) - Color coding of the Acrolinx Score 
        + All issues (number) - Count of all issues found 
        + Words (number) - Number of words in the file 
        + Sentences (number) - Number of sentences in the file 
        + Target (number) - Name of the Target used 
        + Target ID (string) - Unique Target ID 
        + Content group ID (string) - Unique content group ID 
        + Content group (string) - Name of the content group 
        + User ID (string) - Unique user ID 
        + Full name (string) - Full name of user 
        + Integration (string) - Integration used to run the check 
        + Integration version (string) - Integration version 
        + Content profile (string) - Content profile used 
        + Check scope (string) - Indicates whether a complete file or a specific selection of content is checked ['check' | 'check selection'].
        + Custom field {NAME} (string) - Custom fields. The number of columns in the CSV file will correspond to the number of custom fields. For example, if there are 10 custom fields, the CSV file will have 10 columns for custom fields.
        + {NAME} goal score (string) - Score for a goal. The number of columns in the CSV file will correspond to the number of goal names. For example, if there are 10 goals, the CSV file will have 10 columns for custom fields.
        + Clarity goal score (number) - Score for the goal Clarity  
        + Consistency goal score (number) - Score for the goal Consistency 
        + Correctness goal score (number) - Score for the goal Correctness 
        + Inclusive Language goal score (number) - Score for the goal Inclusive Language 
        + Scannability goal score (number) - Score for the goal Scannability 
        + Terminology goal score (number) - Score for the goal Terminology   
        + Tone goal score (number) - Score for the goal Tone 
        + {NAME} goal issues (string) - Number of Issues found for the goal. The number of columns in the CSV file will correspond to the number of goal names. For example, if there are 10 goals, the CSV file will have 10 columns for custom fields.
        + Clarity goal issues (number) - Number of Issues found for the goal Clarity 
        + Consistency goal issues (number) - Number of Issues found for the goal Consistency 
        + Correctness goal issues (number) - Number of Issues found for the goal Correctness 
        + Inclusive Language goal issues  (number) - Number of Issues found for the goal Inclusive Language 
        + Scannability goal issues (number) - Number of Issues found for the goal Scannability 
        + Terminology goal issues (number) - Number of Issues found for the goal Terminology 
        + Tone goal issues (number) - Number of issues found for the goal Tone 
        + {NAME} metric score (string) - Metrics suffix by actual name. If there are 10 metrics, the CSV will have 10 columns for metrics suffix by name of the metric

## Get issues data [GET /api/v1/reporting/data/issues{?start,end}]

Download issue data as a CSV file. You can access the data with cURL.

```
curl \
    'https://<replace_your_host_address>/api/v1/reporting/data/issues?start=<replace_start_date>&end=<replace_end_date>' \
    -H "X-Acrolinx-Auth: <replace_your_access_token>" \
    -o <replace_file_name>.csv
```

+ Request

    + Headers
    
            X-Acrolinx-Auth:your_access_token

+ Parameters
    + start: `2024-08-23` (string, required) - Date format `yyyy-MM-dd`. Download data starting from this date.
    + end: `2024-08-28` (string, required) - Date format `yyyy-MM-dd`. Download data up to this date.

+ Response 200 (text/csv)

        "Check ID",Date,Context,Issue,"Structural context","Guideline ID","Guideline name",Language,"Issue type"
        "4bbdc491-6821-3b53-8881-001553987b69",2023-10-29,"hello woorld",woorld,sentence,"en_CONSISTENCY_Guideline_id-9","CONSISTENCY guideline id 9 display name",en,syntax
        "4bbdc491-6821-3b53-8881-001553987b69",2023-10-29,"hello woorld",woorld,sentence,"en_CONSISTENCY_Guideline_id-2","CONSISTENCY guideline id 2 display name",en,syntax

+ Response 400 (application/json)

        {
            "code": 400,
            "message": "Provide a start date."
        } 

+ Response 400 (application/json)

        {
            "code": 400,
            "message": "Provide an end date."
        }

+ Response 400 (application/json)

        {
            "code": 400,
            "message": "2024-06-31 is an invalid start date. Make sure the date entered is in the format 'yyyy-MM-dd' and corresponds with the actual number of days in the month."
        } 

+ Response 400 (application/json)

        {
            "code": 400,
            "message": "2024-Sept-09 is an invalid end date. Make sure the date entered is in the format 'yyyy-MM-dd' and corresponds with the actual number of days in the month."
        } 

+ Response 400 (application/json)

        {
            "code": 400,
            "message": "Invalid 'start' date 2024-08-29 and 'end' date 2024-08-28. The 'start' date must be before the 'end' date."
        } 

+ Response 400 (application/json)

        {
            "code": 400,
            "message": "Invalid 'end' date 2024-08-28. The 'end' date must be before 2024-08-28. The most recent data available for download is from yesterday."
        } 

+ Response 400 (application/json)

        {
            "code": 400,
            "message": "You can only download data from the past 12 months. Provide a different start date."
        } 

+ Response 400 (application/json)

        {
            "code": 400,
            "message": "You can only download 31 days of data at a time. Adjust the date range."
        } 

+ Response 401 (application/json)

        {
            "code": 401,
            "message": "Unauthorized access to reporting API. Contact your Acrolinx administrator for more information."
        } 

+ Response 403 (application/json)

        {
            "code": 403,
            "message": "The Reporting API feature is inactive."
        } 
+ Response 409 (application/json)

        {
            "code": 409,
            "message": "Data before 2024-08-01 is available to download. To download data up to 2024-08-01, adjust the dates."
        }   

+ Response 409 (application/json)

        {
            "code": 409,
            "message": "No data is available for download. Try again later."
        } 

+ Response 429 (application/json)

        {
            "code": 429,
            "message": "Too many requests. Try again later. If you still have trouble, contact Acrolinx Support."
        } 

+ Response 429 (application/json)

        {
            "code": 429,
            "message": "Download volume reached. The data will replenish at a rate of 5 days of data per day."
        } 

+ Response 500 (application/json)

        {
            "code": 500,
            "message": "Something went wrong. Try again or contact Acrolinx Support."
        } 

+ Attributes (object)
    + Issues CSV data structure (object)
        + Check ID (string) - Unique check ID
        + Date (string) - Date when the issue was found. Shown in the format `yyyy-MM-dd`, for example, `2022-01-20` 
        + Context (string) - Sentence or paragraph where the issue occurred
        + Issue (string) - Content that Acrolinx highlighted 
        + Structural context (string) - Structural location where the issue occurred in the file 
        + Guideline ID (string) - Unique ID of the guideline  
        + Guideline name (string) - Name of the guideline 
        + Language (string) - Checking language 
        + Issue type (string) - Type of issue 