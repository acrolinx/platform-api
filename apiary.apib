FORMAT: 1A
HOST: https://tenant.acrolinx.cloud

# Acrolinx Platform API

The Acrolinx Platform API is the new REST like API for accessing the Core Platform.

**NOTE:** All listed (future) features, which aren't yet or only partially implemented, are marked with the keyword DRAFT. Please consider this while using the Acrolinx Platform API!

# Authentication and Authorization

When using the Acrolinx Platform API, you'll need to be authorized and authenticated. This is done by providing an **Access Token**.

An **Access Token** is an encoded and cryptographically signed string. It has the following characteristics:

* It's bound to a user
* There can be an infinite number of Access Tokens per user
* It has a certain lifetime (default 30 days, can be changed)
* It will expire after the lifetime or when the password of the associated user is changed
* It provides authorization and authentication

How to get an **Access Token**?
You can get an Access Token by using the Acrolinx sign-in workflow.
(further description here)

How to use an Access Token?

Every request you're doing with the Acrolinx Platform API must contain a [header](#header-access-token) providing the Access Token:

```
    X-Acrolinx-Auth: WERTZUIOP
```

## API Token
An API Token is an Access Token but with special characteristics:

* It has a lifetime of 4 years
* It will **not expire when the password of the associated user is changed**
* Only one API Token can be bound to a user at the time

You can get an API Token by accessing the user settings page on the Dashboard and generating one.

Other than that, the **API Token** functions as an **Access Token**.

# General Headers

## Access Token

All methods except "index" and "poll access token" require a valid access token in the `X-Acrolinx-Auth` header even if not explicitly mentioned below.
If the token is invalid, a `401` response is returned (see `401` response of "index") even if this response isn't explicitly mentioned below.

Example:

```
    X-Acrolinx-Auth: 123579080a8d1fee12490a90dc3
```

## Base URL

To support reverse proxies, a client may provide the `X-Acrolinx-Base-Url` header with each request. If the response body to the request
contains links into the Acrolinx API, the server will prefix them with the given value. The provided value must be an absolute URL including scheme and host.
Malformed values will result in a `400` status code.

Example:

```
    X-Acrolinx-Base-Url: https://example.com/path/
```

## Client Locale

All methods accept a header `X-Acrolinx-Client-Locale`, with which the client can identify its own locale (for example, UI language).
The value of the header field must be a single language tag that is compliant to BCP 47. The Acrolinx Platform will try to return message strings
and other locale-specific parts of the response in the requested language.

Example:

```
    X-Acrolinx-Client-Locale: de-CH
```

The server tries to match the sent locale to the closest locale that it's able to support, for example, `de`.
The "index" request returns the list of supported locales. The server falls back to the default `en` locale in the following cases:

* no X-Acrolinx-Client-Locale header is sent
* there's no matching supported locale
* for the given response, there's no appropriate localization available

## Signature

If not otherwise documented, all methods require a header `X-Acrolinx-Client` to be set. The header must be a valid signature. The request
returns an error, if the header is omitted or the given signature isn't valid.

The format of the signature is `Signature;Version`, where `Signature` is the signature as configured in the Acrolinx license and
`Version` is the version number of the client.

Example:

```
    X-Acrolinx-Client: SW50ZWdyYXRpb25EZXZlbG9wbWVudERlbW9Pbmx5; 1.0.1.45
```

# Response Format

The API provides a consistent format for all responses. Each response has a field `links` and one of the three fields `error`, `progress`, `data`.

The `links` field contains further URLs that can be used as a next step in the workflow.
`error` is set if the request didn't succeed. This is accompanied by an HTTP status code above or equal 4xx.
`progress` means that the processing isn't finished yet and the client has to poll for the final result.
`data` contains the actual result data, the processing is successfully finished.

## Error Responses

### General Format

The API provides a consistent format for errors, which is based on [RFC7807](https://datatracker.ietf.org/doc/rfc7807/?include_text=1).
The format is JSON and the API guarantees to send the fields `type`, `title`, `detail`, `status` with each error response.

Example:

```
HTTP/1.1 403 Forbidden
Content-Type: application/problem+json
{
  "error": {
    "type": "auth",
    "title": "Invalid authentication",
    "detail": "The provided token for authorization is not valid.",
    "status": 403
  }
  "links": {}
}
```

* `type` is a unique identifier for the type of error. A client may choose a workflow for the error handling depending on the type.
* `title` is a short description of the error. It can be displayed to the user as title of the error.
* `detail` is a more verbose description of the error. It's suitable to be displayed to the user.
* `status` is redundant to the HTTP status code. It may be helpful in case a proxy changed the HTTP status code of the original API response.
* An optional `reference` field with an id may be present. If there, this id can be found in the Acrolinx log files to support better problem analysis.

Depending on `type`, additional fields may be part of the response providing more detailed information.

Additional fields may be added in future. A client must not break because of unexpected fields.



### Error Types

Type | Description| What to do
-----|------------|------------
`client` | Unspecific error caused by the client's request. | Check logs and configuration or the client code.
`server` | Unspecific error during processing of a request in Acrolinx. | Check logs and configuration.
`clientSignatureMissing` | The `X-Acrolinx-Client` header was missing.  | Contact Acrolinx, how to acquire a valid license.
`clientSignatureRejected` | The given signature in the `X-Acrolinx-Client` header was invalid. | Contact Acrolinx, how to acquire a valid license.
`sso` | Returned for any single sign-on errors. | Most probably this is a configuration issue.
`auth` | Invalid authentication. | Use another access token.
`insufficientPrivileges` | Insufficient privileges. | Assign the required privileges to the user.
`interactiveSignInTimedOut` | The interactive sign-in process timed out. | Start new.
`checkCancelled` | The check was canceled. No result is available. | Probably points to an error in the client.
`checkFailed` | The check failed. | Check logs and configuration.
`invalidBaseUrl` | The request contained an invalid base URL in the `X-Acrolinx-Base-URL` header. | Check configuration of client or proxies, which set the header.
`customFieldsIncorrect` | Custom field values are incorrect. |Please provide valid values for all required custom fields before or when checking a document.
`validation` | Invalid request attributes. | Check the request for invalid values or missing parameters.
`guidanceProfileDoesntExist` | Guidance profile doesn't exist | The guidance profile doesn't exist or isn't available for the user id and language given.
`noGuidanceProfileConfigured` | No guidance profile configured | For the user id and language given no guidance profile is configured.
`contentTooLarge` | Content to large | Without reconfiguration of the Acrolinx platfrom the document can't be checked.
`queueLimitExceeded` | Queue limit exceeded | Retry to submit the check after waiting at least as long as suggested in the retry-after header.
`conflict` | Concurrent write access | Conflict with a concurrent write access. Retry the operation with fresh data.
`licenseLimitExceeded` | License limit exceeded | You exceeded a limit set by your licensing terms. The error description contains more details. Please check [the documentation](https://docs.acrolinx.com/coreplatform/latest/en/user-management/user-licenses) for more information.



### Additional Information On Validation Errors

Errors with type `validation` come with a list of constraint violation descriptions in an additional property `validationDetails`:

```
{
    "title": "Validation error",
    "constraint": "The 'languageId' is required.",
    "attributePath": "submit.arg1.languageId",
    "detail": "The 'languageId' is required but was 'null'.",
    "invalidValue": "DictionaryEntry{surface='TestSurface', scope=language, languageId='', guidanceProfileId='null', documentId='null'}",
    "possibleValues": ["en", "de"]
}

```
* `title`: "Validation error"
* `constraint`: A minimal description of the constraint that was violated.
* `attributePath`: A hint towards the property or parameter that had an invalid value.
* `detail`: A more detailed description of the constraint violation.
* `invalidValue`: The value that was invalid. Can be a data structure.
* `possibleValues`: An optional list of valid values for the property.


The `validationDetails` are intended as information for developers to troubleshoot bad requests.
They are not intended for automated consumption.
Values are not guaranteed to be always present or in a uniform format.



## Progress Responses

A progress response always contains a field `retryAfter`, which tells the client how many seconds to wait until the next poll request.
Optionally the response can have the fields `message`, that contains a human user readable text about the current status, and `percent`, that
is a number and shows the progress in percent.
A progress response has always the `Retry-After` header set with the same value as the `retryAfter` field and an HTTP status 202.

Examples:

```
HTTP/1.1 202 Accepted
Content-Type: application/json
{
  "progress": {
    "message": "The request is queued on position 5.",
    "percent": 2,
    "retryAfter": 5
  }
  "links": {
    "cancel": "https://tenant.acrolinx.cloud/api/v1/checks/ID100"
  }
}
```

```
HTTP/1.1 202 Accepted
Content-Type: application/json
{
  "progress": {
    "retryAfter": 1
  }
  "links": {}
}
```

## Successful Responses

The fields of a successful response with data depend on the request.

Example:

```
HTTP/1.1 200 Ok
Content-Type: application/json
{
  "data": {
    "score": 99,
    "textualScore": "Good job!"
  }
  "links": {
    "submit": "https://tenant.acrolinx.cloud/api/v1/checks"
  }
}
```

# HTML Fields

Responses may have fields, that contain HTML snippets to provide nice formatting in interactive clients. Those fields are clearly marked by a name that ends with Html, for example, guidanceHtml. There may be related field with the same content in plain text. If such a field exists, it ends with Text as for example, guidanceText.

All HTML fields contain only undangerous formatting tags that can be used without security risks. All tags are filtered by a server-side allowlist.

# Group Index

## Index [GET /api/v1]

Note: This is the only web service method that provides a 200 response if no access token was sent.
If an invalid access token was sent, the response is still a 401, though.

+ Request

    + Header

            X-Acrolinx-Auth: ""


+ Response 200 (application/json)

        {
          "data": {
            "server": {
                "version": "5.1.0.123",
                "name": "Acrolinx Core Platform"
            },
            "locales": [ "en" ]
          },
          "links": {
            "signIn": "https://tenant.acrolinx.cloud/api/v1/auth/sign-ins"
            }
        }


+ Request

    + Header

            X-Acrolinx-Auth: 123579080a8d1fee12490a90dc3


+ Response 200 (application/json)

        {
          "data": {
            "server": {
                "version": "5.1.0.123",
                "name": "Acrolinx Core Platform"
            },
            "locales": {
                "en"
            }
          },
          "links": {
            "signIn": "https://tenant.acrolinx.cloud/api/v1/auth/sign-ins",
            "submitCheck": "http://tennant.acrolinx.cloud/api/v1/checking/checks"
          }
        }


+ Response 401 (application/json)

        {  // if provided access token became invalid
          "error": {
            "type": "auth",
            "title": "Invalid access token",
            "detail": "The provided token for authorization is invalid.",
            "status": 401
          },
          "links": {}
        }

## Platform Capabilities [GET /api/v1/capabilities]

An aggregation of the capabilities of the APIs subresources. This resource serves a single entry point for clients that need
to use more than one feature of the API.

+ Response 200 (application/json)
    + Attributes
        + data (object)
            + checking (object) - capabilities of the checking resource
            + document (object) - capabilities of the document resource
        + links (object)


# Group Authentication API

Authentication is handled either with a configured access token, with single sign-on (SSO) or in an interactive process by signing in with the Acrolinx sign-in web page.
Embedded integrations use either the configured access token or SSO.
Interactive clients with a human user use SSO or the interactive process.

## Request/Validate an API Token [POST /api/v1/auth/sign-ins]

The sign-in collection allows Acrolinx API clients to request user authentication and to check
the validity and privileges of existing access tokens.

If the Core Platform is configured for Single Sign-on, this endpoint will accept the configured credentials
to authenticate the request.

+ Request (application/json)

    + Header

            X-Acrolinx-Auth: 123579080a8d1fee12490a90dc3 (valid) OR (invalid/expired access token) OR (no access token)
            X-Acrolinx-Client-Locale: ja
            X-Acrolinx-Client: QWxlU2hNyb2bHVnLWlunhQyR29Rm9xpbvZ2lZXRz; 1.0.1.45; 12345

+ Response 200 (application/json)
    No sign-in needed, the response body will contain valid access tokens.

    The server may decide that the request is already sufficiently authorized. In this case,
    no sign-in process is started. The response will contain the same information as after
    successful sign-in procedure. The following conditions may lead to this response:

    - The `X-Acrolinx-Auth` header contained a valid token.
    - Single Sign-on is configured and valid credentials are supplied.

    + Attributes (object)

+ Response 201 (application/json)
    If the `X-Acrolinx-Auth` header is absent a
    new sign-in process is started. The response body contains two links.
    One allows the user to complete the sign-in process.
    The other helps the client to acquire the session data:

    - `interactive` a link to a website that allows the user to authenticate and
          permit the client to access the server. If a language was provided in the
          `X-Acrolinx-Client-Locale` header, the link will point to a localized
          version of that website if available and technically possible.

    - `poll` a link to a resource that will return an *access token* and information
          about the user after sign-in. (see [GET `api/v1/auth/sign-ins/{id}`](#authentication-api-poll-for-a-new-api-token-get))

    Note that the sign-in process will time out. The `interactiveLinkTimeout` field
    contains the duration in seconds, that the `interactive` link will stay valid. If the
    Sign-in page was loaded before this time, the server will extend
    the timeout. To detect timeouts after opening the Sign-in page use the `poll` link.

    + Body

            {
              "data": {
                "state": "Started",
                "interactiveLinkTimeout": 900
              },
              "links": {
                  "interactive": "https://tenant.acrolinx.cloud/dashboard.html?login=19901-2-8412998412",
                  "poll": "https://tenant.acrolinx.cloud/api/v1/auth/sign-ins/185-0ijfgklejt2390tui"
              }
            }

    + Attributes
        + data
          + `state`:`Started` (string, required)
          + `interactiveLinkTimeout`: 900 (number, required)
        + links
            + `interactive`: `https://tenant.acrolinx.cloud/dashboard.html?login=19901-2-8412998412` (string, required)
            + `poll`: `https://tenant.acrolinx.cloud/api/v1/auth/sign-ins/185-0ijfgklejt2390tui` (string, required)

+ Response 401 (application/json)
    If invalid SSO credentials are supplied the request is rejected. This occurs when an SSO username
    is present but the SSO password is wrong or missing or the user couldn't be created.

    + Header

            WWW-Authenticate: ACROLINX_TOKEN, ACROLINX_SIGN_IN (, ACROLINX_SSO)

    + Attributes (object)

+ Response 503
    The server is unable to start a sign-in process at this time.

    + Header

            Retry-After: 30

    + Attributes (object)

## Poll for a New API Token [GET /api/v1/auth/sign-ins/{id}]

This resource lets a client wait for a user to authenticate and authorize it to use the
privileged parts of the Acrolinx API. Once the user has completed the sign-in process,
it will return a new access token. It can be sent with each API call to prove the
privileges and identity owned by the user that signed in.

When polling returned a final result, the polling endpoint will disappear and return a `NOT FOUND` status.

+ Request

    + Header

            X-Acrolinx-Client: QWxlU2hNyb2bHVnLWlunhQyR29Rm9xpbvZ2lZXRz; 1.0.1.45

+ Parameters
    + id: `99576707-ed8c-44b6-82b8-c3ced8f349d1` (string, required) - poll-id for the authorization request

+ Response 200 (application/json)
   A user has completed the sign-in process and the server has created a new access token.

   Note that this resource will disappear after this response.

   + Attributes (object)

+ Response 202 (application/json)
   The user hasn't authorized the sign-in yet. Request the same URI again to continue polling.
   Note that clients should pace themselves by respecting the `Retry-After` header.

    + Header

            Retry-After: 2

    + Attributes
        + progress
           + `retryAfter`: 2 (number, required)

+ Response 404 (application/json)
    The server has no knowledge of the polling token. If a valid poll URI was used, the cause for this is
    a timeout or another poll request may have consumed the credentials.

    The returned type is `interactive_sign_in_timed_out`, which distinguishes this response from a normal 404 caused by a just wrong URL.

    + Attributes
       + error
         + `type`: `interactive_sign_in_timed_out` (string, required)
         + `status`: 404 (number, required)
         + title: `The interactive sign-in process timed out` (string, required)
         + detail: `The interactive sign-in process timed out. Please start a sign-in.` (string, required)


# Group Checking API

The API for checking documents.

## List Checking Capabilities [GET /api/v1/checking/capabilities]

The new checking API replaces writing guides and Content Profiles with a flat list of guidance profiles. Each guidance profile corresponds to a
writing guide or a Checking Profile. If Sublanguages are activated, they're folded into the list of guidance profiles.

For each guidance profile, the server provides information about the language, activated goals, and term sets. The client may use this
for filtering purposes, but they can only select one (complete) guidance profile for checking (for example, not deselect goals).

If the server runs in Targets Mode, the goals contain an additional string field called `scoring`. It can have the values
`required` (meaning this goal will be included in the calculation of the overall score so it is required to take this goal into account
when creating content) or `recommended` (meaning this goal is a recommendation only and does not count towards the overall document score).

+ Response 200 (application/json)

        {
          "data": {
            "guidanceProfiles": [
                {
                    "id": "aud-1",
                    "displayName": "Tom the Technical Type",
                    "language": {
                        "id": "en-gb",
                        "displayName": "English (Great Britain)"
                    },
                    "goals": [{
                        "id": "CORRECTNESS",
                        "displayName": "Correctness",
                        "color": "#00bfa5",
                        "scoring": "required"
                    },
                    {
                        "id": "CLARITY",
                        "displayName": "Clarity",
                        "color": "#ec407a",
                        "scoring": "recommended"
                    },
                    {
                        "id": "WORDS_AND_PHRASES",
                        "displayName": "Words and Phrases",
                        "color": "#ea80fc",
                        "scoring": "required"
                    }],
                    "termSets": [{
                        "displayName": "Switches"
                    },
                    {
                        "displayName": "Acrolinx"
                    }]
                },
                {
                    "id": "aud-2",
                    "displayName": "Randolf Redakteur",
                    "language": {
                        "id": "de",
                        "displayName": "German"
                    },
                    "goals": [{
                        "id": "CORRECTNESS",
                        "displayName": "Correctness",
                        "color": "#00bfa5",
                        "scoring": "required"
                    }],
                    "termSets": []
                }
            ],
            "contentFormats": [
                {
                    "id": "auto",
                    "displayName": "Automatic Detection"
                },
                {
                    "id": "text",
                    "displayName": "Plain Text"
                },
                {
                    "id": "markdown",
                    "displayName": "Markdown"
                },
                {
                    "id": "xml",
                    "displayName": "XML"
                },
                {
                    "id": "word_xml",
                    "displayName": "XML (MS Word 2003)"
                }
            ],
            "contentEncodings": [ "none", "zip,base64", "base64" ],
            "referencePattern": "\\.(xml|xhtm|xhtml)$|\\.(md|markdown|mdown|mkdn|mkd)$|\\.(docx|docm|pptx|pptm|xlsx|xlsm)$|\\.txt$",
            "checkTypes": [ "batch", "interactive", "baseline", "automated" ],
            "reportTypes": ["extractedText", "termharvesting", "scorecard"]
          }
        }

##  Submit a Check [POST /api/v1/checking/checks]

Submits a document for checking. After uploading the document it will be scheduled for analysis. Once Acrolinx is done checking the document
all results will be collected and made available. This leads to the following steps when using the check API:

* submit a check
* poll for progress
* download check results

For an overview on what documents and file types are supported by Acrolinx please consult the list of
[Supported Input Types](https://docs.acrolinx.com/coreplatform/latest/en/compatibility/supported-input-types).
The same information is available in the checking capabilities.

+ Request (application/json)


        A minimal request declaring the format only:

        {
            "content": "text to check",                  // required
            "checkOptions": {
                "contentFormat": "markdown",                 // optional, default: auto
            },
        }

        A minimal request using a document reference to tell the format:

        {
            "content": "text to check",                  // required
            "document": {                                // optional, default: empty "document" object
                "reference": "C:\\abc.md",              // optional, used to determine the input format and correlate multiple checks of the same document
            }
        }


        If a standard format is configured on the server, the minimal request is even shorter:

        {
            "content": "text to check",                  // required
        }

        A request can be much more specific, this is the full set of attributes:

        {
            "content": "text to check",                  // required
            "contentEncoding": "base64",             // optional, default: none = HTTP request encoding
            "checkOptions": {
                "guidanceProfileId": "aud-1",                       // optional, default: first guidance profile
                "reportTypes": ["scorecard"],  // optional, default: scorecard
                "contentFormat": "markdown",                 // optional, default: auto
                "checkType": "batch",                        // optional, default: interactive
                                                             // the use case of the check, can be:
                                                             //   interactive =  human user checks own document
                                                             //   batch       =  human user checks many own documents
                                                             //   baseline    =  a repository of documents is checked, the user doesn't own the documents
                                                             //   automated   =  check of a single document for automated scenarios as for example a git hook
                "partialCheckRanges": [{ "begin": 10, "end": 20 }, { "begin": 40, "end": 70 }],   // makes the check a partial check
                "batchId": "gen.clc.159203590"                      // only for batch checks; optional;
            },
            "document": {                                // optional, default: empty "document" object
                "reference": "C:\\abc.md",              // optional client known id hint e.g. a file name
                "customFields": [                       // optional
                    {
                        "key": "field1",
                        "value": "value1"
                    },{
                        "key": "field2",
                        "value": "value2"
                    }
                ]
             }
        }

+ Response 201 (application/json)

        {
          "data": {
            "id": "AB-153"
          },
          "links": {
            "result": "https://tenant.acrolinx.cloud/api/v1/checking/checks/AB-153",
            "cancel": "https://tenant.acrolinx.cloud/api/v1/checking/checks/AB-153"
          }
        }

+ Response 400 (application/json)

        {
          "error": {
            "detail": "The guidance profile doesn't exist or isn't available for the user id and language given.",
            "type": "content_goal",
            "title": "guidance profile doesn't exist",
            "status": 400
          },
          "links": {
          }
        }


## Check Result [/api/v1/checking/checks/{id}]

### Check Result How-To

#### Ignore All Issue Occurrences
Every issue in the check result has the attribute `positionalInformation.hashes.issue`. You can use this attribute to find all occurrences of an issue. All these issues can be ignored together.

The integration can also remember the `positionalInformation.hashes.issue` attribute after an ignore-all operation. This lets you filter out all previously ignored occurrences of an issue after a recheck.

#### Replace All Issue Occurrences with a Suggestion
Every issue in the check result has the attribute `positionalInformation.hashes.issue`. You can use this attribute to find all occurrences of an issue.

To apply a suggestion to all occurrences of an issue, use the `groupId` attribute to find the corresponding suggestion.
If an occurrence of an issue doesn’t have a suggestion with the same `groupId` or if the `groupId` is empty, then it can't be replaced with a replace-all operation.

Note that not all occurrences of an issue always have the same suggestions. In this case, the replace-all operation only applies to issues with the same suggestion.


### Poll Check Result [GET]

Polls the check result. Either a progress or the completed result is returned. The URL for the request is found in the submitted check's "result" link.

+ Parameters
    + id: `AB-153` (required, string) ... the check id

+ Response 202 (application/json)

    + Headers

            Retry-After: 2

    + Body

            {
              "progress" : {
                "percent": 20,
                "message": "Waiting in queue",
                "retryAfter": "2"
              }
            }

+ Response 200 (application/json)

        Attention: which attributes are contained in the response depends on
        configuration, request and the document. The 'scoring' field in the
        goals are only present if the server runs in Targets Mode.

        {
          "data":{
            "id": "AB-153",
            "checkOptions": {
                "guidanceProfileId": "aud_1",
                "guidanceProfileName": "Acrolinx Essentials",
                "languageId": "en",
                "termSets": [{
                    "displayName": "Switches"
                },
                {
                    "displayName": "Acrolinx"
                }],
                "reportTypes": ["scorecard", "termharvesting"],
                "contentFormat": "markdown",
                "checkType": "interactive",
                "partialCheckRanges": [{ "begin": "10", "end": "20" }, { "begin": "40", "end": "70" }],
                "confidential": false
            },
            "document": {
                "id": "283ab1e075f21a",
                # DRAFT ------START------
                "contentType": "E-Mail",
                # DRAFT ------END------
                "customFields": [
                    {
                        "displayName": "Project ID",
                        "key": "projectId",
                        "value": "Marketing Campaign",
                        "required": true
                    }
                ],
                "displayInfo": {
                    "reference": "abc.md"
                }
            },
            "quality": {
                "score": 81,
                "status": "red",
                "scoresByStrategy": [
                {
                  "id": "average",
                  "score": 81
                },
                {
                  "id": "minimum",
                  "score": 78
                }],
                "scoresByGoal": [
                {
                  "id": "CORRECTNESS",
                  "score": 83
                },
                {
                  "id": "CLARITY",
                  "score": 64
                },
                {
                  "id": "WORDS_AND_PHRASES",
                  "score": 78
                }],
                "metrics": [
                {
                  "id": "Clarity index",
                  "score": 100
                },
                {
                  "id": "Informality index",
                  "score": 47
                },
                {
                  "id": "Liveliness index",
                  "score": 50
                },
                {
                  "id": "Flesch Reading Ease",
                  "score": 36
                }]
            },
            "counts": {
                "issues": 4,
                "scoredIssues": 2, // **Since Core Platform 2020.11**
                "sentences": 10,
                "words": 121
            },
            "goals": [{
                "id": "CORRECTNESS",
                "displayName": "Correctness",
                "color": "#00bfa5",
                "scoring": "required",
                "issues": 1
            },
            {
                "id": "CLARITY",
                "displayName": "Clarity",
                "color": "#ec407a",
                "scoring": "recommended",
                "issues": 2
            },
            {
                "id": "WORDS_AND_PHRASES",
                "displayName": "Words and Phrases",
                "color": "#ea80fc",
                "scoring": "required",
                "issues": 1
            }],
            "issues": [
                {
                    "goalId": "CORRECTNESS",
                    "internalName": "title_case_chicago",
                    "displayNameHtml": "Use Chicago style for the title case?",
                    "guidanceHtml": "<div class=\"shortHelp\" lang=\"en\" xml:lang=\"en\">\n<p>According to the <q>Chicago Manual of Style</q>, here's how you write titles:</p>\n<ul>\n<li>Capitalize the first word and the last word.</li>\n<li>Capitalize all \"main\" words.</li>\n<li>Don't capitalize articles and conjunctions (example: <q>a</q>, <q>and</q>).</li>\n<li>Don't capitalize prepositions independent of their length (example: <q>about</q>, <q>around</q>).</li>\n</ul>\n</div>",
                    "displaySurface": "zentense",
                    "canAddToDictionary": true,
                    "issueType": "actionable",   // possible values: actionable, analytical (since 2021.02)
                    "positionalInformation": {
                        "hashes": {
                            "issue": "BhKh3iaGBjB7Cw6M/GwrLQ==",
                            "environment": "vJ9eCVViEpIdM76h+5K/nA==",
                            "index": "hjlRLT0K+LlvlslKdNUlhw==1"
                        },
                        "matches": [{
                            "extractedPart": "zen",
                            "extractedBegin": 30,
                            "extractedEnd": 33,
                            "originalPart": "zen",
                            "originalBegin": 19247,
                            "originalEnd": 19255
                        }, {
                            "extractedPart": "te",
                            "extractedBegin": 33,
                            "extractedEnd": 35,
                            "originalPart": "&te;",
                            "originalBegin": 19250,
                            "originalEnd": 19254
                        },{
                            "extractedPart": "nse",
                            "extractedBegin": 35,
                            "extractedEnd": 38,
                            "originalPart": "nse",
                            "originalBegin": 19254,
                            "originalEnd": 19257
                        }]
                    },
                    "readOnly": true,
                    "issueLocations": [
                        {
                            "locationId": "pageLocation",
                            "displayName": "Page 4",
                            "values": { "page": "4" }
                        }
                    ],
                    "suggestions": [
                        {
                            "surface": "sentence",
                            "groupId": "sentence",
                            // the replacements refer to the matches entry of the same Index
                            // null means, don't change, any other value including the empty string means, replace the match
                            "replacements": ["sen",null,"nce"],
                            "iconId":"preferred" // optional icon id for terminology issues, "preferred" or "admitted"
                        }
                  }],
                    "links":
                        {
                            "termContribution": "https://tenant.acrolinx.cloud/terminology/v7/rest/contribute",
                            "termContributionInteractive": "https://tenant.acrolinx.cloud/termcontribution.html?surface=@@base64:cXdlcnR5dWlvcA==&locale=en&language=en&userid=admin&context=@@base64:VGhpcyBzZW50ZW5jZSBoYXMgYSBxd2VydHl1aW9wLg==",
                            "addToDictionary": "https://tenant.acrolinx.cloud/api/v1/dictionary/submit",
                            "help":"https://tenant.acrolinx.cloud/htmldata/en/rules/help/title_case_chicago.html"
                        }
                },
                {
                    "goalId": "WORDS_AND_PHRASES",
                    "internalName": "term_flag",
                    "displayNameHtml": "<b>Illegal sublanguage variant</b> of preferred term",
                    "guidanceHtml": "<div class=\"guidance term\">\n\t<b>Domains</b>\n\t\t\t<br/><i>Switches</i>\n\t\t\t\t\t<br/>\n\t\t<b>Note</b>\n\t\t<br/>\n\t\tUse &#39;please&#39; in presale materials only. Do NOT use &#39;please&#39; in postsale material.\n\t</div>\n",
                    "canAddToDictionary": false,
                    "issueType": "actionable",
                    "displaySurface": "Please",
                    "positionalInformation": {
                        "hashes": {
                            "issue": "3qyt/AVxwNTOUQSuMA7brw==",
                            "environment": "TiwIFBwA6X920mDAezJTyQ==",
                            "index": "Lm9PqBGGm+tj21rt3pkpjA==1"
                        },
                        "matches": [{
                            "extractedPart": "Please",
                            "extractedBegin": 766,
                            "extractedEnd": 772,
                            "originalPart": "Please",
                            "originalBegin": 28223,
                            "originalEnd": 28229,
                        }],
                    },
                    "readOnly": false,
                    "issueLocations": [],
                    "suggestions": [
                        {
                            "surface": "blablub",
                            "icon": "https://tenant.acrolinx.cloud/tng/icons/preferred.svg",
                            "groupId": "2653",
                            "replacements": ["blablub" ]
                            }
                        }
                    ],
                    # DRAFT ------START------
                    "debug": {
                        "term": {
                            "surface": "please",
                            "status": "DEPRECATED",
                            "termSets": ["RA-Terms"],
                            "domains": ["RA-Terms"],
                            "variant": "legalVariantIllegal",
                        }
                    }
                    # DRAFT -------END-------
                },
                {
                    "goalId": "CLARITY",
                    "internalName": "en-clarity-medium",
                    "displayNameHtml": "Too complex? Your readers need a medium level of clarity. ",
                    "guidanceHtml": "",
                    "canAddToDictionary": false,
                    "issueType": "actionable",
                    "displaySurface": "Reports ... length",
                    "positionalInformation": {
                        "hashes": {
                            "issue": "E3OxJ3bFcfWLyAisUxufAA==",
                            "environment": "XVYQZVyCoFOr1TDeyXuMgg==",
                            "index": "accsS0dbn/3rafcbT9NJGw==1"
                        },
                        "matches": [{
                            "extractedPart": "Reports",
                            "extractedBegin": 1360,
                            "extractedEnd": 1367,
                            "originalPart": "Reports",
                            "originalBegin": 33173,
                            "originalEnd": 33180,
                        }, {
                            "extractedPart": "length",
                            "extractedBegin": 1749,
                            "extractedEnd": 1755,
                            "originalPart": "length",
                            "originalBegin": 33562,
                            "originalEnd": 33568,
                        }]
                    },
                    "suggestions": [],
                    "issueLocations": [],
                    "readOnly": false,
                    "debug": {
                        "penalty": 1234.0967741949999
                    },
                    "subIssues": [{
                        "goalId": "CLARITY",
                        "internalName": "phenomenon_embedded_or_complex_sentence",
                        "displayNameHtml": "Try to split up this sentence.",
                        "guidanceHtml": "<p>This sentence doesn't seem to flow smoothly. We found a few embedded phrases in there that could be messing with your flow somehow.</p>",
                        "canAddToDictionary": false,
                        "issueType": "actionable",
                        "displaySurface": "Reports ... length",
                        "positionalInformation": {
                            "hashes": {
                                "issue": "7s1nqUN96X+P6VY4FlfSQQ==",
                                "environment": "XVYQZVyCoFOr1TDeyXuMgg==",
                                "index": "++0c1Z/OQu1Mwzt0KpkYYA==1"
                            },
                            "matches": [{
                                "extractedPart": "Reports",
                                "extractedBegin": 1360,
                                "extractedEnd": 1367,
                                "originalPart": "Reports",
                                "originalBegin": 33173,
                                "originalEnd": 33180,
                            }, {
                                "extractedPart": "length",
                                "extractedBegin": 1749,
                                "extractedEnd": 1755,
                                "originalPart": "length",
                                "originalBegin": 33562,
                                "originalEnd": 33568,
                            }]
                        },
                        "suggestions": [],
                        "issueLocations": [],
                        "readOnly": false,
                        "debug": {
                            "penalty": 320.0
                        }
                    }, {
                        "goalId": "CLARITY",
                        "internalName": "phenomenon_passive",
                        "displayNameHtml": "The active voice is usually clearer.",
                        "guidanceHtml": "<p>This one could do with a bit of pep. It's probably because it feels kind of passive. We love it when you're assertive.</p>",
                        "canAddToDictionary": false,
                        "issueType": "actionable",
                        "displaySurface": "was first seen",
                        "positionalInformation": {
                            "hashes": {
                                "flag": "dg+ih1XodWeL7lJ/wo17QQ==",
                                "environment": "XVYQZVyCoFOr1TDeyXuMgg==",
                                "index": "fOJLASZHiwnwcJWcfbkXnw==1"
                            },
                            "matches": [{
                                "extractedPart": "was",
                                "extractedBegin": 1406,
                                "extractedEnd": 1409,
                                "originalPart": "was",
                                "originalBegin": 33219,
                                "originalEnd": 33222
                            }, {
                                "extractedPart": "first",
                                "extractedBegin": 1410,
                                "extractedEnd": 1415,
                                "originalPart": "first",
                                "originalBegin": 33223,
                                "originalEnd": 33228
                            }, {
                                "extractedPart": "seen",
                                "extractedBegin": 1416,
                                "extractedEnd": 1420,
                                "originalPart": "seen",
                                "originalBegin": 33229,
                                "originalEnd": 33233
                            }]
                        },
                        "suggestions": [],
                        "issueLocations": [],
                        "readOnly": false,
                        "debug": {
                            "penalty": 40.0
                        }
                    }]
                },
                {
                    "goalId": "CLARITY",
                    "internalName": "guideline_FleschReadingEaseAsGuideline",
                    "displayNameHtml": "<span><b>Flesch Reading Ease: 47</b><br>Flesch Reading Ease is a classic readability metric.</span>",
                    "guidanceHtml": "",
                    "canAddToDictionary": false,
                    "issueType": "analytical",
                    "displaySurface": "I",
                    "issueType": "analytical",
                    "positionalInformation": {
                        "hashes": {
                            "issue": "l5wwcDu9O3IhYnnnlx6m/2e+IMTnPtkA6T3YoeqABMo=",
                            "environment": "lw/i85HTXLCY6KMk/8eOPc1vt5qB79eoy3RG1AEeQMI=",
                            "index": "9PAShJ4SjFdW4YoLGfp1WFzdUnXe9ZCP2rUI30VscFE==1"
                        },
                        "matches": [
                            {
                                "extractedPart": "I",
                                "extractedBegin": 0,
                                "extractedEnd": 1,
                                "originalPart": "I",
                                "originalBegin": 1542,
                                "originalEnd": 1543
                            }
                        ]
                    },
                    "readOnly": false,
                    "issueLocations": [],
                    "suggestions": [],
                    "subIssues": [],
                    "links": {
                        "help": "https://tenant.acrolinx.cloud/htmldata/en/rules/help/voice.FleschReadingEaseAsGuideline.html"
                    }
                }
            ],
            "keywords": {
                "links":{
                    "getTargetKeywords": "https://tenant.acrolinx.cloud/services/v1/rest/findability/targetKeywords?contextId=C%3A%5CUsers%5Cgrabowski%5CDesktop%5Ccloud-linguistic-smoketest.docx",
                    "putTargetKeywords": "https://tenant.acrolinx.cloud/services/v1/rest/findability/targetKeywords?contextId=C%3A%5CUsers%5Cgrabowski%5CDesktop%5Ccloud-linguistic-smoketest.docx"
                },
                "discovered": [{
                    "keyword": "Clarity card",
                    "sortKey": "10",
                    "density": 0.2546269436736127,
                    "count": 4,
                    "prominence": 0.0,
                    "occurrences": [{
                        "matches": [
                        // ...
                        ]
                    }],
                    "warnings": []
                }],
                "target": []
            },
            "embed":[{ // While the below keys represent the current implementation, they can change without notice
                "key": "timeStarted",
                "value": "2018-11-23T07:29:10.979Z[UTC]"
            },{
                "key": "score",
                "value": "84"
            },{
                "key": "status",
                "value": "green"
            },{
                "key": "scorecardUrl",
                "value": "https://tenant.acrolinx.cloud/services/output/en/oi5ilqippevjh2cdyn3hyldiwa_report.html"
            }],
            // DRAFT ------START------
            "addonInfo": [
                {
                    "id": "mightyAddon",
                    "title": "Mighy Addon by Cool Corp.",
                    "iconClass": "search-icon",
                    "iconUrl": "...",
                    "url": "https://mighy.cool.com/addon?fancyId=12345"
                }
            ],
            // DRAFT -------END-------
            "reports": {
                "scorecard": {
                    "displayName":"Score Card",
                    "link": "https://tenant.acrolinx.cloud/output/en/abcdef_1_report.html",
                    "linkAuthenticated": "https://tenant.acrolinx.cloud/output/en/abcdef_1_report.html?apikey=hfhfzhfhrz"
                },
                "termharvesting": {
                    "displayName": "Term Harvesting",
                    "link": "https://tenant.acrolinx.cloud/output/en/termharvesting_1.xml",
                    "linkAuthenticated": "https://tenant.acrolinx.cloud/output/en//termharvesting_1.xml?apikey=tfhzzhfhrz"
                },
                // only if a batch Id was given in the initial request
                "contentAnalysisDashboard": {
                    "displayName": "Content Analysis Dashboard",
                    "link": "https://tenant.acrolinx.cloud/batch/dccerthjj",
                }
            },
            "dictionaryScopes": ["language", "guidanceProfile", "document"]
          },
          "links": {
          }
        }

+ Response 400 (application/json)

        {
          "error": {
            "message": "Custom field values are missing",
            "type": "custom_fields_incorrect",
            "title": "Custom field values are incomplete.",
            "documentId": "3487ahgfh5fg-fg3",
            "validationDetails": [
                {
                    "title": "Custom field is required.",
                    "constraint": "Custom field \"Field\" must not be empty.",
                    "attributePath": "document.customFields.Field",
                    "detail": "Cannot set custom field \"Field\" as it is required and its value is empty.",
                    "invalidValue": null,
                    "possibleValues": ["Correct Value 1","Correct Value 2"],
                    "type": "Required"
                }
            ],
            "status": 400
          },
          "links": {
          }
        }

+ Response 400 (application/json)

        // if any of the given custom fields is invalid, a detailed error information is given.
        {
          "error": {
            "detail": "The value for document custom field \"Field\" cannot be \"Wrong Value\".",
            "type": "custom_fields_incorrect",
            "title": "Custom field values are incorrect",
            "documentId": "3487ahgfh5fg-fg3",
            "validationDetails": [
                {
                    "title": "Custom field of invalid value.",
                    "constraint": "Custom field \"Field\" must not be \"Wrong Value\".",
                    "attributePath": "document.customFields.Field",
                    "detail": "Cannot set custom field \"Field\" as it is required and its value is empty.",
                    "invalidValue": "Wrong Value",
                    "possibleValues": ["Correct Value 1","Correct Value 2"],
                    "type": "InvalidValue" // InvalidValue, InvalidField, Required, Readonly, Inconsistent
                }
            ],
            "status": 400
          }
        }




### Cancel Check [DELETE]

        Cancels a check. Users can only cancel checks they submitted. The URL for the request is found in the submitted check's "cancel" link.

+ Parameters
   + id: `153` (required, number) ... the check id


+ Response 200 (application/json)

        {
          "data": {
            "id": "153"
          }
        }


## Get Link to Content Analysis Dashboard [GET /api/v1/checking/{batchId}/contentanalysis]

Returns the links to the human readable Content Analytics Dashboard, which aggregates information of all checks belonging to the given batch id. Requires the Reporting.read privilege. The link with API token contains a new privilege token with the right Reporting.read.

+ Parameters
    + batchId: `XYZ-10-22-33` (required, string) ... the batch check id

+ Response 200 (application/json)

        {
            "links": {},
            "data": {
                "links": [
                    {
                        "linkType": "withoutAccessToken",
                        "link": "https://tenant.acrolinx.cloud/analytics/dashboard/app/entry/run.jsp?jrd_resext=%7Bactive%3A0%2Creslst%3A%5B%7Bname%3A%22%2FAcrolinxReports%2Fstandard%2FContent+Analysis.dsh%22%2C%22param_page%22%3Afalse%2Cver%3A-1%2C%22dsh_params%22%3A%5B%7B%22jrd_params%22%3A%7B%22BatchId%22%3A%22_nice_batch_id_88-xyz%22%2C%22CsBaseUrl%22%3A%22http%3A%2F%2Flocalhost%3A8031%22%2C%22CsOutputPath%22%3A%22%2Foutput%22%7D%7D%5D%7D%5D%7D&jrd_userinfo=%7B%22prefer%22%3A%7B%22rpt_lang%22%3A%22en%22%2C%22enableNLS%22%3Atrue%7D%7D&jrs.language=en"
                    },
                    {
                        "linkType": "withAccessToken",
                        "link": "https://tenant.acrolinx.cloud/analytics/dashboard/app/entry/run.jsp?jrd_resext=%7Bactive%3A0%2Creslst%3A%5B%7Bname%3A%22%2FAcrolinxReports%2Fstandard%2FContent+Analysis.dsh%22%2C%22param_page%22%3Afalse%2Cver%3A-1%2C%22dsh_params%22%3A%5B%7B%22jrd_params%22%3A%7B%22BatchId%22%3A%22_nice_batch_id_88-xyz%22%2C%22CsBaseUrl%22%3A%22http%3A%2F%2Flocalhost%3A8031%22%2C%22CsOutputPath%22%3A%22%2Foutput%22%7D%7D%5D%7D%5D%7D&jrd_userinfo=%7B%22prefer%22%3A%7B%22rpt_lang%22%3A%22en%22%2C%22enableNLS%22%3Atrue%7D%7D&jrs.language=en&apikey=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG11ZCI6ImFjcm9saW54OjA4MTEwYThjNzI3MjQzYTMiLCJuYmYiOjE1MDM5MjcyMzksImlzcyI6ImFjcm9saW54OjA4MTEwYThjNzI3MjQzYTM6NWQyNTQ2NWI5ZTA3NDNiZiIsImV4cCINjYwNTYzOSwidG9rZW5UeXBlIjoidXNlciIsImlhdCI6MTUwNDAxMzYzOSwianRpIjoiMmFmOTQzOWIzZDgyNzMwODAEyMGRiZmRlMmYifQ.Lj0chsnnRTX7IevJNyWMMlCviA6ecYAQ0kacy5EGQz0"
                    },
                    {
                        "linkType": "shortWithAccessToken",
                        "link": "http://localhost:8031/api/batch/123?apikey=eyJ0eXAiOiJKV1QiLCOiJhY3JvbGlueCIsInByaXZpbGVnZXMiOlsiQ2hlY2tpbmdBbmRDbGllbnRzLmRvd25sb2FkUmVwb3J0cyJdLCJuYmYiOjE1Mzc5NTQzMjksImlzcyI6ImFjcm9saW54OjA4MTEwYThjNzI3MjQzYTMiLCJleHAiOjE1MzgxMjcxMjksInRva2VuVHlwZSI6InByaXZpbGVnZXMiLCJpYXQi3MjksImp0aSI6IlZRTVNFUzc0SlRCR0JFVFMyWTVBRjJBU1RNIn0.ltac_6JK0s_uODrqrK3TkaUsZiXfrkamo&X-Acrolinx-Client-Locale=en"
                    },
                    {
                        "linkType": "shortWithoutAccessToken",
                        "link": "http://localhost:8031/api/batch/123?X-Acrolinx-Client-Locale=en"
                    }
                ]
            }
        }

# Group User API

Here, a user is an entity that has an id, a sign-in name, name, custom properties (set by client), and custom user information.

When custom user information is _required_:
* Interactive integrations: This will already be handled via Acrolinx sign-in. Immediately before granting
access to client, the user needs to fill out their custom user information. It's thus impossible to obtain an
access token for a user with incomplete required custom user information.
* Embedded integrations (API key-based): Dashboard access handles this. After signing in to the dashboard,
the user needs to fill out their custom user information before getting to the actual dashboard. API tokens can only be obtained
in the dashboard for the signed in user. It's thus impossible to obtain an API token for a user with incomplete required custom user information.

Security:
* A user can read and update its own data
* Only privileged users can read or update other users data

## Current User [/api/v1/user/self]

Returns information about the current user. See below for possible responses.

## User Resource [/api/v1/user/{id}]

+ Parameters
    + id: `eb323701-839f-4998-b56e-3e20c70259c5` (required, string) ... the username

### Get User [GET]

+ Response 200 (application/json)

        {
          "data": {
            "id": "eb323701-839f-4998-b56e-3e20c70259c5",
            "username": "fred",
            "fullName": "Fred Freelancer",   //
            "tenantId": "smarttech",
            "properties" : {
                "customkey": "customvalue",
            },
            "customFields": [
                {
                    "key": "Department",
                    "displayName": "Department",
                    "inputType": "optional",
                    "type": "list",
                    "value": "My Department",
                    "possibleValues": [
                        "No Department",
                        "My Department"
                    ]
                },
                {
                    "key": "external_field",
                    "displayName": "external_field",
                    "inputType": "externally_provided",
                    "type": "text"
                }
            ]
          }
        }

+ Response 401 (application/json)

        // if access token does not permit to show the user's data
        {
          "error": {
            "detail": "The user does not have the required privileges to perform the operation.",
            "title": "Insufficient privileges",
            "status": 401
            "type": "insufficient_privileges"
          }
        }

### Update User [PUT]

+ Request (application/json)

        {
             "customFields": [
                {
                    "key": "Department",
                    "value": "My new Department",
                }
            ]
        }


+ Response 200 (application/json)

        {
         "data": {
            "id": "eb323701-839f-4998-b56e-3e20c70259c5",
            "username": "fred",
            "fullName": "Fred Freelancer",   //
            "tenantId": "smarttech",
            "properties" : {
                "customkey": "customvalue",
            },
            "customFields": [
                {
                    "key": "Department",
                    "displayName": "Department",
                    "inputType": "optional",
                    "type": "list",
                    "value": "My new Department",
                    "possibleValues": [
                        "No Department",
                        "My Department"
                    ]
                },
                {
                    "key": "external_field",
                    "displayName": "external_field",
                    "inputType": "externally_provided",
                    "type": "text"
                }
            ]
          }
        }

+ Response 400 (application/json)

        // if any of the updated fields is invalid, a detailed error information is given.
        {
          "error": {
            "detail": "Please provide values for all required custom fields.",
            "type": "validation",
            "title": "Custom field values are missing",
            "validationDetails": [
                {
                    "title": "Custom field is required.",
                    "constraint": "Custom field \"Field\" must not be empty.",
                    "attributePath": "customFields.Field",
                    "detail": "Cannot set custom field \"Field\" as it is required and its value is empty.",
                    "invalidValue": null,
                    "type": "Required"
                }
            ],
            "status": 400
          }
        }

+ Response 401 (application/json)

        // if access token does not permit to update the user's data
        {
          "error": {
            "detail": "The user does not have the required privileges to perform the operation.",
            "title": "Insufficient privileges",
            "status": 401
            "type": "insufficient_privileges"
          }
        }

## Get all Users [/api/v1/user]

Returns a list of all users.

### Get Users [GET]

+ Response 200 (application/json)

        {
          "data": [
              {
                "id": "eb323701-839f-4998-b56e-3e20c70259c5",
                "username": "fred",
                "fullName": "Fred Freelancer",   //
                "tenantId": "smarttech",
                "properties" : {
                    "customkey": "customvalue",
                },
                "customFields": [
                    {
                        "key": "Department",
                        "displayName": "Department",
                        "inputType": "optional",
                        "type": "list",
                        "value": "My Department",
                        "possibleValues": [
                            "No Department",
                            "My Department"
                        ]
                    },
                    {
                        "key": "external_field",
                        "displayName": "external_field",
                        "inputType": "externally_provided",
                        "type": "text"
                    }
                ]
              },
              {
                "id": "fd3eaa89-a6b7-463a-ba12-b7ded410bda0",
                "username": "franz",
                "fullName": "Franz Hubendobler",   //
                "tenantId": "hubendoblergmbh",
                "properties" : {
                    "customkey": "customvalue",
                },
                "customFields": [
                    {
                        "key": "Department",
                        "displayName": "Department",
                        "inputType": "optional",
                        "type": "list",
                        "value": "My Department",
                        "possibleValues": [
                            "No Department",
                            "My Department"
                        ]
                    },
                    {
                        "key": "external_field",
                        "displayName": "external_field",
                        "inputType": "externally_provided",
                        "type": "text"
                    }
                ]
              }
          ]
        }

+ Response 401 (application/json)

        // if access token does not permit to show the user's data
        {
          "error": {
            "detail": "The user does not have the required privileges to perform the operation.",
            "title": "Insufficient privileges",
            "status": 401
            "type": "insufficient_privileges"
          }
        }


# Group Document API

Here, a document is an entity that associates names/characteristics that identify a document with an ID. It also contains the custom document information.

Typical program flow:

1. A document is opened in the host editor.
2. The integration uses create or retrieve document information, to check if the custom fields have to be filled out.
   If the user has to fill out custom fields, the API returns all fields to fill out and the set values.
3. The integration requests the user to fill out the custom field.
4. The integration sets the new custom fields either using the update document function or while submitting a check request.

## Document [/api/v1/document/{id}]
### Get Document [GET]

This method provides Document which was found in the database.

+ Response 200 (application/json)

        {
          "data": {
            "id": "283ab1e075f21a",
            "reference": "C:\\abc.md",
            "contentType": "E-Mail",
            "customFields": [
                {
                    "displayName": "Project ID",
                    "key": "projectId",
                    "value": null,
                    "required": true
                }
            ],
            "displayInfo": {
                "reference": "abc.md"
            }
          }
        }

### Update Document Custom Fields [PUT]

+ Request (application/json)

        {
            "reference": "C:\\abc.md",
            "contentType": "E-Mail",
            "customFields": [
                {
                    "key": "projectId",
                    "value": "Marketing Campaign"
                }
            ],
            "displayInfo": {
                "reference": "abc.md"
            }
        }


+ Response 200 (application/json)

        {
          "data": {
            "id": "283ab1e075f21a",
            "reference": "C:\\abc.md",
            "contentType": "E-Mail",
            "customFields": [
                {
                    "displayName": "Project ID",
                    "key": "projectId",
                    "value": "Marketing Campaign",
                    "required": true
                }
            ],
            "displayInfo": {
                "reference": "abc.md"
            }
          }
        }

## Document API Capabilities [GET /api/v1/document/capabilities]

Use this method to discover the configuration and capabilities of the document API.
Available information includes the configured document custom fields.

+ Response 200 (application/json)
    + Attributes
        + data (object)
        + links (object)

# Group Dictionary API

This API handles the spelling dictionary.
Items listed in the spelling dictionary are ignored (not flagged) by the spelling checker.

## Dictionary Entry
From an API perspective, an "item" or *dictionary entry* has the following properties:

* `surface`: The string that isn't a spelling issue.
* `scope`: The range of influence of the spelling exception.
    * `language`
    * `guidanceProfile`
    * `document`
* `languageId`: The language in which the surface shouldn't be a spelling issue.
* `guidanceProfileId`: The guidanceProfile for which the surface shouldn't be a spelling issue.
* `documentId`: The document in which the surface shouldn't be a spelling issue.

Depending on the `scope`, the -`Id`-values are optional or mandatory:

* `scope=language` requires a `languageId` (or alternatively an `guidanceProfileId`).
* `scope=guidanceProfile` requires an `guidanceProfileId`.
* `scope=document` requires a `documentId` and alternatively a `languageId` or an `guidanceProfileId`.

The `documentId` is a persistent identifier of the document from the Acrolinx Analytics reporting database.

(Tip: With an `guidanceProfileId` and a `documentId` you're always on the safe side.)

(Tip: guidance profiles have languages.
Keep `languageId` and `guidanceProfileId` consistent in that respect if sending both.
Otherwise the winner depends on the `scope`.)

## Get Dictionary Capabilities [GET /api/v1/dictionary/capabilities]

This method enables the integration to discover the available dictionary scopes.
(The availability of scopes depends on the server configuration and the user's privileges.)

Alternatively, you can retrieve the available scopes from a check result:

```
data.dictionaryScopes: [ "language", "guidanceProfile", "document" ]
```

+ Response 200 (application/json)

        {
          "data": {
            "scopes": [ "language", "guidanceProfile", "document" ]
          }
        }



## Add to Dictionary [POST /api/v1/dictionary/submit]

Create a dictionary entry for the specified scope.

Beware:
Spell checking is a multifaceted functionality.
Whether or not a particular issue will disappear after adding it to the dictionary, depends on the issue's true nature.
The spelling checker tells you if you can reasonably suppress an issue by adding a surface to the dictionary.
In the check result:

```
issues[n].canAddToDictionary: true
```

+ Request (application/json)

        {
            "surface": "wiruwaruwolz",                  // required
            "scope": "document",                        // required, one of the scopes above
            "languageId": "en_GB",                      // required if scope!=guidanceProfile
            "guidanceProfileId": "aud-1",                      // required if scope=guidanceProfile
            "documentId": "283ab1e075f21a"             // required if scope=document
        }

+ Response 200

        {
          "data": {
            "surface": "wiruwaruwolz",
            "scope": "document",
            "languageId": "en_GB",
            "guidanceProfileId": null,
            "documentId": "283ab1e075f21a"
          }
        }


# Group Broadcast API - DRAFT

You can use platform notifications to inform users that checking might be affected by server maintenance or planned server outages.

## Create a Platform Notification [POST /api/v1/broadcasts/platform-notifications]

Publishes a new notification on the platform.


+ Request (application/json)

        {
            "title": "Important Announcement",                               // required; The title of the notification
            "body":  "Acrolinx Platform 5.6 will be deployed tomorrow.",     // required; Notification text.
            "importance": "high",                                            // optional; "high"|"normal"; default: "normal"
            "start": 1528127782,                                             // required; Notification start time (epoch millisecond timestamp)
            "end": 1530719782                                               // required; Notification end time (epoch millisecond timestamp)
        }

+ Response 201 (application/json)

        {
          "data": {
            "id": "e06491e9-c67f-4da7-85da-eb30b9ca9101"
          }
        }

## Retrieve Platform Notifications [GET /api/v1/broadcasts/platform-notifications/{lastRequestTimeInMilliseconds}]

Retrieves active notifications from the platform.

+ Parameters
    + lastRequestTimeInMilliseconds: `1525449382` (long, required) - epoch millisecond timestamp used to filter active notifications


+ Response 200 (application/json)

        {
          "data":
            {
              "requestTimeInMilliseconds" : "1525449382",
              "platformNotifications": [{
              "id": "e06491e9-c67f-4da7-85da-eb30b9ca9101",
              "title": "Important Announcement",
              "body":  "Acrolinx Platform 5.6 will be deployed tomorrow.",
              "importance": "high",
              "start": 1528127782,
              "end": 1530719782
              }
            ]
          }}
        }



# Group Monitoring API

**Since Core Platform 2019.10**

The resources in this group provide information about the health and performance of the Acrolinx Platform.
Accessing this information requires the permission "Access to monitoring API." This privilege isn’t granted
to all users. Make sure the user associated with your API token has the requisite roles.

For a quick check of your permissions see if the [metrics index](#monitoring-api-get-available-metrics)
contains links. More information about permission management can be found in the
[Acrolinx documentation](https://docs.acrolinx.com/coreplatform/latest/en/user-management).

## Get Available Metrics [GET /api/v1/monitoring]

Lists available metrics according to the permissions of the API user. If access is granted a link to
the metrics resource will be added to the links hash. The following relations are currently available:

|Key             | Target
|----------------|-----------------
|`checkMetrics`  |[check monitoring resource](#monitoring-api-get-check-metrics)
|`healthMetrics` |[server health monitoring resource](#monitoring-api-get-health-metrics)

+ Response 200 (application/json)

        {
          "links": {
            "checkMetrics": "/api/v1/monitoring/checks",
            "healthMetrics": "/api/v1/monitoring/health"
          }
        }

## Get Check Metrics [GET /api/v1/monitoring/checks]

Provides a summary of the check activity on the Acrolinx Platform.

|Field                    |Contents
|-------------------------|-------------------
|`receivedChecks`         |Total number of checks received by the platform.
|`successfulChecks`       |Total number of completed checks that didn’t result in an error.
|`failedChecks`           |Total number of completed checks that resulted in an error.
|`unparseableDocuments`   |Total number of checks that failed due to parsing errors.
|`currentQueueLength`     |Current number of checks waiting for a free language server.
|`totalQueueTime`         |Total time, in seconds, check requests waited for a free language server.


+ Response 200 (application/json)

    + Attributes (object)
        + data (object)
            + receivedChecks: 54132 (number) - Total number of checks received
            + successfulChecks: 54130 (number) - Total number of successful checks
            + failedChecks (number): 2 - Total number of failed checks
            + unparseableDocuments: 2 (number) - Total number of checks failed due to parsing errors
            + currentQueueLength: 0 (number) - Current number of waiting checks
            + totalQueueTime: 1563 (number) - Total time checks spent waiting


## Get Health Metrics [GET /api/v1/monitoring/health]

A general summary of the health of the Acrolinx Platform.

|Field                    |Contents
|-------------------------|-------------------
|`languagesReady`         |A hash containing all configured languages as keys. If Acrolinx is ready to check in a language its value will be true.

+ Response 200 (application/json)

        {
          "data": {
            "languagesReady": {
                "en": true,
                "fr": true,
                "ja": false
          }
        }



# Group Other Methods in Existing API - DRAFT

Checking API:
* Contribute as Term (may be moved to Terminology API)

Core Service:
* get broadcast messages - integrate into "index" call?
* is user self-registration enabled - integrate into "index" call?
* create user - not needed right now? should be part of User API

Findability:
* get/update target keywords - may link to existing methods?
* get keyword info - maybe link to existing method for now?

ExtraInfo API:
* get extra info tab infos - maybe link to existing methods in "index" call for now?

Checking Profiles:
* get and update user settings? get and update profile user settings? what is this?

Feedback API:
* submit issue feedback - will be reimplemented anyway

Reuse API:
* deprecated anyway

Debug API:
* not needed for now - special use case
